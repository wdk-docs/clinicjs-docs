{"config":{"lang":["ja"],"separator":"[\\/\\s\\-\\.]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Clinicjs \u6587\u6863","text":""},{"location":"reviews/","title":"\u8bc4\u8bba","text":"<p>{{ blog_content reviews }}</p>"},{"location":"tags/","title":"Tags","text":"<p>{{ tag_content }}</p>"},{"location":"about/","title":"\u5173\u4e8e","text":"<p>\u6211\u4eec\u9879\u76ee\u7684\u9996\u8981\u76ee\u6807\u662f\u521b\u5efa\u5177\u6709\u60ca\u4eba\u7528\u6237\u4f53\u9a8c\u7684\u5f00\u53d1\u4eba\u5458\u5de5\u5177\u3002 \u8fd9\u610f\u5473\u7740\u8fd9\u4e9b\u5de5\u5177\u4e0d\u5e94\u8be5\u9700\u8981\u5927\u578b\u57fa\u7840\u8bbe\u65bd\u6765\u8fd0\u884c\uff0c\u5e76\u4e14\u5e94\u8be5\u53ef\u4ee5\u5728\u5f00\u53d1\u4eba\u5458\u7684\u7b14\u8bb0\u672c\u7535\u8111\u4e0a\u4f7f\u7528\u3002 \u5b83\u4eec\u5e94\u8be5\u751f\u6210\u53ef\u79fb\u690d\u7684\u8f93\u51fa\uff0c\u53ef\u4ee5\u5728\u5f00\u53d1\u4eba\u5458\u4e4b\u95f4\u5171\u4eab\uff0c\u5e76\u4e14\u5b83\u4eec\u5e94\u8be5\u5177\u6709\u4e00\u79cd\u6e10\u8fdb\u7684\u4fe1\u606f\u663e\u793a\u65b9\u6cd5\uff0c\u53ea\u6709\u5728\u9700\u8981\u65f6\u624d\u63d0\u4f9b\u8be6\u7ec6\u4fe1\u606f\u3002</p>"},{"location":"about/#_2","title":"\u53c2\u4e0e","text":"<p>\u5982\u679c\u60a8\u60f3\u53c2\u4e0e\u9879\u76ee\u7684\u4efb\u4f55\u65b9\u9762\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4ee3\u7801\uff0c\u8bf7\u9996\u5148\u9605\u8bfb\u6211\u4eec\u7684\u884c\u4e3a\u51c6\u5219\u548c\u8d21\u732e\u8005\u6307\u5357\u3002 \u7136\u540e\u968f\u65f6\u8054\u7cfb\u6211\u4eec\u5728GitHub\u6216\u901a\u8fc7\u901a\u5e38\u7684\u793e\u4ea4\u6e20\u9053\u3002</p>"},{"location":"blog/","title":"\u535a\u5ba2","text":"<p>{{ blog_content }}</p>"},{"location":"blog/all-the-latest-coverage-and-news-on-clinic-js/","title":"Clinic.js\u7684\u6240\u6709\u6700\u65b0\u62a5\u9053\u548c\u65b0\u95fb","text":"<p>We have been very remiss in keeping the Clinic.js blog up to date. Rest assured that is going to change for 2020.</p> <p>If you are curious about how Clinic.js might be able to help you pinpoint performance bottlenecks, here\u2019s a glimpse at how it has helped others and what they have to say about what makes it unique.</p>"},{"location":"blog/all-the-latest-coverage-and-news-on-clinic-js/#nearform-research-new-team-members","title":"NearForm Research new team members","text":"<p>The most important thing to tell you is that NearForm Research, a new group inside NearForm, is now responsible for Clinic.js. It's still the same Node.js experts but now we have even more team members. You can expect to see a lot of new functionality in Clinic.js over the next several months.</p> <p>Our newly expanded NearForm Research team finally all together in one place! \ud83d\ude80 #ideasflowing #opensource #nodejs @jasnell @addaleax @goto_bus_stop pic.twitter.com/Gub6LELzrF</p>\u2014 NearForm Research (@NF__Research) January 29, 2020"},{"location":"blog/all-the-latest-coverage-and-news-on-clinic-js/#getting-involved","title":"Getting involved","text":"<p>We love hearing from Clinic.js users and how it helped to solve performance issues for them. If you are interested in sharing your thoughts on the future of Clinic.js, please get in touch.</p>"},{"location":"blog/all-the-latest-coverage-and-news-on-clinic-js/#some-great-mentions-of-clinicjs","title":"Some great mentions of Clinic.js","text":""},{"location":"blog/all-the-latest-coverage-and-news-on-clinic-js/#adp-lifion","title":"ADP Lifion","text":"<p>Clinic.js is one of those tools that has become invaluable for many Node.js developers. We were particularly pleased to see this post from Ali Yousuf in  ADP Lifion Engineering on the Promise.allpocalypse - The performance implications of misunderstanding Node.js promises.</p> <p></p>"},{"location":"blog/all-the-latest-coverage-and-news-on-clinic-js/#opensourcecom","title":"Opensource.com","text":"<p>This was quickly followed by Hiren Dhadhuk over on opensource.com including Clinic.js in their 9 favorite open source tools for Node.js developers</p> <p></p>"},{"location":"blog/all-the-latest-coverage-and-news-on-clinic-js/#sematext","title":"Sematext","text":"<p>And earlier in 2019, Adnan Rahi\u0107 included Clinic.js in their Node.js Open Source Monitoring Tools list. And we loved the comment that \"It\u2019s surprisingly easy to use.\"</p> <p></p>"},{"location":"blog/all-the-latest-coverage-and-news-on-clinic-js/#tensorflowjs-in-clinicjs-doctor","title":"TensorFlow.js in Clinic.js Doctor","text":"<p>The TensorFlow.js team have very kindly highlighted its use in Clinic.js Doctor at multiple events including TensorFlow Dev and Node+JS Interactive.</p>"},{"location":"blog/all-the-latest-coverage-and-news-on-clinic-js/#clinicjs-helping-users","title":"Clinic.js Helping Users","text":"<p>Here's just a selection of the lovely things people have been saying on Twitter about how Clinic.js has helped them.</p>"},{"location":"blog/all-the-latest-coverage-and-news-on-clinic-js/#michael-geers","title":"Michael Geers","text":"<p>Was able to cut the build time of our design system in half today \ud83d\ude80. First time I used clinic.js by @NearForm. Awesome tool to visualise what's going on inside your node process. Thanks @DennisReimann #uiengine #designsystem #profiling #debugginghttps://t.co/88xCDuec06 pic.twitter.com/vNJDlkdK8M</p>\u2014 Michael Geers (@naltatis) August 8, 2019"},{"location":"blog/all-the-latest-coverage-and-news-on-clinic-js/#liran-tal","title":"Liran Tal","text":"<p>/3 Through these questions we understood the left and right borders and usage scenarios. One of the preliminary activities to developing this was doing performance testing with @NearForm's clinic to assess the JSON processing impact on the CPU</p>\u2014 Liran Tal \u2728 Node.js CLI Magic \u2728 (@liran_tal) February 10, 2020"},{"location":"blog/all-the-latest-coverage-and-news-on-clinic-js/#antoine-gomez","title":"Antoine Gomez","text":"<p>Thanks to @nodeclinic for helping me figure out a stupid pagination memory bug in my codeBefore / After : pic.twitter.com/5kz7ebxad7</p>\u2014 Antoine Gomez (@antoineg) September 12, 2019"},{"location":"blog/all-the-latest-coverage-and-news-on-clinic-js/#dipro-chatterjee","title":"Dipro Chatterjee","text":"<p>I recently spoke about #clinicjs and is absolutely delighted to be a user.</p>\u2014 Dipro Chatterjee (@chatterjeedipro) December 17, 2019"},{"location":"blog/all-the-latest-coverage-and-news-on-clinic-js/#flavio-aandres","title":"Flavio Aandres","text":"<p>Estan usando Node.JS para aplicaciones realmente robustas, posiblemente con Leaks de memoria, Fallas en el EventLoop y procesos demasiado costosos?Clinic.JS permite saber visualmente cuales son las funciones o metodos que bloquean el eventLoop! \ud83d\udd25\ud83d\ude4chttps://t.co/7CDbA5mMwV</p>\u2014 Flavio Aandres (@FlavioAandres) November 19, 2019"},{"location":"blog/all-the-latest-coverage-and-news-on-clinic-js/#webinars","title":"Webinars","text":"<p>Want to find out more? We're planning a series of webinars to demonstrate how the Clinic.js suite of tools can help to solve Node.js performance issues. Register your interest here and we'll be in touch with some suggested dates.</p>"},{"location":"blog/clinic-doctor-just-got-more-advanced-with-tensorflow-js/","title":"`TensorFlow.js` \u8ba9 `Clinic.js` \u533b\u751f\u66f4\u8fdb\u4e86\u4e00\u6b65","text":"<p>At the start of 2018 we introduced Clinic.js, an Open Source toolbox for developers to profile and improve their applications. As part of this toolbox, we launched Doctor, a very user-friendly tool, that uses data analysis to recommend the next steps the user should take to diagnose and fix performance problems in Node.js. And just last month we shipped a new tool, called Clinic.js Bubbleprof, which specializes in profiling I/O issues.</p> <p>While we are developing new exciting tools, we are also making a significant effort in improving the existing tools we have. An issue we have noticed during our many workshops, where we teach people to use Clinic.js, is that the way Doctor analyzed the CPU usage wasn\u2019t optimal. Until recently Doctor was using simple statistics to analyze the CPU usage, but now, with the experience we have gathered over the last half year, we have been able to develop much a more advanced Machine Learning model. This model is developed with TensorFlow.js. Because TensorFlow.js uses JavaScript, Doctor is just as easy to install as always but is now much more advanced.</p>"},{"location":"blog/clinic-doctor-just-got-more-advanced-with-tensorflow-js/#the-details","title":"The Details","text":"<p>An application with an I/O issue typically has a very low CPU usage, because it is spending most of its time being idle. However, what we have noticed is that even applications with I/O issues generate garbage, that the garbage collector will clean up. When the garbage collector runs, it makes the CPU usage spike. If the garbage collector runs often enough, the CPU usage spikes so much that our simple statistical model can no longer see that the CPU usage is too low.</p> CPU usage, with GC overlay: Shows the CPU usage with different types of garbage collection overlayed. Notice, that the alignment isn\u2019t perfect and other events are interfering.  <p>In a simple world, one could just have used information about when garbage collection is happening to filter out the CPU spikes. Unfortunately, the CPU usage data is sample based while the garbage collection data is event-based, which makes it difficult to align the two data sources. From our investigation, it is also clear that other things are going one. Some possible causes could be optimization or writing the logging information itself. All are things that happen in another thread, therefore they make the CPU usage spike to above 100%.</p> <p>Since it isn\u2019t possible to consistently detect when another thread from V8 within the application makes the CPU usage spike, the solution was to separate the spiky data with Machine Learning. For this, we use a Hidden Markov Model (HMM) with Gaussian Emissions. The central idea in HMM is that a measurable observation, the CPU usage, is influenced by a hidden unobservable state, is V8 is running an extra thread or not. The Baum\u2013Welch algorithm, allows one to statistically determine what the most likely connection is between the hidden state and the measurable observations. The Viterbi algorithm can then infer the hidden state from the measurable observations.</p> <p>A trainable and inferable implementation of HMM with Gaussian Emissions didn\u2019t exist in the npm register, therefore we ended up implementing it ourselves using TensorFlow.js. The implementation is called <code>hidden-markov-model-tf</code> and is available on npm.</p> <p>It's fully Open Source and the sourcecode is available here.</p> CPU usage filtered: Shows the CPU usage from the user\u2019s application itself, being correctly separated from the CPU usage spikes caused by V8.  <p>Using our implementation of the Hidden Markov Model, it is possible to separate the CPU usage caused by V8 from the CPU usage directly related to the user's application. With this separation in place, it is now possible to detect an I/O issue by checking if the CPU usage of the user\u2019s application is too low.</p> Final Result: The Doctor detects an I/O issues by seeing there is a low CPU usage, even if there are spikes caused by V8."},{"location":"blog/clinic-doctor-just-got-more-advanced-with-tensorflow-js/#contact","title":"Contact","text":"<p>If you would like us to do a workshop, where we teach how to profile and improve the performance of your application. Or if you need Machine Learning applied to some of your data. Then, feel free to contact us at https://www.nearform.com/contact/.</p>"},{"location":"blog/introducing-bubbleprof/","title":"\u4ecb\u7ecdBubbleprof \u2014\u2014 \u4e00\u79cd\u65b0\u9896\u7684Node.js\u5f02\u6b65\u5206\u6790\u65b9\u6cd5","text":"<p>Since the beginning of Node, profiling asynchronous operations has been a big hurdle. After months of internal research we have finally found a solution which greatly simplifies the process of finding async bottlenecks in Node applications. Today, we are glad to announce the first public version of Clinic.js Bubbleprof. Bubbleprof allows developers to capture all async activity with minimum effort. It then uses a novel \"bubble\" approach to visualize this activity. Everything you need is in one HTML file.</p> <p>You can find it included in the Clinic.js bundle:</p> <pre><code>npm install -g clinic\n</code></pre> <p>Try it out by cloning our basic Bubbleprof examples from Github:</p> <pre><code>git clone git://github.com/clinicjs/node-clinic-bubbleprof-examples\n</code></pre> <p>Start simple and run the <code>basic-latency</code> example, which visualizes how a latency of 1s affects your server:</p> <pre><code>clinic bubbleprof --on-port \u2018autocannon localhost:$PORT\u2019 -- node node-clinic-bubbleprof-examples/basic-latency\n</code></pre> <p>Notice the long lines of latency? That\u2019s a quick way of finding something to improve in the app.</p>"},{"location":"blog/introducing-bubbleprof/#traditional-async-profiling","title":"Traditional Async Profiling","text":"<p>Node works best in heavily-I/O-related contexts, and often acts as a mediator between many data streams and interfaces. Due to JavaScript\u2019s evented nature, most I/O is performed asynchronously \u2013 especially when our Node process is a networked application. If we can measure asynchronous activity in a decoupled way, we can find out where an application is waiting. Finding out where an application is waiting means finding out where to optimise our asynchronous flow. The end result being that our application becomes faster, and our users happier.</p> <p>Tracking and profiling asynchronous is a tricky issue. Consider the following simple example:</p> <pre><code>setTimeout(crash, 1000) // maybe crash after 1s\nsetTimeout(crash, 1000) // call it again\nfunction crash () {\nif (Math.random() &lt; 0.5) {\nthrow new Error(\u2018an async error\u2019)\n}\n}\n</code></pre> <p>Running the above program will (probably) crash our Node.js process with a stack like this:</p> <pre><code>set-timeout-crash.js:5\n  throw new Error('an async error')\n  ^\n\nError: an async error\n    at Timeout.crash [as _onTimeout] (set-timeout-crash.js:5:9)\n    at ontimeout (timers.js:466:11)\n    at tryOnTimeout (timers.js:304:5)\n    at Timer.listOnTimeout (timers.js:267:5)\n</code></pre> <p>Figuring out which one of the <code>setTimeout</code>s triggered the crash is a surprisingly hard problem. The stack trace only contains the last synchronous part of our application. If we want to not just figure out what crashed the program but also profile how many times the async function is called and from where we would run into similar problems.</p> <p>This is not a new problem in Node.js, but in fact one that\u2019s been around since the very beginning. Lots of solutions have been attempted for making the situation better in regards to capturing longer stack traces and measure runtime of functions. Most older solutions did things like rewrite all your code that does something async to capture a stack trace before and then combine them back to produce a \u201cfull\u201d trace. This requires plenty of \u201cmonkey patching\u201d and is known for being brittle and have a substantial negative performance effect - it would often de-optimise your code because of too much reflection.</p>"},{"location":"blog/introducing-bubbleprof/#enter-node-core-instrumentation","title":"Enter node core instrumentation","text":"<p>Luckily the Node.js core collaborators have been trying hard to make the diagnostic situation better for everyone by adding more instrumentation to the Node.js core codebase. In fact, all async code (excluding native modules) is actually triggered from Node.js core which means that the situation has to improve there for userland to get any benefit. Some of the new instrumentation that has landed recently is the new <code>async_hooks</code> core module. <code>async_hooks</code> is an interface to a new set of instrumentation in core that instruments any async operation. This means that we now have a way to hook into when something async happens and also a way to find out what the parent async operation was. This is a massive improvement in the profiling landscape as it means we can now get a ton of valuable timing data out of Node.js core without having to resort to a bunch of hacks.</p> <p>If we add some <code>async_hooks</code> magic to our previous example, then we can figure out which of the <code>setTimeout</code>s made our program crash:</p> <pre><code>const hooks = require(\"async_hooks\");\nconst stacks = [];\nhooks\n.createHook({\n// save the stack when we do something async\ninit: (id, type, trigger) =&gt; (stacks[id] = new Error(\"error\").stack),\n})\n.enable();\nsetTimeout(crash, 1000); // maybe crash after 1s\nsetTimeout(crash, 1000); // call it again\nfunction crash() {\nif (Math.random() &lt; 0.5) {\n// lookup the previous stack\nconsole.log(stacks[hooks.executionAsyncId()]);\nthrow new Error(\"an async error\");\n}\n}\n</code></pre> <p>Running it will show something similar to this:</p> <pre><code>    at AsyncHook.init\n    \u2026\n(set-timeout-crash-hook.js:11:1)\n    ...\nError: an async error\n    at Timeout.crash [as _onTimeout] (set-timeout-crash-hook.js:17:11)\n    at ontimeout (timers.js:466:11)\n    at tryOnTimeout (timers.js:304:5)\n    at Timer.listOnTimeout (timers.js:267:5)\n</code></pre> <p>Which tells us that this time it was the timeout at line 11 (first one) that triggered the crash.</p> <p>In addition to letting us capture the async context async_hooks gives us valuable insights into latency stats, throughput, the type of resource, and more.</p>"},{"location":"blog/introducing-bubbleprof/#reducing-complexity","title":"Reducing complexity","text":"<p><code>async_hooks</code> and other new core instrumentation give us a new waterhose of profiling data in Node.js. This is essential for doing any kind of profiling but also poses an interesting challenge. How do we digest this data in a way that helps us diagnose bottlenecks and/or find errors in our application? This, of course, is a non-trivial problem and depends on the use-case we are trying to support.</p> <p>This is why we\u2019ve started building Bubbleprof, a new command in the Clinic.js toolchain. Bubbleprof uses a series of heuristics and a novel \u201cbubble\u201d based UI to help all kinds of users - from beginners to advanced - to determine where asynchronous time is spent in their application.</p> <p>Through a series of design workshops we\u2019ve come up with a couple of heuristics we think help group async data together in a way that makes it easy to get an overview over your application.</p> <p>There are 3 interesting groupings of code in your Node.js application:</p> <ul> <li>\"User code\", ie. code you are writing as part of your app.</li> <li>\"Module code\", code running in modules you have installed from npm</li> <li>\"Node core code\", code running in Node.js core.</li> </ul> <p>When code crosses the boundary between one of these groupings, we consider it important information that can help us group asynchronous operations together. Bubbleprof tries to collect and aggregate all async operations (using <code>async_hooks</code>) and then group them into bubbles based on this heuristic.</p>"},{"location":"blog/introducing-bubbleprof/#visualizing-async-flow","title":"Visualizing async flow","text":"<p>Now that we have a manageable number of groupings - instead of hundreds or thousands of distinct async operations - we can draw a diagram that acts like a map of an application's async flow, showing where time is spent. For example, in this profile based on ACMEair (a dummy flight data application designed for use in benchmarking), we immediately see a flow centered around the database module MongoDB:</p> <p></p> <p>Live example</p>"},{"location":"blog/introducing-bubbleprof/#bubbles-and-links","title":"Bubbles and links","text":"<p>These \"bubbles\" represent the time spent in synchronous and asynchronous operations within this grouping. The largest bubble in the view represents calls from the <code>mongodb-core</code>, which calls other functions elsewhere in the <code>mongodb</code> code. It dwarves every other bubble, which compared to it are tiny dots, and much of the application branches off from it. Clearly, optimising how this application uses <code>mongodb</code> has a lot of potential to reduce overhead and trigger other async operations earlier. The dominating green colouring in the inner ring tells us that most of this time is spent on network-related activities, while the small sliver of purple indicates some time spent in scheduling (ticks, timeouts and promises). Rolling the mouse over the labels for these colours gives us information on what they mean and highlights the appropriate parts of the diagram.</p> <p>There is also a very long line to a tiny bubble labelled <code>nextTick + http.server</code>. A thin white stripe tells us that this is code from our own application. Connecting lines like this one represent asynchronous delays from operations that were called in one grouping (here, the <code>mongodb</code> module), but execute code in another (here, some of our application's own code which involves an <code>http</code> server and <code>nextTick</code> wrappers). This suggests another area for us to focus on: our own code, which might be a quick win.</p> <p></p> <p>Live example</p>"},{"location":"blog/introducing-bubbleprof/#drilling-down-to-code","title":"Drilling down to code","text":"<p>We can click into these links and bubbles to see what is going on inside them. Clicking on the line shows something very simple: <code>startServer</code> is responsible for almost all of the delay in this grouping. Clicking again brings up the stack trace; and also - because context here is important - the complete async trace of the chain of events from our application's initiation to this point.</p> <p></p> <p>Live example</p> <p>Because these traces can be very long, we group adjacent frames from the same section of code, automatically expanding those from the user's own application. In this example, <code>startServer</code> at line 192 of our <code>app.js</code> called the <code>express</code> module, which invoked a number of operations in node core, with <code>createServerHandle</code> being the last one. This was called from the <code>mongodb</code> client.</p> <p>Looking at the area chart on the right, we see that this was pending for most of the runtime of our application. Is this a slow server we want to optimise, or a healthy service constantly awaiting requests? We can check our application code and find out.</p> <p>We can click the upwards-pointing arrow labelled \"Mongo...\" to navigate up into that big, <code>mongodb-core</code> bubble. The view inside it also very simple - dominated by <code>Connection.connect</code>, called from within <code>node_modules/mongodb-core</code>.</p> <p></p> <p>Live example</p>"},{"location":"blog/introducing-bubbleprof/#navigating-async-complexity","title":"Navigating async complexity","text":"<p>So what about the parts of our <code>mongodb</code> integration that are fast? If we click the small topmost grouping, it expands out into another more complex layout. These tiny, extremely short async operations would have been too small to be useful information in the previous view, so Bubbleprof has collapsed them together.</p> <p></p> <p>Live example</p> <p>Exploring this view, we see activity mostly relating to database connection pools and sockets. Everything looks fine in terms of speed, and we can use these maps of how processes execute in series and parallel to better understand the module's flow, diagnose timing bugs, spot operations in series that could be more efficient in parrallel, and identify unnecessary steps that can be optimised away.</p> <p>This is just a simple example. You can use Bubbleprof with benchmarking tools like Autocannon or Wrk to generate robust performance profiles, and see the changes in your application's throughput and flow as you try things out. We have a simple step-by-step walkthrough guide to help you get started.</p>"},{"location":"blog/introducing-bubbleprof/#get-started","title":"Get Started","text":"<p>We'd love for you to install and try out Bubbleprof to see how it can help get to the bottom of your Node.js performance issues.</p> <p>Head over to the walkthrough and you'll be up and running in minutes.</p> <p>We'd also love to get your feedback on Bubbleprof/Doctor/Flame and the outputs they generate. In this early phase of release, we're eager to have it used on as many real-world problems as possible.</p> <p>We welcome everyone who is interested in becoming part of our community. If you'd like to get involved in any aspect, not just code, first read our Code of Conduct and Contributor guide. Then feel free to reach out to us on GitHub or via the usual social channels.</p>"},{"location":"bubbleprof/","title":"Clinic.js Bubbleprof","text":"<p>Bubbleprof\u662f\u4e00\u79cd\u5168\u65b0\u7684\u65b9\u5f0f\u6765\u53ef\u89c6\u5316\u4f60\u7684Node.js\u8fdb\u7a0b\u7684\u64cd\u4f5c\u3002 \u5b83\u89c2\u5bdf\u5e94\u7528\u7a0b\u5e8f\u7684\u5f02\u6b65\u64cd\u4f5c\uff0c\u5bf9\u5b83\u4eec\u8fdb\u884c\u5206\u7ec4\uff0c\u6d4b\u91cf\u5b83\u4eec\u7684\u5ef6\u8fdf\uff0c\u5e76\u7ed8\u5236\u5e94\u7528\u7a0b\u5e8f\u5f02\u6b65\u6d41\u4e2d\u7684\u5ef6\u8fdf\u56fe</p> <p>\u9605\u8bfb\u4ecb\u7ecd\u6027\u535a\u5ba2\u6587\u7ae0\u548c\u53d1\u5e03\u516c\u544a\u3002</p>"},{"location":"bubbleprof/#_1","title":"\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684","text":"<p>\u6bcf\u4e2a\u6c14\u6ce1\u7684\u5927\u5c0f\u8868\u793a\u4e00\u7ec4\u64cd\u4f5c\u4e2d\u7684\u65f6\u95f4\u3002 \u5c06\u8fd9\u4e9b\u6d41\u653e\u5728\u60a8\u81ea\u5df1\u7684\u4ee3\u7801\u3001\u6a21\u5757\u6216\u8282\u70b9\u6838\u5fc3\u4e2d\u7684\u4f4d\u7f6e\u8fdb\u884c\u5206\u7ec4\u3002 \u5c0f\u7684\u76f8\u90bb\u7ec4\u4e5f\u5206\u7ec4\u4ee5\u51cf\u5c11\u6742\u4e71\u3002 \u8fde\u63a5\u6c14\u6ce1\u7684\u7bad\u5934\u7684\u957f\u5ea6\u663e\u793a\u4e86\u6d41\u4ece\u4e00\u4e2a\u7ec4\u79fb\u52a8\u5230\u53e6\u4e00\u4e2a\u7ec4\u65f6\u7684\u5ef6\u8fdf\u3002 \u5185\u90e8\u7684\u5f69\u8272\u7ebf\u8868\u793a\u9020\u6210\u6b64\u5ef6\u8fdf\u7684\u5f02\u6b65\u64cd\u4f5c\u7c7b\u578b\u7684\u6df7\u5408\u3002 \u70b9\u51fb\u67e5\u770b\u3002 \u6c14\u6ce1\u548c\u6570\u5b57\u6807\u7b7e\u4e4b\u95f4\u548c\u5468\u56f4\u7684\u7ebf\u957f\u5ea6\u53cd\u6620\u4e86\u4ee5\u6beb\u79d2(ms)\u4e3a\u5355\u4f4d\u7684\u805a\u5408\u5ef6\u8fdf\u3002</p>"},{"location":"bubbleprof/#_2","title":"\u6f14\u793a","text":"<p>\u4e92\u52a8\u7684\u4f8b\u5b50</p>"},{"location":"bubbleprof/#_3","title":"\u8bbe\u7f6e","text":"<pre><code>npm install -g clinic\nclinic bubbleprof --help\n</code></pre>"},{"location":"doctor/","title":"Clinic.js Doctor","text":"<p>\u533b\u751f\u53ef\u4ee5\u5e2e\u52a9\u8bca\u65ad\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u6027\u80fd\u95ee\u9898\uff0c\u5e76\u6307\u5bfc\u60a8\u4f7f\u7528\u66f4\u4e13\u4e1a\u7684\u5de5\u5177\u6765\u6df1\u5165\u4e86\u89e3\u60a8\u7684\u7279\u5b9a\u95ee\u9898\u3002 \u4f4eCPU\u4f7f\u7528\u7387\u3001\u963b\u585e\u5783\u573e\u6536\u96c6\u3001\u9891\u7e41\u7684\u4e8b\u4ef6\u5faa\u73af\u5ef6\u8fdf\u6216\u6d3b\u52a8\u53e5\u67c4\u6570\u91cf\u6df7\u4e71\u7b49\u75c7\u72b6\u53ef\u80fd\u8868\u660e\u5b58\u5728\u8bb8\u591a\u6f5c\u5728\u95ee\u9898\u3002 \u533b\u751f\u6839\u636e\u8fd9\u4e9b\u75c7\u72b6\u7ed9\u51fa\u5efa\u8bae\uff0c\u5e2e\u52a9\u7f29\u5c0f\u53ef\u80fd\u6027\u3002 I/O\u95ee\u9898\u3001\u672a\u4f18\u5316\u7684\u5783\u573e\u6536\u96c6\u548c\u963b\u585e\u7684\u4e8b\u4ef6\u5faa\u73af\u7b49\u4f8b\u5b50\u975e\u5e38\u5e38\u89c1\u3002 \u533b\u751f\u4f1a\u5e2e\u4f60\u89e3\u51b3\u6240\u6709\u8fd9\u4e9b\u95ee\u9898\u3002</p> <p>\u4e00\u65e6\u8bca\u65ad\u51fa\u95ee\u9898\uff0c\u533b\u751f\u4f1a\u5e2e\u52a9\u60a8\u627e\u5230\u6b63\u786e\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u5b83\u53ef\u80fd\u4f1a\u4e3a\u60a8\u6307\u51fa\u4e00\u4e2a\u7279\u5b9a\u7684\u5206\u6790\u5de5\u5177\u6216\u5efa\u8bae\u89e3\u51b3\u95ee\u9898\u7684\u901a\u7528\u65b9\u6cd5\u3002 \u5bf9\u4e8e\u90a3\u4e9b\u559c\u6b22\u66f4\u591a\u80cc\u666f\u7684\u4eba\u6765\u8bf4\uff0c\u533b\u751f\u8fd8\u63d0\u4f9b\u4e86\u5bf9\u8fd9\u4e2a\u95ee\u9898\u7684\u6df1\u5165\u89e3\u91ca\u3002 \u5728\u60a8\u9884\u611f\u5230\u95ee\u9898\u53ef\u80fd\u4e0e\u5efa\u8bae\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u533b\u751f\u63d0\u4f9b\u4e86\u5bf9\u6240\u6709\u5176\u4ed6\u95ee\u9898\u7684\u6587\u6863\u7684\u8f7b\u677e\u8bbf\u95ee\u3002</p>"},{"location":"doctor/#_1","title":"\u6f14\u793a","text":"<p>\u4ea4\u4e92\u6837\u4f8b</p>"},{"location":"doctor/#_2","title":"\u914d\u7f6e","text":"<pre><code>npm install -g clinic\nclinic doctor --help\n</code></pre>"},{"location":"documentation/","title":"\u5f00\u59cb","text":"<p>\u5728\u5f00\u59cb\u4f7f\u7528Clinic.js\u4e4b\u524d\uff0c\u9996\u5148\u8ba9\u6211\u4eec\u786e\u4fdd\u5c06\u5176\u5b89\u88c5\u5728\u6211\u4eec\u7684\u673a\u5668\u4e0a\uff0c\u5e76\u8fd0\u884c\u51e0\u4e2a\u6d4b\u8bd5\u4ee5\u786e\u4fdd\u4e00\u5207\u6b63\u5e38\u3002\u8ba9\u6211\u4eec\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u5f00\u59cb:</p> <p>1. \u6ce8\u610f:\u4f60\u5fc5\u987b\u4f7f\u7528Node.js <code>&gt;= 8.11.1</code>\u7248\u672c</p> <pre><code>npm install -g clinic\n</code></pre> <p>2. \u786e\u8ba4\u5b83\u5df2\u7ecf\u5b89\u88c5\u597d\u4e86:</p> <pre><code>clinic --help\n</code></pre> <p>3. \u5b83\u5e94\u8be5\u8f93\u51fa\u7c7b\u4f3c\u4e0b\u9762\u7684\u5185\u5bb9:</p> <pre><code>Clinic.js - v2.2.1\n\nGetting started\nAs a first step, run the clinic doctor:\n\n  clinic doctor -- node server.js\n\nThen benchmark your server with wrk or autocannon:\n\n  wrk http://localhost:3000\n  autocannon http://localhost:3000\n\nFinally shut down your server (Ctrl+C). Once the server process has shutdown\nclinic doctor will analyse the collected data and detect what type of issue\nyou are having. Based on the issue type, it will provide a recommendation for\nyou.\n\nFor example, to debug I/O issues, use Clinic.js Bubbleprof:\n\n  clinic bubbleprof -- node server.js\n\nThen benchmark your server again, just like you did with clinic doctor.\n\nReport an issue\nIf you encounter any issue, feel free to send us an issue report at:\n\n  https://github.com/clinicjs/node-clinic/issues\n\nUtilities\nWhen using clinic a bunch you have fill up your directory with data folders and files.\nYou can clean these easily using clinic clean.\n\nMore information\nFor information on the clinic sub-commands, use the --help option:\n\n  clinic doctor --help\n  clinic bubbleprof --help\n  clinic clean --help\n  clinic flame --help\n  clinic heapprofiler --help\n\nFlags\n-h | --help                Display Help\n-v | --version             Display Version\n</code></pre> <p>4. \u6211\u4eec\u5728Github\u4e0a\u6709\u4e00\u7ec4\u793a\u4f8b\u5e94\u7528\u7a0b\u5e8f\u3002\u8ba9\u6211\u4eec\u4f7f\u7528Clinic.js Doctor\u548cautocannon\u6765\u8fd0\u884c\u7b2c\u4e00\u4e2a:</p> <pre><code>git clone git@github.com:nearform/node-clinic-doctor-examples.git\ncd node-clinic-doctor-examples\nnpm install\nclinic doctor --autocannon [ / ] -- node ./slow-io\n</code></pre> <p>\u8fd9\u5c06\u5bf9\u4e00\u4e2a\u6709IO\u95ee\u9898\u7684\u7b80\u5355\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884cautocannon\uff0c\u4e00\u65e6\u5b83\u5b8c\u6210\uff0c\u5b83\u5c06\u81ea\u52a8\u542f\u52a8\u6d4f\u89c8\u5668\u4e2d\u7684Doctor\u5de5\u5177\u3002</p>"},{"location":"documentation/#_2","title":"\u4e0b\u4e00\u4e2a","text":"<p>\u901a\u5e38\uff0c\u5728\u4f7f\u7528Clinic.js\u65f6\uff0c\u6211\u4eec\u9996\u5148\u4f7f\u7528Clinic.js Doctor\u6765\u8bc6\u522b\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5b58\u5728\u7684\u6027\u80fd\u95ee\u9898\u3002\u7136\u540e\u533b\u751f\u4f1a\u7ed9\u6211\u4eec\u5efa\u8bae\u4e0b\u4e00\u6b65\u8981\u505a\u4ec0\u4e48\u5de5\u5177\u548c\u8be2\u95ee\u3002</p> <p>\u5f00\u59cb\u4f7f\u7528Clinic.js Doctor.</p> <p>\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u6df1\u5165\u4e86\u89e3CLI\u7684\u6982\u8ff0\u3002 CLI.</p>"},{"location":"documentation/bubbleprof/","title":"Bubbleprof","text":"<p>\u4f60\u542c\u8bf4\u8fc7\u8fd9\u4e2a\u53ebBubbleprof\u7684\u4ee4\u4eba\u5174\u594b\u7684\u65b0\u5de5\u5177\uff0c\u60f3\u8bd5\u4e00\u8bd5\u5417?\u4e0d\u77e5\u9053\u4ece\u54ea\u91cc\u5f00\u59cb?\u90a3\u4e48\u8fd9\u7bc7\u6587\u7ae0\u5c31\u662f\u7ed9\u4f60\u7684\u3002</p> <ol> <li>\u914d\u7f6e</li> <li>\u51c6\u5907</li> <li>\u7b2c\u4e00\u5206\u6790</li> <li>Bubbles</li> <li>\u4fa7\u8fb9\u680f</li> <li>\u627e\u5230\u7b2c\u4e00\u4e2a\u74f6\u9888</li> <li>\u6539\u5584\u6211\u4eec\u7684\u5ef6\u8fdf</li> <li>\u5e76\u884c\u67e5\u8be2</li> <li>\u7f13\u5b58\u7ed3\u679c</li> </ol>"},{"location":"documentation/bubbleprof/01-setup/","title":"\u914d\u7f6e","text":"<p>Bubbleprof \u662f <code>Clinic.js</code> \u5de5\u5177\u5957\u88c5\u7684\u4e00\u90e8\u5206\u3002 \u8981\u5b89\u88c5 Bubbleprof\uff0c\u53ea\u9700\u50cf\u8fd9\u6837\u5b89\u88c5 <code>Clinic.js</code>:</p> <pre><code>npm install -g clinic\n</code></pre> <p>\u5728\u5b89\u88c5\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c\u5e26\u6709<code>--help</code>\u6807\u5fd7\u7684<code>clinic bubbleprof</code>\u547d\u4ee4\u6765\u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u5b89\u88c5\u4e86 Bubbleprof\u3002</p> <pre><code>clinic bubbleprof --help\n</code></pre> <p>\u5b83\u5e94\u8be5\u8f93\u51fa\u7c7b\u4f3c\u4e0b\u9762\u7684\u5185\u5bb9:</p> <pre><code>Clinic.js BubbleProf - v1.11.0\n\nclinic bubbleprof helps you find asynchronous bottlenecks and debug event loop blocking.\n\nTo run clinic bubbleprof\n\n  clinic bubbleprof -- node server.js\n\nIf profiling on a server, it can be useful to only do data collection:\n\n  clinic bubbleprof --collect-only -- node server.js\n\nYou can then transfer the data and visualize it locally:\n\n  clinic bubbleprof --visualize-only PID.clinic-bubbleprof-sample\n\nFlags\n-h | --help                Display Help\n-v | --version             Display Version\n--collect-only             Do not process data on terminiation\n--visualize-only datapath  Build or rebuild visualization from data\n</code></pre>"},{"location":"documentation/bubbleprof/01-setup/#_2","title":"\u4e0b\u4e00\u4e2a","text":"<p>\u51c6\u5907</p>"},{"location":"documentation/bubbleprof/02-getting-ready/","title":"\u51c6\u5907","text":"<p>Great, now we are ready to start profiling. To start profiling we find need a server of some sorts that does some async operations to get started. To keep things simple let's use our \"official\" Bubbleprof example that evolves around optimising a server that queries a mongodb containing npm metadata data.</p> <pre><code>git clone https://github.com/clinicjs/node-clinic-bubbleprof-demo.git\n</code></pre> <p>If you read the example README, it will contain some instructions on how to get mongodb setup with npm data and more.</p>"},{"location":"documentation/bubbleprof/02-getting-ready/#_2","title":"\u4e0b\u4e00\u4e2a","text":"<p>\u9996\u5148\u5206\u6790</p>"},{"location":"documentation/bubbleprof/03-first-analysis/","title":"\u5206\u6790","text":"<p>Now we're ready to run an analysis. Let's try with the first server in the repo, <code>1-server-with-no-index.js</code>. It contains a small server that queries mongodb for the 5 newest and 5 oldest node modules.</p> <p>You can run it by simply doing <code>node 1-server-with-no-index.js</code> and query it by going to <code>localhost:3000</code> in your browser afterwards. If it returns a JSON response things are working!</p> <p>Let's try and profile the server with Bubbleprof to see if we can find any bottlenecks. To do that we need a tool that can send a ton of http requests against the server fast. If you don't have one, <code>autocannon</code> is easy to use. You can install it from npm.</p> <pre><code>npm install -g autocannon\n</code></pre> <p>To run the analysis we want to run the server with Bubbleprof and when the server is ready - i.e. starts listening on a port - we want to send a ton of requests to it using autocannon. We can do all that in this one single command:</p> <pre><code>clinic bubbleprof --on-port 'autocannon -c 5 -a 500 localhost:$PORT' -- node 1-server-with-no-index.js\n</code></pre> <p>Before running it, let's explain what's happening in there. The part after <code>--</code> is simply the command to start running your server. The <code>--on-port</code> flag is a script that is executed as soon as your server starts listening on a port. The <code>$PORT</code> variable in that script is set to the port your server started listening on. When the <code>--on-port</code> scripts ends, the Bubbleprof analysis will run on the data collected from the server and open the results in a html page.</p> <p>You may have also noticed <code>-c 5 -a 500</code> flags. This tells autocannon to send a fixed amount of requests (5 connections making a total of 500 requests). By default autocannon tries to apply pressure for full 10 seconds, then suddenly stops. While very useful for testing load tolerance, this would make it difficult to observe performance improvements in single components, as most async operations would be active for 95% of the profiling time.</p> <p>Now try and run it.</p> <p>It'll take about 15 seconds to run. Afterwards a html page similar to this should open:</p> <p></p> <p>First thought is probably something similar to \"That's a lot of bubbles!\".</p>"},{"location":"documentation/bubbleprof/03-first-analysis/#_2","title":"\u4e0b\u4e00\u4e2a","text":"<p>Bubbles</p>"},{"location":"documentation/bubbleprof/04-bubbles/","title":"\u6ce1\u6cab","text":"<p>Let's dive into what these mean and how to interpret them.</p> <ul> <li>A bubble represents a group of async operations.</li> <li>The more time spent within a group of async operations, the bigger the bubble is.</li> <li>The longer the lines between bubbles, the more latency exists between them.</li> </ul> <p>The way bubbles group together async time is based on a couple of heuristics.</p> <p>Profiled code is grouped into 3 areas - userland (the application being profiled), dependencies (3rd party modules), and node core.</p> <p>Whenever an async operation crosses from one space into another it defines the boundary of a bubble.</p> <p>Clicking on a bubble steps inside it to show the bubbles it's composed of.</p> <p>For example, try clicking on the yellow bubble at the bottom called mongojs. The UI tells us it contains userland code as well as it has a lightblue color.</p> <p></p> <p>In here we see that there are two smaller bubbles. If we click on the first one it'll show the stack trace for the operation that created this as it has no sub bubbles.</p> <p></p> <p>This stack trace is actually a combined stack trace by multiple async operations. The userland code is highlighted to help you navigate to your code that triggered this bubble. In this case it tells us that it was from line 10 in <code>1-server-with-no-index.js</code>.</p> <p>If we look into the source file we'll see that line 10 looks like this:</p> <pre><code>col.find().sort({modified: -1}).limit(5, function (err, newest) {\n</code></pre> <p>Which makes sense, as this is a mongodb query. In fact if we look at the other yellow bubble on the page, we'll see that it contains a reference to the next query inside its callback. This link indicates that these bubbles are executed in series.</p>"},{"location":"documentation/bubbleprof/04-bubbles/#_2","title":"\u4e0b\u4e00\u4e2a","text":"<p>Sidebar</p>"},{"location":"documentation/bubbleprof/05-sidebar/","title":"\u4fa7\u8fb9\u680f","text":"<p>So the bubbles show an overview on where time is spent. To get an idea on how much time is spent in general you can inspect the sidebar.</p> <p>Try going back to the Main View. You can use <code>backspace</code> on your keyboard to step back, or use the on-screen controls. On the right side of screen you should see a sidebar similar to this one:</p> <p></p> <p>In the top of the sidebar there are two important sections.</p> <ol> <li>A search bar that allows you to search the data to find a specific function call.</li> <li>A timeline that shows the async activity over time.</li> </ol> <p>Timeline is very useful at examining throughput and that could give us a clue where the first bottleneck could be found.</p>"},{"location":"documentation/bubbleprof/05-sidebar/#_2","title":"\u4e0b\u4e00\u4e2a","text":"<p>Finding the first bottleneck</p>"},{"location":"documentation/bubbleprof/06-finding-the-first-bottleneck/","title":"\u627e\u5230\u7b2c\u4e00\u4e2a\u74f6\u9888","text":"<p>A few things we notice by looking at this first diagram are:</p> <ol> <li>A lot of time is spent inside the mongodb bubble on the left.</li> <li>Similar amount of time is spent querying in the query bubble at the bottom.</li> <li>The timeline is sparse indicating low throughput.</li> </ol> <p>This seems like a throughput problem, likely related to mongodb.</p> <p>If we investigate the database setup we notice that the server is using a collection that doesn't contain an index.</p> <p>This means the database has to iterate all the data every time to answer our query, which creates a lot of database latency.</p> <p>We can reduce this overhead by adding an index on the properties we use.</p>"},{"location":"documentation/bubbleprof/06-finding-the-first-bottleneck/#_2","title":"\u4e0b\u4e00\u4e2a","text":"<p>Improving our latency</p>"},{"location":"documentation/bubbleprof/07-improving-our-latency/","title":"\u6539\u5584\u6211\u4eec\u7684\u5ef6\u8fdf","text":"<p>In our example, we have already added an ascending index based on the <code>modified</code> (datetime) attribute in our data. This indexed collection is used by the second example - <code>2-server-with-index.js</code>. Let's run our benchmark against this server and see if we can improve further.</p> <pre><code>clinic bubbleprof --on-port 'autocannon -c 5 -a 500 localhost:$PORT' -- node 2-server-with-index.js\n</code></pre> <p></p> <p>Much better. We can immediately see that the time in mongo and fastify bubbles has dropped by about one third. Looking at the timeline we can also notice that the total time to serve those 500 requests went down from 15 seconds to 9 seconds. Also the timeline itself became denser, meaning we spend less time waiting between serving the requests. In other words - it took less time to do the same amount of work.</p> <p>How can we improve this even further? Let's explore the bubbles a bit. The mongodb bubble on the left is based on the mongodb npm module and there is probably not much we can do to improve this 3rd party dependency. Same goes for the fastify bubble on the top.</p> <p>Let's dive in to our query bubble at the bottom:</p> <p></p> <p>This bubble clearly shows that our queries are executed in series as one follows the other. However if we think about this a little bit, there is actually no need for that. Both of the queries are independent so we can easily execute them in parallel. Doing that would make this bubble much smaller and hopefully increase performance.</p>"},{"location":"documentation/bubbleprof/07-improving-our-latency/#_2","title":"\u4e0b\u4e00\u4e2a","text":"<p>Parallel queries</p>"},{"location":"documentation/bubbleprof/08-parallel-queries/","title":"\u5e76\u884c\u67e5\u8be2","text":"<p>The third example, <code>3-server-with-index-in-parallel.js</code> is similar to second example, but executes the queries in parallel. Let's profile it again.</p> <pre><code>clinic bubbleprof --on-port 'autocannon -c 5 -a 500 localhost:$PORT' -- node 3-server-with-index-in-parallel.js\n</code></pre> <p></p> <p>Now instead of having a simple mongodb query bubble we have two tiny ones each flanking our fastify bubble on the top. This is much better as it means we are doing more async operations in parallel.</p> <p>Once again we can see a drop in the total times by further one third. This is reflected both in the bubbles and the timeline.</p> <p>As it stands, this bubble layout is close to optimal. We have almost no userland code taking up any time anymore, which means most time is spent in 3rd party modules - which we assume to be pretty optimal for their usecase as well.</p> <p>The main way to improve this now, would be to get rid of the mongodb bubble or fastify bubble entirely. Getting rid of fastify would be hard as our application is a http server and fastify is already really good at doing http stuff. To get rid of the mongodb bubble we would have to do fewer things with the database.</p>"},{"location":"documentation/bubbleprof/08-parallel-queries/#_2","title":"\u4e0b\u4e00\u4e2a","text":"<p>Caching the results</p>"},{"location":"documentation/bubbleprof/09-caching-the-results/","title":"\u7f13\u5b58\u7ed3\u679c","text":"<p>A way to do that would be to add caching. Our result seldomly changes so caching it in an LRU cache would be a great way to reduce the amount of database queries done in total.</p> <p>This is implemented in <code>4-server-with-caching.js</code>. Let's run it:</p> <pre><code>clinic bubbleprof --on-port 'autocannon -c 5 -a 500 localhost:$PORT' -- node 4-server-with-caching.js\n</code></pre> <p></p> <p>Our mongodb bubbles have shrunk 7x. And about 20x in comparison with the first example. Also, following the yellow line in the timeline tells us that mongodb activity has been replaced by caching activity after initial query response arrived. Now our mongodb bubbles are tiny - and by far the most time is spent just serving http requests.</p> <p>Hope this helps you understand the Bubbleprof tool better and how to use it to find your bottlenecks.</p>"},{"location":"documentation/cli/","title":"CLI","text":"<p>Clinic.js \u63d0\u4f9b\u4e86\u8bb8\u591a\u5de5\u5177\u6765\u5e2e\u52a9\u6211\u4eec\u8bc6\u522b Node.js \u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u6027\u80fd\u95ee\u9898\u3002 \u4e00\u65e6\u5b89\u88c5\u4e86Clinic.js\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u9876\u5c42\u7684' clinic '\u547d\u4ee4\u8bbf\u95ee\u6240\u6709\u8fd9\u4e9b\u5de5\u5177\u3002</p>"},{"location":"documentation/cli/#_1","title":"\u547d\u4ee4\u7684\u5256\u6790","text":"<p>\u751f\u6210Doctor\u6837\u672c\u7684\u6700\u7b80\u5355\u5f62\u5f0f\u7684 Clinic.js \u547d\u4ee4\u5982\u4e0b:</p> <pre><code>clinic doctor -- node server.js\n</code></pre> <p>\u201c\u2014\u2014\u201d\u8868\u793a\u547d\u4ee4\u548c\u6807\u5fd7\u7684\u7ed3\u675f\uff0c\u5c06\u547d\u4ee4\u5206\u4e3a\u4ee5\u4e0b\u4e24\u4e2a\u76f8\u5173\u90e8\u5206:</p> <p>1. ' clinic doctor '\u901a\u77e5 Clinic.js \u6211\u4eec\u5e0c\u671b\u4f7f\u7528clinic .js doctor\u6765\u83b7\u5f97\u5e94\u7528\u7a0b\u5e8f\u5f53\u524d\u6027\u80fd\u7684\u6982\u8ff0\u3002</p> <p>2. ' node server.js '\u662f\u6211\u4eec\u7528\u6765\u4ece\u547d\u4ee4\u884c\u6b63\u5e38\u8fd0\u884c Node.js \u5e94\u7528\u7a0b\u5e8f\u7684\u547d\u4ee4\u3002</p> <p>\u5982\u679c\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u4e00\u4e9b\u73af\u5883\u53d8\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u4e8b\u5148\u8bbe\u7f6e\u5b83\u4eec:</p> <pre><code>NODE_ENV=production clinic doctor -- node server.js\n</code></pre> <p>\u4ece\u8fd9\u91cc\u5f00\u59cb\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7simulating load\u5f00\u59cb\u5145\u5206\u5229\u7528 Clinic.js\u3002</p>"},{"location":"documentation/cli/#_2","title":"\u67e5\u770b\u5de5\u5177\u4fe1\u606f","text":"<p>\u8981\u67e5\u770b\u4e0e Clinic.js \u5de5\u5177\u76f8\u5173\u7684\u6240\u6709\u5e2e\u52a9\u4fe1\u606f\uff0c\u5305\u62ec\u7248\u672c\u548c\u652f\u6301\u7684\u6807\u5fd7\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u8fd0\u884c:</p> <pre><code>clinic doctor --help\n</code></pre> <p>\u6216\u8005\uff0c\u5feb\u901f\u67e5\u770b\u6bcf\u4e2a Clinic.js \u5de5\u5177\u7684\u7248\u672c:</p> <pre><code>clinic flame --version\n</code></pre> <p>\u5982\u679c\u6211\u4eec\u53ea\u60f3\u67e5\u770b\u6709\u5173\u5df2\u5b89\u88c5\u7684 Clinic.js \u7248\u672c\u7684\u4fe1\u606f:</p> <pre><code>clinic --help\n</code></pre> <p>\u6216\u8005\uff0c\u67e5\u770b\u5df2\u5b89\u88c5\u7684 Clinic.js \u7248\u672c:</p> <pre><code>clinic --version\n</code></pre> <p>\u6709\u5173\u5b8c\u6574\u7684\u9009\u9879\u5217\u8868\uff0c\u8bf7\u53c2\u9605CLI \u53c2\u8003.</p>"},{"location":"documentation/cli/#_3","title":"\u4e0b\u4e00\u4e2a","text":"<p>\u6a21\u62df\u8d1f\u8f7d</p>"},{"location":"documentation/cli/01-simulating-load/","title":"\u6a21\u62df\u8d1f\u8f7d","text":"<p>\u5982\u679c\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u5904\u7406\u8bf7\u6c42\uff0c\u5728\u6d4b\u8bd5\u5b83\u7684\u6027\u80fd\u65f6\uff0c\u7b80\u5355\u5730\u5c06 Clinic.js \u6307\u5411\u5b83\u5e76\u4e0d\u4f1a\u7279\u522b\u6709\u6d1e\u5bdf\u529b\uff0c\u56e0\u4e3a\u9664\u975e\u6211\u4eec\u624b\u52a8\u4f7f\u7528\u6b63\u5728\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5426\u5219\u4e0d\u4f1a\u6709\u8d1f\u8f7d\u9700\u8981\u76d1\u63a7\u3002 \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u57fa\u51c6\u6d4b\u8bd5\u5de5\u5177(\u5982autocannon)\u6a21\u62df\u8d1f\u8f7d\u3002</p>"},{"location":"documentation/cli/01-simulating-load/#autocannon","title":"\u4f7f\u7528 autocannon","text":"<p>\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4f7f\u7528<code>--autocannon</code>\u6807\u5fd7\u5728\u6211\u4eec\u7684\u670d\u52a1\u5668\u4e0a\u6a21\u62df\u8d1f\u8f7d:</p> <pre><code>clinic doctor --autocannon [ 'localhost:$PORT' ] -- node server.js\n</code></pre> <p>Clinic.js \u4f1a\u81ea\u52a8\u5c06<code>$PORT</code>\u7684\u503c\u66ff\u6362\u4e3a\u670d\u52a1\u5668\u5728<code>server.js</code>\u4e2d\u4fa6\u542c\u7684\u5b9e\u9645\u7aef\u53e3\u3002 \u4e3a\u4e86\u4f7f\u4e8b\u60c5\u53d8\u5f97\u66f4\u7b80\u5355\uff0c\u5982\u679c\u6211\u4eec\u5df2\u7ecf\u5c06\u670d\u52a1\u5668\u8bbe\u7f6e\u4e3a\u4f7f\u7528<code>PORT</code>\u73af\u5883\u53d8\u91cf\u4f5c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u7aef\u53e3\uff0c\u6211\u4eec\u53ef\u4ee5\u4ea7\u751f\u4e0e\u4e0a\u8ff0\u547d\u4ee4\u76f8\u540c\u7684\u7ed3\u679c\uff0c\u5982\u4e0b\u6240\u793a:</p> <pre><code>clinic doctor --autocannon [ / ] -- node server.js\n</code></pre> <p>Here <code>/</code> is the same as <code>'localhost:$PORT'</code> inside the subargs: <code>[ ]</code>.</p> <p>\u5c0f\u5fc3\u786e\u4fdd\u5728\u5f00\u59cb\u65b9\u62ec\u53f7\u4e4b\u540e\u548c\u7ed3\u675f\u65b9\u62ec\u53f7\u4e4b\u524d\u6709\u7a7a\u683c\uff0c\u4ee5\u786e\u4fdd\u6b63\u786e\u89e3\u6790\u5b50\u53c2\u6570\u3002</p>"},{"location":"documentation/cli/01-simulating-load/#_2","title":"\u5e38\u89c1\u7684\u81ea\u52a8\u6807\u7b7e","text":"<p>\u6240\u6709\u53ef\u7528\u7684\u6807\u5fd7\u90fd\u53ef\u4ee5\u5728autocannon README\u4e2d\u770b\u5230\uff0c\u4f46\u4e0b\u9762\u8bb0\u5f55\u4e86\u4e00\u4e9b\u66f4\u5e38\u89c1\u7684\u6807\u5fd7\u3002</p>"},{"location":"documentation/cli/01-simulating-load/#_3","title":"\u8fde\u63a5\u6570","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cautocannon \u5c06\u5e76\u53d1\u8fde\u63a5\u6570\u8bbe\u7f6e\u4e3a 10\u3002 \u4f8b\u5982\uff0c\u8981\u5c06\u5176\u66f4\u6539\u4e3a 100\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06<code>-c</code>\u6216<code>\u2014\u2014connections</code>\u6807\u8bb0\u8bbe\u7f6e\u4e3a\u5b50\u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a:</p> <pre><code>clinic doctor --autocannon [ -c 100 / ] -- node server.js\n</code></pre>"},{"location":"documentation/cli/01-simulating-load/#http-methods","title":"HTTP methods","text":"<p>\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u5e26\u6709 POST \u7aef\u70b9\u7684 API\uff0c\u6211\u4eec\u60f3\u8981\u6d4b\u8bd5\u548c\u76d1\u63a7\uff0c\u8fd9\u5f88\u5bb9\u6613\u4f7f\u7528<code>-m</code>\u6216<code>\u2014\u2014method</code>\u6807\u5fd7\u4f5c\u4e3a\u5b50\u53c2\u6570\u6765\u5b8c\u6210:</p> <pre><code>clinic doctor --autocannon [ -m POST /api/item ] -- node server.js\n</code></pre> <p>\u5982\u679c\u6ca1\u6709\u5728\u8bf7\u6c42\u4f53\u4e2d\u53d1\u9001\u4e00\u4e9b\u5b9e\u9645\u6570\u636e\uff0c\u8fd9\u53ef\u80fd\u6ca1\u6709\u90a3\u4e48\u6709\u7528\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u4f7f\u7528<code>-b</code>\u6216<code>\u2014\u2014body</code>\u6807\u5fd7\u4f5c\u4e3a\u5b50\u53c2\u6570\u6dfb\u52a0\u4e00\u4e9b\u6570\u636e:</p> <pre><code>clinic doctor --autocannon [ -m POST /api/item -b '{\"my\": \"data\"}' ] -- node server.js\n</code></pre> <p>\u4f7f\u7528 JSON \u5b57\u7b26\u4e32\u6216\u4efb\u4f55\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u4f5c\u4e3a\u547d\u4ee4\u7684\u4e00\u90e8\u5206\uff0c\u8fd9\u53ef\u80fd\u6709\u70b9\u96be\u4ee5\u7ba1\u7406\uff0c\u7279\u522b\u662f\u5982\u679c\u6211\u4eec\u60f3\u8981\u4f7f\u7528\u4e0d\u540c\u7684\u6570\u636e\u96c6\u6216\u4e0d\u540c\u7684\u957f\u5ea6\u6d4b\u8bd5\u4e0d\u540c\u7684\u7aef\u70b9\u3002 autocannon \u652f\u6301\u4f7f\u7528\u672c\u5730\u6587\u4ef6\u4e3a\u8bf7\u6c42\u4f53\u63d0\u4f9b\u6570\u636e\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e00\u4e9b JSON \u6587\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528<code>-i</code>\u6807\u8bb0\u7b80\u5316\u8d1f\u8f7d\u6d4b\u8bd5\uff0c\u5982\u4e0b\u6240\u793a:</p> <pre><code>clinic doctor --autocannon [ -m POST /api/item -i my-data.json ] -- node server.js\n</code></pre> <p>\u5e72\u51c0!</p>"},{"location":"documentation/cli/01-simulating-load/#_4","title":"\u4f7f\u7528\u6211\u4eec\u81ea\u5df1\u7684\u547d\u4ee4","text":"<p>\u4e3a\u4e86\u83b7\u5f97\u66f4\u591a\u7684\u63a7\u5236\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528<code>\u2014\u2014on-port</code>\u6807\u5fd7\u5c06\u4efb\u4f55\u81ea\u5b9a\u4e49\u547d\u4ee4\u6307\u5411\u6211\u4eec\u7684\u670d\u52a1\u5668\u3002 \u5168\u5c40\u5b89\u88c5<code>autocannon</code>\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5e94\u7528\u7a0b\u5e8f\u4e0a\u6a21\u62df\u52a0\u8f7d\uff0c\u5982\u4e0b\u6240\u793a:</p> <pre><code>clinic doctor --on-port 'autocannon localhost:$PORT' -- node server.js\n</code></pre> <p>\u5c31\u50cf\u4f7f\u7528<code>\u2014\u2014autocannon</code>\u6807\u5fd7\u4e00\u6837\uff0cClinic.js \u5c06<code>$PORT</code>\u7684\u503c\u66ff\u6362\u4e3a\u670d\u52a1\u5668\u5728<code>server.js</code>\u4e2d\u4fa6\u542c\u7684\u5b9e\u9645\u7aef\u53e3\u3002</p> <p><code>\u2014\u2014on-port</code>\u6807\u5fd7\u7684\u4f18\u70b9\u662f\uff0c\u5b83\u4f7f\u6211\u4eec\u80fd\u591f\u7075\u6d3b\u5730\u4f7f\u7528\u6211\u4eec\u559c\u6b22\u7684\u4efb\u4f55\u547d\u4ee4\uff0c\u5305\u62ec\u5176\u4ed6\u57fa\u51c6\u6d4b\u8bd5\u5de5\u5177\uff0c\u5982wrk\u3002 \u4f8b\u5982\uff0c\u5728\u5168\u5c40\u5b89\u88c5\u4e86<code>wrk</code>\u7684\u60c5\u51b5\u4e0b\uff0c\u7c7b\u4f3c\u7684\u547d\u4ee4\u662f:</p> <pre><code>clinic doctor --on-port 'wrk http://localhost:$PORT' -- node server.js\n</code></pre> <p>\u7136\u540e\uff0cClinic.js \u7b80\u5355\u5730\u76d1\u89c6\u5e94\u7528\u7a0b\u5e8f\u5728\u6a21\u62df\u8d1f\u8f7d\u4e0b\u7684\u6027\u80fd\uff0c\u5e76\u5728\u8fd0\u884c<code>\u2014\u2014on-port</code>\u7684\u811a\u672c\u9000\u51fa\u65f6\u751f\u6210\u4e00\u4e2a\u793a\u4f8b\u3002 \u6211\u4eec\u4f7f\u7528\u54ea\u4e2a\u811a\u672c\u5b8c\u5168\u53d6\u51b3\u4e8e\u6211\u4eec\uff0c\u6211\u4eec\u53ef\u80fd\u5df2\u7ecf\u6709\u4e00\u4e9b\u590d\u6742\u7684\u6d4b\u8bd5\u547d\u4ee4\uff0c\u5982NPM \u811a\u672c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8c03\u7528\u5176\u4e2d\u4e00\u4e2a:</p> <pre><code>clinic doctor --on-port 'npm run load-test' -- node server.js\n</code></pre>"},{"location":"documentation/cli/01-simulating-load/#_5","title":"\u4e0b\u4e00\u4e2a","text":"<p>\u63a7\u5236\u8f93\u51fa</p>"},{"location":"documentation/cli/02-controlling-the-output/","title":"\u63a7\u5236\u8f93\u51fa","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4efb\u4f55 Clinic.js \u5de5\u5177\u547d\u4ee4\u90fd\u4f1a\u751f\u6210\u4e00\u4e2a\u7f16\u8bd1\u540e\u7684 HTML \u6587\u4ef6\u548c\u6570\u636e\u76ee\u5f55\uff0c\u6240\u4ee5\u4e0b\u9762\u7684\u547d\u4ee4:</p> <pre><code>clinic doctor -- node server.js\n</code></pre> <p>\u5c06\u751f\u6210\u5982\u4e0b\u7684\u6587\u4ef6\u7ed3\u6784:</p> <pre><code>.clinic/1234.clinic-doctor/1234.clinic-doctor-processstat\n.clinic/1234.clinic-doctor/1234.clinic-doctor-systeminfo\n.clinic/1234.clinic-doctor/1234.clinic-doctor-traceevent\n.clinic/1234.clinic-doctor.html\n</code></pre> <p>\u786e\u5207\u7684\u8f93\u51fa\u5c06\u5728Doctor, Flame \u548c Bubbleprof\u4e4b\u95f4\u53d8\u5316\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u5de5\u5177\u751f\u6210\u548c\u9700\u8981\u7565\u5fae\u4e0d\u540c\u7684\u6570\u636e\u6765\u521b\u5efa\u6837\u672c\u3002</p>"},{"location":"documentation/cli/02-controlling-the-output/#_2","title":"\u4ec5\u6536\u96c6\u6570\u636e","text":"<p>\u4e3a\u4e86\u9632\u6b62\u4efb\u4f55\u5de5\u5177\u751f\u6210 HTML\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u8fd9\u6837\u4f7f\u7528<code>\u2014\u2014collect-only</code>\u6807\u5fd7:</p> <pre><code>clinic doctor --collect-only -- node server.js\n</code></pre> <p>\u8fd9\u5c06\u751f\u6210\u4e00\u4e2a\u76ee\u5f55\uff0c\u4ece\u4e2d\u53ef\u4ee5\u751f\u6210 HTML \u914d\u7f6e\u6587\u4ef6\uff0c\u5176\u6587\u4ef6\u7ed3\u6784\u7c7b\u4f3c\u5982\u4e0b:</p> <pre><code>.clinic/1234.clinic-doctor/1234.clinic-doctor-processstat\n.clinic/1234.clinic-doctor/1234.clinic-doctor-systeminfo\n.clinic/1234.clinic-doctor/1234.clinic-doctor-traceevent\n</code></pre>"},{"location":"documentation/cli/02-controlling-the-output/#_3","title":"\u53ef\u89c6\u5316\u73b0\u6709\u6570\u636e","text":"<p>\u8981\u4ece Clinic.js \u6536\u96c6\u7684\u6570\u636e\u4e2d\u751f\u6210\u6216\u91cd\u65b0\u751f\u6210 HTML \u914d\u7f6e\u6587\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528<code>\u2014\u2014visualization -only</code>\u6807\u5fd7\uff0c\u5e76\u5c06\u73b0\u6709\u6570\u636e\u7684\u672c\u5730\u8def\u5f84\u4f20\u9012\u7ed9\u5b83\uff0c\u5982\u4e0b\u6240\u793a:</p> <pre><code>clinic doctor --visualize-only .clinic/1234.clinic-doctor\n</code></pre> <p>\u8fd9\u5c06\u5728\u5176\u6570\u636e\u76ee\u5f55<code>1234.clinic-doctor</code>\u7684\u540c\u4e00\u76ee\u5f55\u4e0b\u751f\u6210\u4ee5\u4e0b HTML \u6587\u4ef6:</p> <pre><code>.clinic/1234.clinic-doctor.html\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u7531\u4e8e\u6211\u4eec\u662f\u4ece\u73b0\u6709\u793a\u4f8b\u751f\u6210\u793a\u4f8b\u53ef\u89c6\u5316\uff0c\u56e0\u6b64\u5728\u5c06\u76ee\u5f55\u8def\u5f84\u4f20\u9012\u7ed9<code>\u2014\u2014visualize-only</code>\u6807\u5fd7\u65f6\uff0c\u4e0d\u9700\u8981\u5728<code>\u2014\u2014</code>\u6807\u5fd7\u5206\u9694\u7b26\u4e4b\u540e\u8c03\u7528\u4efb\u4f55\u670d\u52a1\u5668\u542f\u52a8\u811a\u672c\u3002</p>"},{"location":"documentation/cli/02-controlling-the-output/#_4","title":"\u66f4\u6539\u8f93\u51fa\u76ee\u7684\u5730","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u5de5\u5177\u793a\u4f8b\u6587\u4ef6\u90fd\u5c06\u5728\u8fd0\u884c\u547d\u4ee4\u7684\u76ee\u5f55(<code>.</code>)\u4e2d\u751f\u6210\u3002 \u8981\u6539\u53d8\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528<code>--dest</code>\u6807\u5fd7\u6307\u5411\u4e0d\u540c\u7684\u76ee\u7684\u5730\uff0c\u5982\u4e0b\u6240\u793a:</p> <pre><code>clinic doctor --dest ../some-other-dir -- node server.js\n</code></pre> <p>\u8fd9\u5728\u751f\u6210\u5927\u91cf\u7684 Clinic.js \u6587\u4ef6\u65f6\u975e\u5e38\u6709\u7528\uff0c\u4ee5\u786e\u4fdd\u5b83\u4eec\u4e0d\u5728\u9879\u76ee\u76ee\u5f55\u4e2d\uff0c\u5e76\u907f\u514d\u4efb\u4f55\u7248\u672c\u63a7\u5236\u9519\u8bef!</p>"},{"location":"documentation/cli/02-controlling-the-output/#_5","title":"\u4e0b\u4e00\u4e2a","text":"<p>\u7ba1\u7406\u6837\u54c1</p>"},{"location":"documentation/cli/03-managing-samples/","title":"\u7ba1\u7406\u6837\u54c1","text":"<p>\u5728\u4f7f\u7528 Clinic.js \u5de5\u5177\u6df1\u5165\u4e86\u89e3\u5e94\u7528\u7a0b\u5e8f\u7684\u6027\u80fd\u3001\u89e3\u51b3\u4e86\u4e00\u4e9b\u89c2\u5bdf\u5230\u7684\u74f6\u9888\u5e76\u91cd\u65b0\u6d4b\u8bd5\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5f97\u5230\u4e00\u4e2a\u76ee\u5f55\uff0c\u91cc\u9762\u88c5\u6ee1\u4e86\u7531 Clinic.js \u751f\u6210\u7684\u793a\u4f8b\u3002 \u8981\u5220\u9664\u6240\u6709\u8fd9\u4e9b\u6587\u4ef6\u548c\u76ee\u5f55\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u4e9b\u793a\u4f8b\u6240\u5728\u7684\u76ee\u5f55\u4e0b\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4:</p> <pre><code>clinic clean\n</code></pre> <p>\u5982\u679c\u6211\u4eec\u628a\u6587\u4ef6\u653e\u5728\u4e86\u5176\u4ed6\u5730\u65b9\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u6dfb\u52a0'\u2014\u2014path '\u6807\u5fd7\u6765\u6307\u5411\u90a3\u4e2a\u76ee\u5f55:</p> <pre><code>clinic clean --path ../some-other-dir\n</code></pre> <p>\u8fd0\u884c\u6b64\u547d\u4ee4\u540e\uff0c\u76ee\u5f55\u4e2d\u5e94\u8be5\u6ca1\u6709\u66f4\u591a\u7684\u793a\u4f8b\u3002 \u5982\u679c\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86\u5bf9\u5e94\u7528\u7a0b\u5e8f\u7684\u5206\u6790\uff0c\u5e76\u4e14\u9700\u8981\u63a8\u9001\u4ee3\u7801\u66f4\u6539\uff0c\u4f46\u53c8\u4e0d\u5e0c\u671b\u5728\u5e94\u7528\u7a0b\u5e8f\u7684 repo \u4e2d\u770b\u5230 Clinic.js \u793a\u4f8b\uff0c\u90a3\u4e48\u8fd9\u4e00\u6b65\u5c31\u975e\u5e38\u65b9\u4fbf\u4e86\u3002</p>"},{"location":"documentation/cli/03-managing-samples/#git","title":"\u5ffd\u7565 git \u4e2d\u7684\u6587\u4ef6","text":"<p>\u4f7f\u7528' git '\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u6761\u76ee\u6dfb\u52a0\u5230\u5e94\u7528\u7a0b\u5e8f\u7684' .gitignore '\u6587\u4ef6\u4e2d\uff0c\u4ee5\u786e\u4fdd\u5c06\u6765\u5ffd\u7565\u4efb\u4f55\u793a\u4f8b:</p> <pre><code>.clinic\n</code></pre> <p>\u6216\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5168\u5c40 gitignore\uff0c\u8fd9\u6837\u9879\u76ee\u5c31\u4e0d\u5fc5\u4e3a\u4e86\u9002\u5e94 Clinic.js \u800c\u8fdb\u884c\u66f4\u6539\u3002 \u8981\u4e3a git \u914d\u7f6e\u4e00\u4e2a\u5168\u5c40\u5ffd\u7565\u6587\u4ef6\uff0c\u5e76\u5728\u5176\u4e2d\u6dfb\u52a0' .clinic '\uff0c\u6253\u5f00\u547d\u4ee4\u884c\u5e76\u6267\u884c:</p> <pre><code>git config --global core.excludesfile ~/.gitignore_global\necho '.clinic' &gt;&gt; ~/.gitignore_global\n</code></pre>"},{"location":"documentation/cli/03-managing-samples/#_2","title":"\u4e0b\u4e00\u4e2a","text":"<p>\u4f7f\u7528CLI \u53c2\u8003\u5feb\u901f\u4e86\u89e3 Clinic.js \u7684\u6765\u9f99\u53bb\u8109.</p>"},{"location":"documentation/cli/04-reference/","title":"\u547d\u4ee4\u53c2\u8003","text":"<p>\u672c\u9875\u5305\u542b\u4e86\u6240\u6709 Clinic.js \u652f\u6301\u7684\u547d\u4ee4\u548c\u6807\u5fd7\u7684\u53c2\u8003\uff0c\u4ee5\u5e2e\u52a9\u6211\u4eec\u6700\u5927\u9650\u5ea6\u5730\u5229\u7528 Clinic.js\u3002</p>"},{"location":"documentation/cli/04-reference/#_2","title":"\u547d\u4ee4","text":""},{"location":"documentation/cli/04-reference/#clinic-doctor","title":"<code>clinic doctor</code>","text":"<p>\u7528'\u2014\u2014'\u5206\u9694\u7b26\u5206\u9694\uff0c\u8be5\u547d\u4ee4\u4e3a Node.js \u5e94\u7528\u7a0b\u5e8f\u83b7\u53d6\u4e00\u4e2a\u542f\u52a8\u811a\u672c\uff0c\u5e76\u751f\u6210Doctor\u6837\u672c\u6765\u8bca\u65ad\u6027\u80fd\u95ee\u9898\u3002</p> <p>Example:</p> <pre><code>clinic doctor -- node server.js\n</code></pre> <p>\u6709\u5173\u66f4\u591a\u6280\u672f\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95eeDoctor docs.</p>"},{"location":"documentation/cli/04-reference/#clinic-flame","title":"<code>clinic flame</code>","text":"<p>\u7528'\u2014\u2014'\u5206\u9694\u7b26\u5206\u9694\uff0c\u8be5\u547d\u4ee4\u4e3a Node.js \u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e00\u4e2a\u542f\u52a8\u811a\u672c\uff0c\u5e76\u751f\u6210Flame\u793a\u4f8b\uff0c\u4ee5\u53d1\u73b0\u5e26\u6709\u706b\u7130\u56fe\u7684\u4ee3\u7801\u4e2d\u7684\u74f6\u9888\u548c\u70ed\u51fd\u6570\u3002</p> <p>Example:</p> <pre><code>clinic flame -- node server.js\n</code></pre> <p>\u6709\u5173\u66f4\u591a\u6280\u672f\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95eeFlame \u6587\u6863.</p>"},{"location":"documentation/cli/04-reference/#clinic-bubbleprof","title":"<code>clinic bubbleprof</code>","text":"<p>\u8fd9\u4e2a\u547d\u4ee4\u7528'\u2014\u2014'\u5206\u9694\u7b26\u5206\u9694\uff0c\u5b83\u9700\u8981\u4e00\u4e2a Node.js \u5e94\u7528\u7a0b\u5e8f\u7684\u542f\u52a8\u811a\u672c\uff0c\u5e76\u751f\u6210Bubbleprof\u6837\u672c\u6765\u89c2\u5bdf\u548c\u6620\u5c04\u5f02\u6b65\u64cd\u4f5c\u3002</p> <p>Example:</p> <pre><code>clinic bubbleprof -- node server.js\n</code></pre> <p>\u6709\u5173\u66f4\u591a\u6280\u672f\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95eeBubbleprof \u6587\u6863.</p>"},{"location":"documentation/cli/04-reference/#_3","title":"\u65d7\u5e1c","text":"<p>\u4e0b\u9762\u662f\u4e00\u4e2a\u6709\u7528\u7684\u6807\u5fd7(\u9009\u9879)\u7684\u53c2\u8003\u5217\u8868\uff0c\u5f53\u4f7f\u7528 Doctor\u3001Flame \u548c Bubbleprof \u751f\u6210\u6837\u672c\u65f6\uff0c\u8fd9\u4e9b\u6807\u5fd7(\u9009\u9879)\u53ef\u4ee5\u4f20\u9012\u7ed9 Clinic.js\u3002</p>"},{"location":"documentation/cli/04-reference/#-on-port","title":"<code>--on-port</code>","text":"<p>\u63a5\u53d7\u4e00\u4e2a\u547d\u4ee4\u5b57\u7b26\u4e32\uff0c\u5f53\u88ab\u5206\u6790\u7684\u5e94\u7528\u7a0b\u5e8f\u5f00\u59cb\u76d1\u542c\u7aef\u53e3\u65f6\u6267\u884c\u3002</p> <p>Example:</p> <pre><code>clinic doctor --on-port 'my-script localhost:$PORT' -- node server.js\n</code></pre> <p>\u5173\u4e8e\u8fd9\u4e2a\u7528\u4f8b\u6807\u5fd7\u7684\u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u5728\u6a21\u62df\u52a0\u8f7d\u6587\u6863\u4e2d\u627e\u5230\u3002</p>"},{"location":"documentation/cli/04-reference/#-autocannon","title":"<code>--autocannon</code>","text":"<p>\u5728'[]'\u4e2d\u83b7\u53d6\u5b50\u53c2\u6570\uff0c\u5e76\u5c06\u5176\u4f20\u9012\u7ed9 autocannon\u3002</p> <p>Example:</p> <pre><code>clinic doctor --autocannon [ 'localhost:$PORT' ] -- node server.js\n</code></pre> <p>\u5173\u4e8e\u8fd9\u4e2a\u7528\u4f8b\u6807\u5fd7\u7684\u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u5728\u6a21\u62df\u52a0\u8f7d\u6587\u6863\u4e2d\u627e\u5230\u3002</p>"},{"location":"documentation/cli/04-reference/#-collect-only","title":"<code>--collect-only</code>","text":"<p>\u5982\u679c\u4f7f\u7528\u7684\u8bdd\uff0cClinic.js \u5de5\u5177\u53ea\u4f1a\u751f\u6210\u4e00\u4e2a\u6837\u672c\u4fe1\u606f\u76ee\u5f55\uff0c\u6ca1\u6709\u53ef\u89c6\u5316\u7684 HTML\u3002</p> <p>Example:</p> <pre><code>clinic doctor --collect-only -- node server.js\n</code></pre> <p>\u5173\u4e8e\u8fd9\u4e2a\u6807\u5fd7\u7684\u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u5728\u63a7\u5236\u8f93\u51fa\u6587\u6863\u4e2d\u627e\u5230\u3002</p>"},{"location":"documentation/cli/04-reference/#-visualize-only","title":"<code>--visualize-only</code>","text":"<p>\u83b7\u53d6\u5148\u524d\u6536\u96c6\u7684 Clinic \u5de5\u5177\u793a\u4f8b\u6570\u636e\u76ee\u5f55\u7684\u8def\u5f84\uff0c\u5e76\u751f\u6210\u53ef\u89c6\u5316 HTML\uff0c\u4ee5\u4fbf\u5728\u6d4f\u89c8\u5668\u4e2d\u67e5\u770b\u8f93\u51fa\u3002</p> <p>Example:</p> <pre><code>clinic doctor --visualize-only .clinic/1234.clinic-doctor\n</code></pre> <p>\u5173\u4e8e\u8fd9\u4e2a\u6807\u5fd7\u7684\u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u5728\u63a7\u5236\u8f93\u51fa\u6587\u6863\u4e2d\u627e\u5230\u3002</p>"},{"location":"documentation/cli/04-reference/#-dest","title":"<code>--dest</code>","text":"<p>\u83b7\u53d6\u672c\u5730\u76ee\u5f55\u7684\u8def\u5f84\uff0c\u751f\u6210\u7684\u793a\u4f8b\u8f93\u51fa\u5c06\u4fdd\u5b58\u5230\u8be5\u76ee\u5f55\u3002</p> <p>Example:</p> <pre><code>clinic doctor --dest ../some-other-dir -- node server.js\n</code></pre> <p>\u5173\u4e8e\u8fd9\u4e2a\u6807\u5fd7\u7684\u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u5728\u63a7\u5236\u8f93\u51fa\u6587\u6863\u4e2d\u627e\u5230\u3002</p> <p>Default: <code>.</code> (current directory)</p>"},{"location":"documentation/cli/04-reference/#-sample-interval","title":"<code>--sample-interval</code>","text":"<p>\u83b7\u53d6\u4e00\u4e2a\u6570\u5b57\uff0c\u5e76\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u6539\u53d8 Doctor \u5bf9\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u91c7\u6837\u7684\u901f\u7387\u3002</p> <p>Example:</p> <pre><code>clinic doctor --sample-interval 100 -- node server.js\n</code></pre> <p>Default: <code>10</code></p> <p>\u6b64\u6807\u5fd7\u9002\u7528\u4e8e<code>clinic doctor</code>\u547d\u4ee4\u3002</p>"},{"location":"documentation/cli/04-reference/#-version","title":"<code>--version</code>","text":"<p>\u5982\u679c\u4f7f\u7528\uff0c\u5c06\u8f93\u51fa\u5f53\u524d\u5b89\u88c5\u7684 Clinic.js \u7248\u672c\u6216\u7279\u5b9a\u7684 Clinic.js \u5de5\u5177\u3002</p> <p>\u4f8b\u5b50:</p> <pre><code>clinic --version\n# or\nclinic -v\n\nclinic doctor --version\n# or\nclinic doctor -v\n</code></pre>"},{"location":"documentation/cli/04-reference/#-help","title":"<code>--help</code>","text":"<p>\u5982\u679c\u4f7f\u7528\uff0c\u5c06\u8f93\u51fa\u5e26\u6709\u793a\u4f8b\u547d\u4ee4\u7684\u5e2e\u52a9\u6587\u672c\u548c\u652f\u6301\u7684 Clinic.js \u6216\u7279\u5b9a\u7684 Clinic.js \u5de5\u5177\u7684\u6807\u5fd7\u3002</p> <p>\u4f8b\u5b50:</p> <pre><code>clinic --help\n# or\nclinic -h\n\nclinic doctor --help\n# or\nclinic doctor -h\n</code></pre>"},{"location":"documentation/doctor/","title":"\u533b\u751f","text":"<p>\u4f4eCPU\u4f7f\u7528\u7387\u3001\u963b\u585e\u5783\u573e\u6536\u96c6\u3001\u9891\u7e41\u7684\u4e8b\u4ef6\u5faa\u73af\u5ef6\u8fdf\u6216\u6d3b\u52a8\u53e5\u67c4\u6570\u91cf\u6df7\u4e71\u7b49\u75c7\u72b6\u53ef\u80fd\u8868\u660e\u5b58\u5728\u8bb8\u591a\u6f5c\u5728\u95ee\u9898\u3002 \u533b\u751f\u6839\u636e\u8fd9\u4e9b\u75c7\u72b6\u7ed9\u51fa\u5efa\u8bae\uff0c\u5e2e\u52a9\u7f29\u5c0f\u53ef\u80fd\u6027\u3002 I/O\u95ee\u9898\u3001\u672a\u4f18\u5316\u7684\u5783\u573e\u6536\u96c6\u548c\u963b\u585e\u7684\u4e8b\u4ef6\u5faa\u73af\u7b49\u4f8b\u5b50\u975e\u5e38\u5e38\u89c1\u3002 \u533b\u751f\u4f1a\u5e2e\u4f60\u89e3\u51b3\u6240\u6709\u8fd9\u4e9b\u95ee\u9898\u3002</p> <ol> <li>\u914d\u7f6e</li> <li>\u51c6\u5907</li> <li>\u9996\u5148\u5206\u6790</li> <li>\u9605\u8bfb\u6570\u636e\u56fe\u8868</li> <li>\u4fee\u590d\u4e8b\u4ef6\u5faa\u73af\u95ee\u9898</li> <li>\u4fee\u590dI/O\u95ee\u9898</li> </ol>"},{"location":"documentation/doctor/01-setup/","title":"\u8bbe\u7f6e","text":"<p>Doctor \u662f Clinic.js \u5de5\u5177\u5957\u88c5\u7684\u4e00\u90e8\u5206\u3002\u8981\u5b89\u88c5 Doctor\uff0c\u53ea\u9700\u50cf\u8fd9\u6837\u5b89\u88c5 Clinic.js:</p> <pre><code>npm install -g clinic\n</code></pre> <p>\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c\u5e26\u6709 <code>--help</code> \u6807\u5fd7\u7684 <code>clinic doctor</code> \u547d\u4ee4\u6765\u68c0\u67e5 Doctor \u662f\u5426\u5df2\u7ecf\u5b89\u88c5\u3002</p> <pre><code>clinic doctor --help\n</code></pre> <p>\u5b83\u5e94\u8be5\u8f93\u51fa\u7c7b\u4f3c\u4e0b\u9762\u7684\u5185\u5bb9:</p> <pre><code>Clinic.js Doctor - v3.12.0\n\nclinic doctor is the first step in profiling your application.\nIt will show you what kind of problem you are having and recommend the path\nforward.\n\nTo run clinic doctor\n\n  clinic doctor -- node server.js\n\nIf profiling on a server, it can be useful to only do data collection:\n\n  clinic doctor --collect-only -- node server.js\n\nYou can then transfer the data and visualize it locally:\n\n  clinic doctor --visualize-only PID.clinic-doctor-sample\n\nFlags\n-h | --help                Display Help\n-v | --version             Display Version\n--collect-only             Do not process data on termination\n--visualize-only datapath  Build or rebuild visualization from data\n--sample-interval interval Sample interval in milliseconds\n--on-port                  Run a script when the server starts listening on a port.\n--dest                     Destination for the collect data (default .).\n</code></pre>"},{"location":"documentation/doctor/01-setup/#_2","title":"\u4e0b\u4e00\u4e2a","text":"<p>\u51c6\u5907</p>"},{"location":"documentation/doctor/02-getting-ready/","title":"\u51c6\u5907","text":"<p>\u6211\u4eec\u9700\u8981\u4e00\u4e9b\u4f7f\u7528 Doctor \u7684\u793a\u4f8b\u5e94\u7528\u7a0b\u5e8f\u3002 Repo <code>node-clinic-doctor-examples</code>\u5305\u542b\u51e0\u4e2a\u4f9b\u6211\u4eec\u63a2\u7d22\u3002 \u8ba9\u6211\u4eec\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u6765\u514b\u9686\u5b58\u50a8\u5e93\u5e76\u5b89\u88c5\u5b83\u7684\u4f9d\u8d56\u9879:</p> <pre><code>git clone git@github.com:nearform/node-clinic-doctor-examples.git\ncd node-clinic-doctor-examples\nnpm install\n</code></pre> <p>README\u5305\u542b\u4e00\u4e9b\u4e00\u822c\u4fe1\u606f\uff0c\u53ef\u4ee5\u5728\u5b89\u88c5\u5b8c\u6210\u65f6\u8bfb\u53d6\u3002</p>"},{"location":"documentation/doctor/02-getting-ready/#_2","title":"\u4e0b\u4e00\u4e2a","text":"<p>\u5148\u5206\u6790</p>"},{"location":"documentation/doctor/03-first-analysis/","title":"\u9996\u5148\u5206\u6790","text":"<p>\u73b0\u5728\u6211\u4eec\u51c6\u5907\u5206\u6790\u5176\u4e2d\u4e00\u4e2a\u793a\u4f8b\u5e94\u7528\u7a0b\u5e8f\u3002 \u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 <code>slow-event-loop</code>\u3002 \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u901a\u8fc7\u5728<code>examples\u201d\u76ee\u5f55\u4e2d\u8fd0\u884c</code>node slow-event-loop`\u6765\u786e\u8ba4\u5b83\u5df2\u7ecf\u51c6\u5907\u597d\u5e76\u6b63\u5728\u5de5\u4f5c\u3002 \u4e00\u65e6\u8fdb\u7a0b\u4f3c\u4e4e\u6b63\u5728\u8fd0\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95eehttp://localhost:3000/\u8fdb\u884c\u68c0\u67e5\u3002</p> <p>\u6211\u4eec\u5e94\u8be5\u5728\u6d4f\u89c8\u5668\u4e2d\u770b\u5230\u4e00\u4e9b\u57fa\u672c\u7684\u8f93\u51fa\uff0c\u6bd4\u5982<code>{}</code>\u3002 \u5728\u547d\u4ee4\u884c\u4e2d\u6309<code>Ctrl-C</code>\u5173\u95ed<code>slow-event-loop</code>\u670d\u52a1\u5668\u3002</p> <p>\u8fd9\u662f\u4e00\u4e2a\u670d\u52a1\u5668\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u52a0\u8f7d\u3002 \u5206\u6790\u4e00\u4e2a\u53ea\u5904\u7406\u4e00\u4e2a\u8bf7\u6c42\u7684\u670d\u52a1\u5668\u5e76\u4e0d\u80fd\u7ed9\u6211\u4eec\u63d0\u4f9b\u5f88\u591a\u6570\u636e\uff0c\u4e5f\u4e0d\u80fd\u8bf4\u660e\u5b83\u5728\u5904\u7406\u591a\u4e2a\u8bf7\u6c42\u65f6\u662f\u5982\u4f55\u6267\u884c\u7684\u3002 \u6211\u4eec\u63a8\u8350\u4f7f\u7528\u57fa\u51c6\u6d4b\u8bd5\u5de5\u5177Autocannon\u3002</p> <p>\u5f53\u6211\u4eec\u8c03\u7528 <code>clinic</code> \u53ef\u6267\u884c\u6587\u4ef6\u65f6\uff0c\u6211\u4eec\u5c06\u5728\u793a\u4f8b\u5e94\u7528\u7a0b\u5e8f\u76ee\u5f55\u4e2d\u6267\u884c <code>autocannon</code>\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5168\u5c40\u5b89\u88c5\u5b83:</p> <pre><code>npm install -g autocannon\n</code></pre> <p>\u4e3a\u4e86\u5bf9\u670d\u52a1\u5668\u8fdb\u884c\u8d1f\u8f7d\u6d4b\u8bd5\uff0c\u6211\u4eec\u5e0c\u671b\u4f7f\u7528 Doctor \u8fd0\u884c\u5b83\uff0c\u5e76\u5728\u5b83\u5f00\u59cb\u4fa6\u542c\u7aef\u53e3\u65f6\u5c06<code>autocannon</code>\u6307\u5411\u5b83\u3002 \u4e00\u65e6\u670d\u52a1\u5668\u51c6\u5907\u597d\u5904\u7406\u8bf7\u6c42\u5e76\u4e14 Doctor \u51c6\u5907\u597d\u6536\u96c6\u6570\u636e\uff0c\u670d\u52a1\u5668\u5c31\u4f1a\u88ab\u8bf7\u6c42\u8f70\u70b8\u3002</p> <p>\u8ba9\u6211\u4eec\u7528\u8fd9\u4e2a\u547d\u4ee4\u6765\u5b8c\u6210\u6240\u6709\u8fd9\u4e9b\uff0c\u5b83\u4f1a\u81ea\u52a8\u5206\u914d\u6b63\u786e\u7684\u7aef\u53e3:</p> <pre><code>clinic doctor --on-port 'autocannon localhost:$PORT' -- node slow-event-loop\n</code></pre> <p>\u8ba9\u6211\u4eec\u5206\u89e3\u8fd9\u4e2a\u547d\u4ee4:</p> <ul> <li><code>clinic doctor</code>\u90e8\u5206\u8c03\u7528\u533b\u751f\u547d\u4ee4\u5de5\u5177\u3002</li> <li><code>--on-port</code>\u6807\u5fd7\u5c06\u5728\u670d\u52a1\u5668\u5f00\u59cb\u4fa6\u542c\u7aef\u53e3\u65f6\u7acb\u5373\u6267\u884c\u63d0\u4f9b\u7684\u811a\u672c\u3002</li> <li>\u8be5\u811a\u672c\u4e2d\u7684<code>$PORT</code>\u53d8\u91cf\u88ab\u8bbe\u7f6e\u4e3a\u670d\u52a1\u5668\u5f00\u59cb\u4fa6\u542c\u7684\u7b2c\u4e00\u4e2a\u7aef\u53e3\u3002</li> <li>\u53cc\u7834\u6298\u53f7(<code>--</code>)\u4e4b\u540e\u7684\u6240\u6709\u5185\u5bb9\u90fd\u662f\u542f\u52a8\u6211\u4eec\u60f3\u8981\u5206\u6790\u7684\u670d\u52a1\u5668\u7684\u547d\u4ee4\uff0c\u5728\u672c\u4f8b\u4e2d\u662f<code>node slow-event-loop</code>\u3002</li> </ul> <p>\u8fd9\u4e2a\u547d\u4ee4\u8fd0\u884c\u4e09\u4e2a\u53ef\u6267\u884c\u6587\u4ef6:<code>clinic doctor</code>\u7236\u53ef\u6267\u884c\u6587\u4ef6\uff0c<code>autocannon</code>\u53ef\u6267\u884c\u6587\u4ef6\u5728<code>\u2014\u2014on-port</code>\u548c<code>node</code>\u53ef\u6267\u884c\u6587\u4ef6\u3002</p> <p>\u5728\u8fd0\u884c\u8be5\u547d\u4ee4\u540e\uff0c<code>slow-event-loop</code>\u670d\u52a1\u5668\u5c06\u88ab\u6765\u81ea 10 \u4e2a\u5e76\u53d1\u8fde\u63a5\u7684\u8bf7\u6c42\u51fb\u4e2d 10 \u79d2(\u6309\u7167<code>autocannon</code>\u7684\u9ed8\u8ba4\u503c)\u3002 \u7136\u540e\u5c06\u7ed3\u679c\u7f16\u8bd1\u6210\u4e00\u4e2a HTML \u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u5e94\u8be5\u5728\u6d4f\u89c8\u5668\u4e2d\u81ea\u52a8\u6253\u5f00\u3002</p> <p>\u751f\u6210\u7684 HTML \u5e94\u8be5\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u5185\u5bb9:</p> <p></p>"},{"location":"documentation/doctor/03-first-analysis/#_2","title":"\u4e0b\u4e00\u4e2a","text":"<p>\u9605\u8bfb\u6570\u636e\u56fe\u8868</p>"},{"location":"documentation/doctor/04-reading-a-profile/","title":"\u9605\u8bfb\u6570\u636e\u56fe\u8868","text":"<p>Clinic.js \u7684 Doctor \u6570\u636e\u56fe\u8868\u6587\u4ef6\u6709\u4e09\u4e2a\u4e3b\u8981\u90e8\u5206:</p> <ul> <li>\u8b66\u62a5\u680f: \u6307\u51fa\u4e86\u6211\u4eec\u7684\u4e3b\u8981\u95ee\u9898\uff0c\u5982\u679c\u6709\u7684\u8bdd\u3002 \u8fd8\u5305\u542b View Controls.</li> <li>\u56fe\u8868: \u628a\u533b\u751f\u5f97\u51fa\u7ed3\u8bba\u7684\u6570\u636e\u753b\u51fa\u6765</li> <li>\u63a8\u8350\u9762\u677f: \u5bf9\u95ee\u9898\u7684\u8be6\u7ec6\u89e3\u91ca\u548c\u540e\u7eed\u6b65\u9aa4</li> </ul>"},{"location":"documentation/doctor/04-reading-a-profile/#_2","title":"\u8b66\u62a5\u680f","text":"<p>\u70b9\u51fb\u8fd9\u4e2a\u6253\u5f00\u5b83\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u4e3b\u8981\u95ee\u9898\u7684\u4e00\u884c\u6458\u8981(\u5982\u679c\u6709\u7684\u8bdd)\u3002 \u5c06\u9f20\u6807\u60ac\u505c\u5728\u8fd9\u4e2a\u6458\u8981\u4e0a\uff0c\u5b83\u4f1a\u5728\u533b\u751f\u8ba4\u4e3a\u4e0e\u7406\u89e3\u95ee\u9898\u6700\u76f8\u5173\u7684\u7279\u5b9a\u56fe\u8868\u7684\u6807\u9898\u4e0b\u5212\u4e0b\u5212\u7ebf\u3002</p> <p>\u533b\u751f\u901a\u5e38\u4e0d\u4f1a\u8bc6\u522b\u591a\u4e2a\u95ee\u9898\uff0c\u6240\u4ee5\u8fd9\u91cc\u901a\u5e38\u4f1a\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u6216\u8005\u6ca1\u6709\u53d1\u73b0\u95ee\u9898\u7684\u6ce8\u91ca\u3002 \u8fd9\u662f\u56e0\u4e3a\u4e00\u4e2a\u6027\u80fd\u95ee\u9898\u53ef\u80fd\u4f1a\u7834\u574f\u8bca\u65ad\u53e6\u4e00\u4e2a\u95ee\u9898\u6240\u9700\u7684\u6570\u636e\u3002 \u4f8b\u5982\uff0c\u5982\u679c Doctor \u786e\u5b9a\u5b58\u5728\u4e8b\u4ef6\u5faa\u73af\u95ee\u9898\uff0c\u5b83\u53ef\u80fd\u65e0\u6cd5\u83b7\u53d6\u8db3\u591f\u7684\u8bfb\u6570\u6765\u5224\u65ad\u662f\u5426\u5b58\u5728 I/O \u95ee\u9898\u3002</p> <p>\u7b2c\u4e00\u6b21\u4f7f\u7528\u7684\u7528\u6237\u5c06\u4e3b\u8981\u4f7f\u7528\u8b66\u544a\u680f\u6765\u67e5\u770b\u662f\u5426\u5b58\u5728\u68c0\u6d4b\u5230\u7684\u95ee\u9898\uff0c\u7136\u540e\u76f4\u63a5\u8fdb\u5165\u5efa\u8bae\u9762\u677f\u4e2d\u7684\u63cf\u8ff0\u4ee5\u66f4\u597d\u5730\u7406\u89e3\u5b83\u3002 \u66f4\u6709\u7ecf\u9a8c\u7684\u7528\u6237\u4f1a\u8bc6\u522b\u5230\u5e38\u89c1\u7684\u68c0\u6d4b\u5230\u7684\u95ee\u9898\uff0c\u7136\u540e\u7814\u7a76\u9002\u5f53\u7684\u56fe\u8868\uff0c\u4ee5\u5bfb\u627e\u6709\u5173\u8fd9\u4e2a\u7279\u5b9a\u95ee\u9898\u793a\u4f8b\u5982\u4f55\u8868\u73b0\u81ea\u8eab\u7684\u7ebf\u7d22\u3002</p> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0cDoctor \u544a\u8bc9\u6211\u4eec\u5b83\u68c0\u6d4b\u5230\u4e00\u4e2a\u95ee\u9898\uff0c\u8fd9\u4e2a\u95ee\u9898\u662f\u201c\u4e00\u4e2a\u6f5c\u5728\u7684\u4e8b\u4ef6\u5faa\u73af\u95ee\u9898\u201d\uff0c\u53ef\u4ee5\u5728\u4e8b\u4ef6\u5faa\u73af\u5ef6\u8fdf\u56fe\u4e2d\u770b\u5230:</p> <p></p>"},{"location":"documentation/doctor/04-reading-a-profile/#_3","title":"\u89c6\u56fe\u63a7\u5236\u5668","text":"<p>\u5728\u8b66\u62a5\u680f\u7684\u53f3\u8fb9\u6709\u4e24\u4e2a\u6309\u94ae\u53ef\u4ee5\u6539\u53d8\u89c6\u56fe:</p> <ul> <li> Grid   View / List View.   \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cDoctor \u5728\u4e00\u4e2a\u7f51\u683c\u4e2d\u663e\u793a\u6240\u6709\u56fe\u5f62\uff0c\u8fd9\u6837\u5b83\u4eec\u5c31\u53ef\u4ee5\u540c\u65f6\u5728\u5c4f\u5e55\u4e0a\u770b\u5230\u3002   \u6b64\u6309\u94ae\u5207\u6362\u5230\u5217\u8868\u89c6\u56fe\uff0c\u5176\u4e2d\u6bcf\u4e2a\u56fe\u5f62\u5360\u7528\u5c4f\u5e55\u7684\u6574\u4e2a\u5bbd\u5ea6\u3002   \u8fd9\u5bf9\u4e8e\u60f3\u8981\u7814\u7a76\u56fe\u5f62\u7ec6\u8282\u7684\u9ad8\u7ea7\u7528\u6237\u975e\u5e38\u6709\u7528\u3002   \u5728\u5217\u8868\u89c6\u56fe\u4e2d\uff0c\u5355\u51fb\u8b66\u544a\u680f\u4e2d\u63cf\u8ff0\u7684\u95ee\u9898\uff0c\u5c06\u9875\u9762\u5411\u4e0b\u6eda\u52a8\u5230\u6700\u76f8\u5173\u7684\u56fe\u5f62(\u5982\u679c\u5b83\u4e0d\u5728\u89c6\u56fe\u4e2d)\u3002</li> </ul> <p></p> <ul> <li> Light   Theme / Dark Theme.   \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cDoctor \u4f7f\u7528\u6df1\u8272\u80cc\u666f\u548c\u6d45\u8272\u6587\u672c\u7684\u4e3b\u9898\u3002   \u8fd9\u6709\u5229\u4e8e\u51cf\u5c11\u7729\u5149\uff0c\u4f46\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b(\u6216\u67d0\u4e9b\u4e2a\u4eba\u559c\u597d)\uff0c\u4e00\u4e2a\u4e3b\u9898\u4e0e   \u6d45\u8272\u80cc\u666f\u548c\u6df1\u8272\u6587\u5b57\u6548\u679c\u66f4\u597d\u3002   \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u80fd\u60f3\u8981\u5207\u6362\u5230\u5149\u4e3b\u9898\uff0c\u5f53\u622a\u56fe\u5c06\u6253\u5370\u5728\u7eb8\u4e0a\uff0c\u6216\u5f53\u6295\u5f71\u533b\u751f\u7684\u4e2a\u4eba\u8d44\u6599\u5728\u4e00\u4e2a\u5149\u7ebf\u5145\u8db3\u7684\u623f\u95f4\uff0c\u9ed1\u6697\u7684\u4e3b\u9898\u5f88\u96be\u9605\u8bfb\u3002</li> </ul> <p></p>"},{"location":"documentation/doctor/04-reading-a-profile/#_4","title":"\u56fe\u8868","text":"<p>\u8fd9\u4e9b\u56fe\u7ed8\u5236\u4e86\u4ece\u6982\u8981\u6587\u4ef6\u7684\u5f00\u59cb\u65f6\u95f4(x \u8f74\u7684\u5de6\u7aef)\u5230\u7ed3\u675f\u65f6\u95f4(x \u8f74\u7684\u53f3\u7aef)\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u533b\u751f\u5206\u6790\u4e2d\u4f7f\u7528\u7684\u5404\u79cd\u53d8\u91cf\u3002</p> <p>\u6240\u6709\u56fe\u5f62\u90fd\u4f7f\u7528\u76f8\u540c\u7684 x \u8f74\u3002\u6211\u4eec\u5c06\u770b\u5230\uff0c\u5c06\u9f20\u6807\u60ac\u505c\u5728\u5176\u4e2d\u4e00\u4e2a\u56fe\u5f62\u4e0a\uff0c\u4f1a\u663e\u793a\u6240\u6709\u5176\u4ed6\u56fe\u5f62\u5728\u540c\u4e00\u65f6\u95f4\u70b9\u7684\u503c\u3002</p> <p></p>"},{"location":"documentation/doctor/04-reading-a-profile/#cpu-usage","title":"CPU Usage %","text":"<p>\u8be5\u56fe\u663e\u793a\u4e86\u5728\u4efb\u610f\u4e00\u4e2a\u65f6\u95f4\u70b9\uff0cNode.js \u8fdb\u7a0b\u6b63\u5728\u4f7f\u7528\u7684\u673a\u5668\u53ef\u7528 CPU \u5bb9\u91cf\u7684\u767e\u5206\u6bd4\u3002</p> <p></p> <p>CPU Usage can exceed 100% \u5982\u679c\u673a\u5668\u6709\u591a\u4e2a\u5185\u6838\u3002\u5728\u6b64\u56fe\u4e2d\uff0c100%\u8868\u793a\u5355\u6838\u5bb9\u91cf\u7684 100%\u3002</p> <p>\u6b64\u56fe\u4e2d\u7684\u5cf0\u503c\u8868\u793a\u9ad8 CPU \u6d3b\u52a8\u3002 \u5982\u679c\u5cf0\u503c\u8fc7\u5927\u5e76\u4e14\u4e0e\u4e8b\u4ef6\u5faa\u73af\u963b\u585e\u76f8\u5173(\u89c1\u4e0b\u6587)\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u4f46\u5feb\u901f\u5cf0\u503c\u53ef\u80fd\u8868\u660e\u670d\u52a1\u5668\u6b63\u5728\u5065\u5eb7\u5730\u5feb\u901f\u5904\u7406\u9ad8\u8d1f\u8f7d\u3002 CPU \u6d3b\u52a8\u8fc7\u5c11\u53ef\u80fd\u662f Node.js \u8fdb\u7a0b\u5728\u7b49\u5f85 I/O \u64cd\u4f5c\u5b8c\u6210\u65f6\u5361\u4f4f\u7684\u4fe1\u53f7\uff0c\u6bd4\u5982\u7f13\u6162\u7684\u6570\u636e\u5e93\u67e5\u8be2\u6216\u6587\u4ef6\u5199\u5165\u3002</p> <p>\u5728\u6b64\u6570\u636e\u56fe\u8868\u4e2d\uff0c\u5904\u7406\u5668\u901a\u5e38\u76f8\u5f53\u7e41\u5fd9\uff0c\u770b\u8d77\u6765\u5f88\u5065\u5eb7\u3002</p> <p>\u5728\u672c\u6f14\u7ec3\u7684\u7b2c 6 \u90e8\u5206\uff0c\u4fee\u590d I/O \u95ee\u9898\uff0c \u6211\u4eec\u5c06\u770b\u5230\u4e00\u4e2a\u4e0d\u5065\u5eb7 CPU \u4f7f\u7528\u56fe\u7684\u793a\u4f8b\u3002</p>"},{"location":"documentation/doctor/04-reading-a-profile/#memory-usage-mb","title":"Memory Usage MB","text":"<p>\u8be5\u56fe\u6709\u4e09\u6761\u7ebf\uff0c\u663e\u793a\u6bcf\u4e2a\u65f6\u95f4\u70b9\u7684\u5146\u5b57\u8282\u5185\u5b58\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u76f8\u540c\u7684\u6bd4\u4f8b\u3002</p> <p></p> <p>\u8fd9\u4e09\u884c\u662f:</p> <ul> <li>RSS (Resident Set Size):   \u8fd9\u5c06\u59cb\u7ec8\u662f\u6700\u5927\u503c\uff0c\u8868\u793a\u4f5c\u4e3a\u8be5\u8fdb\u7a0b\u6267\u884c\u7684\u4e00\u90e8\u5206\u5206\u914d\u7684\u6240\u6709\u5185\u5b58\u3002   \u8fd9\u4e00\u884c\u548c Total Heap Allocated \u4e00\u884c\u4e4b\u95f4\u7684\u95f4\u9699\u8868\u793a\u975e\u5806\u5185\u5b58\uff0c   \u4f8b\u5982 JS \u4ee3\u7801\u672c\u8eab\u7684\u5b58\u50a8\uff0c\u5305\u542b\u53d8\u91cf\u6307\u9488\u548c\u50cf\u5e03\u5c14\u548c\u6574\u6570\u72b6\u6001\u8fd9\u6837\u7684\u539f\u8bed\u7684\u201c\u5806\u6808\u201d\uff0c   \u4ee5\u53caBuffer\u5185\u5bb9\u7684\u5185\u5b58\u6c60\u3002</li> <li>THA (Total Heap Allocated):   \u8fd9\u662f\u4e3a\u5b58\u50a8\u5177\u6709\u5f15\u7528\u7684\u9879(\u5982\u5b57\u7b26\u4e32\u3001\u5bf9\u8c61\u548c\u51fd\u6570\u95ed\u5305)\u800c\u9884\u7559\u7684\u7a7a\u95f4\u91cf\u3002   \u4e0e\u5b58\u50a8\u8fd9\u4e9b\u9879\u7684\u5f15\u7528\u6307\u9488\u7684\u5806\u6808\u4e0d\u540c\uff0c\u5728\u9700\u8981\u5806\u4e4b\u524d\uff0c\u5df2\u7ecf\u4e3a\u5806\u5206\u914d\u4e86\u9884\u5148\u8bbe\u5b9a\u7684\u5185\u5b58\u91cf\u3002</li> <li>HU (Heap Used):   \u8fd9\u662f\u6b64\u65f6\u5b9e\u9645\u4f7f\u7528\u7684\u5806\u5185\u5b58\u91cf\u3002   \u5b83\u8868\u793a\u5728\u7ed9\u5b9a\u65f6\u95f4\u70b9\u5df2\u5206\u914d\u4f46\u672a\u88ab\u5783\u573e\u6536\u96c6\u7684\u6240\u6709\u5b57\u7b26\u4e32\u3001\u5bf9\u8c61\u3001\u95ed\u5305\u7b49\u7684\u603b\u5927\u5c0f\u3002   \u8fd9\u901a\u5e38\u662f\u6700\u6709\u8da3\u7684\u4e00\u884c\uff0cRSS \u548c Total Heap assigned \u63d0\u4f9b\u4e0a\u4e0b\u6587\u3002</li> </ul> <p>\u4e0d\u65ad\u589e\u52a0\u7684 Heap Used \u884c\u8868\u660e\u53ef\u80fd\u5b58\u5728\u5185\u5b58\u6cc4\u6f0f\uff0c\u5bf9\u67d0\u4e9b\u4e1c\u897f\u7684\u5f15\u7528\u4ecd\u7136\u5728\u4f5c\u7528\u57df\u4e2d\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u6c38\u8fdc\u65e0\u6cd5\u88ab\u5783\u573e\u6536\u96c6\uff0c\u56e0\u6b64\u5bfc\u81f4\u53ef\u7528\u5185\u5b58\u6700\u7ec8\u67af\u7aed\u3002 \u76f8\u53cd\u7684\u53ef\u80fd\u662f\u4e00\u4e2a\u66f4\u5e38\u89c1\u7684\u95ee\u9898:\u8bb8\u591a\u6025\u5267\u4e0b\u964d\uff0c\u4e0e\u4e8b\u4ef6\u5faa\u73af\u5ef6\u8fdf\u56fe\u4e2d\u7684\u9ad8\u8bfb\u6570\u76f8\u5173\uff0c\u8868\u660e\u7834\u574f\u6027\u5783\u573e\u6536\u96c6\u4e8b\u4ef6\u6b63\u5728\u4e2d\u65ad\u8fdb\u7a0b\u5e76\u963b\u6b62 Node.js \u6267\u884c\u4ee3\u7801\u3002</p> <p>\u5728\u8fd9\u4e2a\u6570\u636e\u56fe\u8868\u4e2d\uff0c\u5806\u7684\u4e0a\u5347\u548c\u4e0b\u964d\u76f8\u5f53\u7f13\u6162\uff0c\u603b\u662f\u6709\u5927\u91cf\u7684\u7a7a\u95f2\u7a7a\u95f4 \u5728\u5e38\u9a7b\u96c6\u4e2d\u4e5f\u6709\u5927\u91cf\u7684\u975e\u5806\u5185\u5b58\u3002\u8fd9\u770b\u8d77\u6765\u5f88\u5065\u5eb7\u3002</p> <p>\u5982\u679c\u6211\u4eec\u9047\u5230\u4e0d\u5065\u5eb7\u7684\u5185\u5b58\u56fe\uff0c\u6307\u793a\u95ee\u9898\u7684\u7279\u5b9a\u7ebf\u5c06\u88ab\u6807\u8bb0\u4e3a\u7ea2\u8272:</p> <p></p>"},{"location":"documentation/doctor/04-reading-a-profile/#event-loop-delay-ms","title":"Event Loop Delay ms","text":"<p>\u8fd9\u8868\u793a Node.js \u88ab\u6267\u884c\u540c\u6b65 JavaScript \u4ee3\u7801\u963b\u585e\u7684\u65f6\u95f4\u70b9\u3002</p> <p></p> <p>\u7406\u89e3\u8fd9\u5f20\u56fe\u7684\u5de5\u4f5c\u539f\u7406\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u4e5f\u7ed9\u4e86\u6211\u4eec\u5173\u4e8e\u5176\u4ed6\u56fe\u7684\u6e05\u6670\u5ea6\u7684\u4fe1\u606f:</p> <ul> <li>y \u8f74\u8868\u793a\u5728\u5de5\u5177\u63d0\u793a\u7bad\u5934\u6307\u793a\u7684\u65f6\u523b\u7ed3\u675f\u7684\u4e8b\u4ef6\u5faa\u73af\u5ef6\u8fdf\u7684\u6301\u7eed\u65f6\u95f4</li> <li>\u4e4b\u540e\u603b\u662f\u6709\u4e00\u6761\u6c34\u5e73\u7ebf\u8868\u793a x \u8f74\u4e0a\u76f8\u540c\u7684\u65f6\u95f4\u91cf\u3002   \u5bf9\u4e8e\u8fd9\u6761\u7ebf\u7684\u957f\u5ea6\uff0cNode.js \u88ab\u963b\u585e\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u5728\u4efb\u4f55\u56fe\u5f62\u4e0a\u90fd\u6ca1\u6709 \u4efb\u4f55 \u6570\u636e\u3002   \u5982\u679c\u6211\u4eec\u6cbf\u7740\u5305\u542b\u5927\u91cf\u4e8b\u4ef6\u5faa\u73af\u5ef6\u8fdf\u7684\u56fe\u5f62\u8fd0\u884c\u6e38\u6807\uff0c\u5de5\u5177\u63d0\u793a\u4f1a\u8df3\u8f6c\u2014\u8fd9\u662f\u56e0\u4e3a\u5bf9\u4e8e\u4efb\u4f55\u56fe\u5f62\uff0c   \u5728\u8df3\u8f6c\u4e4b\u95f4\u90fd\u65e0\u6cd5\u6536\u96c6\u5230\u6570\u636e\uff0c\u56e0\u4e3a Node.js \u5728\u6267\u884c\u4e00\u4e9b\u7f13\u6162\u7684\u540c\u6b65\u4ee3\u7801\u65f6\u5361\u4f4f\u4e86\u3002</li> </ul> <p>\u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684\u622a\u56fe\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230:</p> <ul> <li>\u8fd9\u662f(\u8054\u5408)\u6700\u957f\u7684\u4e8b\u4ef6\u5faa\u73af\u5ef6\u8fdf\uff0c\u56e0\u4e3a\u5b83\u662f y \u8f74\u4e0a\u7684\u6700\u9ad8\u70b9\u3002</li> <li>\u901a\u8fc7\u67e5\u770b\u8fd9\u4e2a\u5de5\u5177\u63d0\u793a\u548c\u524d\u4e00\u4e2a\u5de5\u5177\u63d0\u793a\u4e4b\u95f4\u7684\u6c34\u5e73\u7ebf\uff0c\u8fd9\u4e2a\u5ef6\u8fdf\u5360\u7528\u4e86\u6982\u8981\u6587\u4ef6\u6301\u7eed\u65f6\u95f4\u7684\u4e00\u4e2a\u663e\u8457\u5757\u3002</li> </ul> <p>\u6cbf\u7740\u5149\u6807\u79fb\u52a8\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u56db\u4e2a\u4e8b\u4ef6\u5faa\u73af\u5ef6\u8fdf\u5360\u636e\u4e86\u5927\u90e8\u5206\u8fd0\u884c\u65f6\u95f4\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u5bfc\u81f4\u5176\u4ed6\u6570\u636e\u53d8\u5f97\u975e\u5e38\u7f13\u6162\u2014\u2014\u5927\u7ea6\u5728\u7b2c\u4e00\u5b63\u5ea6\u4e4b\u540e\uff0c\u6bcf\u6b21\u8bfb\u53d6\u5185\u5b58\u3001CPU \u7b49\u4e4b\u95f4\u90fd\u6709\u660e\u663e\u7684\u8df3\u8dc3\uff0c\u56e0\u4e3a Node.js \u5fd9\u4e8e\u6267\u884c\u4e00\u4e9b\u7f13\u6162\u7684\u540c\u6b65\u4ee3\u7801\uff0c\u751a\u81f3\u6ca1\u6709\u65f6\u95f4\u8fdb\u884c\u53e6\u4e00\u6b21\u8bfb\u53d6\u3002</p> <p>\u8fd9\u663e\u7136\u662f\u4e0d\u5065\u5eb7\u7684\u2014\u2014\u533b\u751f\u5df2\u7ecf\u5c06\u5176\u6807\u8bb0\u4e3a\u5065\u5eb7\u7684\uff0c\u5c06\u6b64\u56fe\u8868\u6d82\u6210\u7ea2\u8272\uff0c\u5e76\u5728\u8b66\u544a\u6846\u4e2d\u6307\u51fa\u5b83\u3002</p>"},{"location":"documentation/doctor/04-reading-a-profile/#active-handles","title":"Active Handles","text":"<p>\u8be5\u56fe\u663e\u793a\u4e86\u5f53\u524d\u6d3b\u52a8\u7684\u3001\u7b49\u5f85\u8f93\u51fa\u7684 I/O \u53e5\u67c4\u7684\u6570\u91cf\u3002</p> <p></p> <p>\u5f53 Node.js \u5f02\u6b65\u59d4\u6258\u65f6\uff0c\u4f8b\u5982\u4f7f\u7528libuv\u5c06\u6587\u4ef6\u5199\u5165\u6216\u6570\u636e\u5e93\u67e5\u8be2\u7b49\u4efb\u52a1\u59d4\u6258\u7ed9\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5b83\u4f1a\u5b58\u50a8\u4e00\u4e2a\u201c\u53e5\u67c4\u201d\u3002 \"active handle\"\u662f\u672a\u62a5\u544a\u4e3a\u5b8c\u6210\u7684\u59d4\u6258\u4efb\u52a1\u3002</p> <p>\u56e0\u6b64\uff0c\u6d3b\u52a8\u53e5\u67c4\u56fe\u53ef\u4ee5\u8ba9\u6211\u4eec\u4e86\u89e3 Node.js \u8fdb\u7a0b\u5728\u4efb\u4f55\u65f6\u95f4\u70b9\u7b49\u5f85\u4e86\u591a\u5c11\u5f02\u6b65 I/O \u6d3b\u52a8\u3002 \u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u8fd9\u5e94\u8be5\u9075\u5faa\u4e00\u4e2a\u6709\u5e8f\u7684\u6a21\u5f0f\uff0c\u968f\u7740\u8bf7\u6c42\u7684\u5904\u7406\u548c\u5b8c\u6210\u800c\u4e0a\u5347\u548c\u4e0b\u964d\u3002 \u5f53\u4e0e\u5176\u4ed6\u56fe\u5f62\u7ed3\u5408\u4f7f\u7528\u65f6\uff0c\u5b83\u8fd8\u53ef\u4ee5\u63d0\u4f9b\u7ebf\u7d22\u2014\u2014\u4f8b\u5982\uff0c\u670d\u52a1\u5668\u4e0a\u4e0e\u6d3b\u52a8\u53e5\u67c4\u589e\u52a0\u76f8\u5173\u7684 CPU \u5cf0\u503c\u901a\u5e38\u4e5f\u5e94\u8be5\u4e0e\u4f20\u5165\u8bf7\u6c42\u76f8\u5173\u3002</p> <p>\u8fd9\u4e2a\u56fe\u901a\u5e38\u4e3a\u5176\u4ed6\u56fe\u63d0\u4f9b\u4e0a\u4e0b\u6587\u3002 \u5f88\u96be\u6982\u62ec\u5730\u8bf4\u6d3b\u52a8\u53e5\u67c4\u56fe\u201c\u5e94\u8be5\u201d\u662f\u4ec0\u4e48\u6837\u5b50:\u5728\u4e0d\u77e5\u9053\u5e94\u7528\u7a0b\u5e8f\u903b\u8f91\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u901a\u5e38\u4e0d\u80fd\u6307\u7740\u6d3b\u52a8\u53e5\u67c4\u56fe\u8bf4\u201c\u770b\u8d77\u6765\u4e0d\u5065\u5eb7\u201d\u3002</p> <p>\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u6d3b\u52a8\u53e5\u67c4\u5f88\u5c11\u7684\u65f6\u95f4\u6bb5\uff0c\u5176\u4ed6\u6d3b\u52a8\u4e5f\u5f88\u5c11\uff0c\u8fd9\u53ef\u80fd\u8868\u793a\u8fdb\u7a0b\u51c6\u5907\u5c31\u7eea\u3002 \u7136\u540e\u6709\u4e00\u6bb5\u7a33\u5b9a\u7684[103]\u4e2a\u6d3b\u52a8\u53e5\u67c4\uff0c\u8fd9\u53ef\u80fd\u4ee3\u8868\u6b63\u5728\u5904\u7406\u7684\u4f20\u5165\u8bf7\u6c42\u3002 \u5b83\u544a\u8bc9\u6211\u4eec\uff0c\u6211\u4eec\u53ef\u4ee5\u5ffd\u7565\u5f88\u5c11\u6d3b\u52a8\u53e5\u67c4\u7684\u65e9\u671f\u9636\u6bb5\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4ee3\u8868\u5178\u578b\u7684\u670d\u52a1\u5668\u6d3b\u52a8\u3002</p>"},{"location":"documentation/doctor/04-reading-a-profile/#_5","title":"\u5efa\u8bae\u9762\u677f","text":"<p>\u70b9\u51fb\u5e95\u90e8\u7684\u84dd\u8272\u6761\uff0c\u5b83\u5c06\u6253\u5f00\u4e00\u4e2a\u9762\u677f\uff0c\u544a\u8bc9\u6211\u4eec\u66f4\u591a\u5173\u4e8e\u533b\u751f\u5bf9\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u7ed3\u8bba\u3002</p> <p></p> <p>\u8fd9\u7bc7\u6587\u7ae0\u5206\u4e3a\u4e24\u90e8\u5206:\u63a8\u8350\u6458\u8981\u548c\u201c\u9605\u8bfb\u66f4\u591a\u201d\u6309\u94ae\u4e0b\u65b9\u7684\u8be6\u7ec6\u63a8\u8350\u6587\u7ae0\u3002</p>"},{"location":"documentation/doctor/04-reading-a-profile/#_6","title":"\u5efa\u8bae\u603b\u7ed3","text":"<p>\u8fd9\u5c06\u5bf9\u5df2\u8bc6\u522b\u7684\u95ee\u9898\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u8981\u70b9\u6982\u8ff0\uff0c\u901a\u5e38\u8fd8\u4f1a\u7ed9\u51fa\u4e0b\u4e00\u6b65\u7684\u5efa\u8bae\u3002</p> <p></p> <p>\u8fd9\u91cc\u6709\u4e00\u4e9b UI \u63a7\u4ef6:</p> <ul> <li><code>x</code> \u5173\u95ed\u9762\u677f</li> <li> <p><code>Browse undetected issues</code>\u5141\u8bb8\u6211\u4eec\u9605\u8bfb\u533b\u751f\u53ef\u4ee5\u8bc6\u522b\u4f46\u5c1a\u672a\u8bc6\u522b\u6b64\u6570\u636e\u56fe\u8868\u7684\u95ee\u9898\u7684\u63cf\u8ff0\u3002   \u5355\u51fb\u6b64\u9009\u9879\u5361\u5c06\u5c55\u5f00\u4e00\u4e9b\u9009\u9879\u5361\uff0c\u4ee5\u663e\u793a Doctor \u5c1a\u672a\u4e3a\u8be5\u6570\u636e\u56fe\u8868\u8bc6\u522b\u7684\u95ee\u9898\u7684\u63cf\u8ff0\u3002   \u6211\u4eec\u53ef\u80fd\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u5f88\u6709\u7528\uff0c\u4f8b\u5982:</p> <ul> <li>\u5728\u5b66\u4e60 Node.js \u6027\u80fd\u7684\u540c\u65f6\uff0c\u907f\u514d\u5728\u4fee\u590d\u73b0\u6709\u95ee\u9898\u7684\u540c\u65f6\u4ea7\u751f\u65b0\u7684\u95ee\u9898\u3002</li> <li>\u4e3a\u4e86\u7406\u89e3\u4e3a\u4ec0\u4e48\u533b\u751f\u6ca1\u6709\u53d1\u73b0\u5df2\u77e5\u7684\u95ee\u9898\u3002     \u6b63\u5982\u5728Alert Bar section\u4e2d\u6240\u8ba8\u8bba\u7684\uff0c\u533b\u751f\u901a\u5e38\u4e0d\u4f1a\u540c\u65f6\u8bca\u65ad\u591a\u4e2a\u95ee\u9898\u3002</li> </ul> </li> </ul> <p></p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u544a\u8bc9\u6211\u4eec\u201c\u53ef\u80fd\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u540c\u6b65\u64cd\u4f5c\u963b\u585e\u7ebf\u7a0b\u201d\uff0c\u5e76\u5efa\u8bae\u4f7f\u7528\u201c\u4e34\u5e8a\u706b\u7130\u201d\u6765\u7f29\u5c0f\u8303\u56f4\u3002</p> <p>\u5728\u9605\u8bfb\u4e86\u603b\u7ed3\u540e\uff0c\u6211\u4eec\u5efa\u8bae\u70b9\u51fb<code>Read more</code>\u6765\u66f4\u6df1\u5165\u5730\u4e86\u89e3\u95ee\u9898\u3002</p>"},{"location":"documentation/doctor/04-reading-a-profile/#_7","title":"\u8be6\u7ec6\u5efa\u8bae","text":"<p>\u5355\u51fb<code>Read more</code>\u5c06\u5c55\u5f00\u5efa\u8bae\u9762\u677f\uff0c\u4ee5\u663e\u793a\u5173\u4e8e\u5df2\u8bca\u65ad\u7684\u6027\u80fd\u95ee\u9898\u7684\u8be6\u7ec6\u6587\u7ae0\u3002 \u8fd9\u4e9b\u901a\u5e38\u6709\u4e09\u4e2a\u90e8\u5206(\u70b9\u51fb\u5de6\u8fb9\u7684\u5185\u5bb9\u5217\u8868\u53ef\u4ee5\u8df3\u8f6c\u5230\u4e00\u4e2a\u7279\u5b9a\u7684\u90e8\u5206):</p> <ul> <li>Understanding the analysis \u6df1\u5165\u5730\u63cf\u8ff0\u4e86\u95ee\u9898\u3002</li> <li>Next Steps \u8be6\u7ec6\u4ecb\u7ecd\u4e86\u4e00\u4e9b\u5efa\u8bae\u7684\u6b65\u9aa4\uff0c\u4ee5\u7f29\u5c0f\u95ee\u9898\u7684\u786e\u5207\u539f\u56e0\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u89e3\u51b3\u5b83\u3002   \u901a\u5e38\uff0c\u8fd9\u6d89\u53ca\u5230\u4f7f\u7528 Clinic.js \u5957\u4ef6\u4e2d\u7684\u53e6\u4e00\u4e2a\u5de5\u5177\uff0c\u8be5\u5de5\u5177\u53ef\u4ee5\u8bc6\u522b\u6709\u95ee\u9898\u7684\u4ee3\u7801\u7684\u5355\u4e2a\u884c\u3002</li> <li>Reference \u63d0\u4f9b\u4e86\u5efa\u8bae\u8fdb\u4e00\u6b65\u9605\u8bfb\u7684\u94fe\u63a5\uff0c\u5e76\u5728\u64b0\u5199\u672c\u5efa\u8bae\u65f6\u5f15\u7528\u6216\u4f7f\u7528\u4e86\u4efb\u4f55\u6765\u6e90\u3002</li> </ul> <p></p> <p>\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u7740\u624b\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e86\u3002</p>"},{"location":"documentation/doctor/04-reading-a-profile/#_8","title":"\u4e0b\u4e00\u4e2a","text":"<p>\u4fee\u590d\u4e8b\u4ef6\u5faa\u73af\u95ee\u9898</p>"},{"location":"documentation/doctor/05-fixing-event-loop-problem/","title":"\u4fee\u590d\u4e8b\u4ef6\u5faa\u73af\u95ee\u9898","text":"<p>\u5728\u9605\u8bfb\u6570\u636e\u56fe\u8868\u4e2d\uff0c\u6211\u4eec\u770b\u5230\u4e86\u5982\u4f55\u7406\u89e3 doctor \u63d0\u4f9b\u7ed9\u6211\u4eec\u7684\u4fe1\u606f\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u5b83\u4f1a\u63a8\u8350\u5b83\u6240\u505a\u7684\u4e8b\u60c5\u3002\u73b0\u5728\u6211\u4eec\u6765\u770b\u770b\u5982\u4f55\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002</p>"},{"location":"documentation/doctor/05-fixing-event-loop-problem/#_2","title":"\u54a8\u8be2\u533b\u751f","text":"<p>\u6211\u4eec\u5df2\u7ecf\u4ece<code>slow-event-loop</code>\u4e2d\u9605\u8bfb\u4e86\u6211\u4eec\u5728\u9996\u5148\u5206\u6790\u4e2d\u521b\u5efa\u7684\u6570\u636e\u56fe\u8868\u3002 \u5728<code>node-clinic-doctor-examples</code>\u4e2d\u7684\u793a\u4f8b\u670d\u52a1\u5668\u3002 \u6211\u4eec\u88ab\u544a\u77e5\uff0c\u6211\u4eec\u7684\u95ee\u9898\u662f\u7f13\u6162\u7684\u540c\u6b65\u4ee3\u7801\u963b\u585e\u4e8b\u4ef6\u5faa\u73af\uff0c\u533b\u751f\u5efa\u8bae\u4f7f\u7528<code>clinic flame</code>\u6765\u8bc6\u522b\u95ee\u9898\u3002</p> <p></p>"},{"location":"documentation/doctor/05-fixing-event-loop-problem/#_3","title":"\u6309\u7167\u5904\u65b9","text":"<p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0e Doctor \u76f8\u540c\u7684\u547d\u4ee4\u521b\u5efa\u4e00\u4e2a Flame \u6570\u636e\u56fe\u8868\uff0c\u4f46\u662f\u5c06<code>doctor</code>\u66ff\u6362\u4e3a<code>flame</code>:</p> <pre><code>clinic flame --on-port 'autocannon localhost:$PORT' -- node slow-event-loop\n</code></pre> <p>\u6211\u4eec\u7684\u8f93\u51fa\u770b\u8d77\u6765\u50cf\u8fd9\u6837:</p> <p></p> <p>Flame \u9ed8\u8ba4\u9009\u62e9\u82b1\u8d39\u6700\u591a\u65f6\u95f4\u963b\u585e\u4e8b\u4ef6\u5faa\u73af\u7684\u51fd\u6570\u8c03\u7528\uff0c\u5e76\u4e14\u5df2\u7ecf\u8bc6\u522b\u51fa\u82b1\u8d39\u6700\u591a\u65f6\u95f4\u963b\u585e\u4e8b\u4ef6\u5faa\u73af\u7684\u51fd\u6570\u662f<code>sleep</code>\uff0c\u5728<code>slow-event-loop/index.js</code>\u7684\u7b2c 12 \u884c\u3002</p> <p><code>node-clinic-doctor-examples</code> \u4f7f\u7528\u4e86\u975e\u5e38\u7b80\u5355\u7684\u793a\u4f8b\u670d\u52a1\u5668:\u5bf9\u4e8e\u8fd9\u4e2a\u793a\u4f8b\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u6df1\u5165\u7814\u7a76Clinic.js Flame \u6587\u6863\u6307\u5357\u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u7684\u56fe\u8868\u6216\u9ad8\u7ea7\u7279\u6027\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u7acb\u5373\u6253\u5f00 <code>index.js</code> \uff0c\u5e76\u5728 Flame \u627e\u5230\u7684\u884c\u4e2d\u5bfb\u627e\u53ef\u4fee\u590d\u7684\u74f6\u9888:</p> <pre><code>server.get(\"/\", function (req, res, next) {\nsleep(30);\nres.send({});\nnext();\n});\n</code></pre> <p><code>sleep(30)</code>\u8c03\u7528\u662f\u9009\u4e2d\u7684\u4e00\u4e2a\u706b\u7130\u3002 \u8ba9\u6211\u4eec\u770b\u770b sleep \u51fd\u6570\u662f\u600e\u4e48\u505a\u7684:</p> <pre><code>function sleep(ms) {\nconst future = Date.now() + ms;\nwhile (Date.now() &lt; future);\n}\n</code></pre> <p>\u5f88\u660e\u663e\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u4f1a\u5bfc\u81f4\u4e8b\u4ef6\u5faa\u73af\u5ef6\u8fdf\u3002</p> <p>\u4e8b\u4ef6\u5faa\u73af\u662f\u5355\u7ebf\u7a0b\u7684:\u4e00\u6b21\u53ea\u5904\u7406\u4e00\u4e2a\u64cd\u4f5c\u3002 \u5bf9\u8be5\u670d\u52a1\u5668\u7684\u6bcf\u4e2a\u8bf7\u6c42\u5728\u4e8b\u4ef6\u5faa\u73af\u4e2d\u6392\u961f\u4e00\u4e2a\u540c\u6b65\u51fd\u6570\uff0c\u8be5\u4e8b\u4ef6\u5faa\u73af\u5305\u542b\u4e00\u4e2a<code>while</code>\u5faa\u73af\uff0c\u8be5\u5faa\u73af\u5c06\u91cd\u590d\u8fed\u4ee3 30 \u6beb\u79d2\u3002 \u8fd9\u4e9b\u90fd\u963b\u585e\u4e86\u4e8b\u4ef6\u5faa\u73af:\u5355\u4e2a\u7ebf\u7a0b\u5fd9\u4e8e\u8fed\u4ee3 <code>while</code> \u5faa\u73af\uff0c\u65e0\u6cd5\u5904\u7406\u4efb\u4f55\u5176\u4ed6\u64cd\u4f5c\u3002</p> <p>\u5982\u679c\u6682\u505c\u6765\u81ea\u5f02\u6b65\u8d85\u65f6\uff0c\u5982\u6765\u81ea<code>setTimeout</code>\uff0c\u5219\u4e8b\u4ef6\u5faa\u73af\u4e0d\u4f1a\u88ab\u963b\u585e\u3002 \u5305\u542b<code>setTimeout</code>\u7684\u540c\u6b65\u4ee3\u7801\u5c06\u7ee7\u7eed\u5e76\u5b8c\u6210\uff0c\u7136\u540e\u4f20\u9012\u7ed9<code>setTimeout</code>\u7684\u56de\u8c03\u51fd\u6570\u5c06\u5728\u4e8b\u4ef6\u5faa\u73af\u7684\u5355\u72ec\u7684\u672a\u6765 tick \u4e2d\u88ab\u8c03\u7528\u3002</p> <p>\u7136\u800c\uff0c\u8fd9\u4e2a<code>sleep</code>\u51fd\u6570\u662f\u5b8c\u5168\u540c\u6b65\u7684\u3002 \u4e8b\u4ef6\u5faa\u73af\u88ab\u963b\u585e\uff0c\u76f4\u5230\u5b83\u5b8c\u6210\u3002</p>"},{"location":"documentation/doctor/05-fixing-event-loop-problem/#_4","title":"\u6cbb\u7597\u75be\u75c5","text":"<p>\u8ba9\u6211\u4eec\u51cf\u5c11\u5faa\u73af\u7684\u6301\u7eed\u65f6\u95f4\uff0c\u5c06\u4f20\u9012\u7ed9<code>sleep</code>\u7684\u53c2\u6570\u6539\u4e3a<code>1</code>:</p> <pre><code>server.get('/', function (req, res, next) {\nsleep(1)\n</code></pre> <p>...save, and recreate the profile:</p> <pre><code>clinic doctor --on-port 'autocannon localhost:$PORT' -- node slow-event-loop\n</code></pre> <p>\u6570\u636e\u56fe\u8868\u73b0\u5728\u6ca1\u6709\u68c0\u6d4b\u5230\u4efb\u4f55\u95ee\u9898\u3002 \u6240\u6709\u7684\u4e1c\u897f\u90fd\u662f\u84dd\u8272\u7684\uff0c\u56fe\u8868\u770b\u8d77\u6765\u5f88\u5065\u5eb7\uff0c\u533b\u751f\u5efa\u8bae\u5c0f\u7ec4\u5174\u9ad8\u91c7\u70c8\u5730\u544a\u8bc9\u6211\u4eec\"Everything looks good!\"</p> <p></p> <p>\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u793a\u4f8b\u670d\u52a1\u5668\u3002 \u5728\u66f4\u590d\u6742\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u9700\u8981\u8fdb\u4e00\u6b65\u7814\u7a76 Clinic.js Flame \u914d\u7f6e\u6587\u4ef6\uff0c\u4ee5\u627e\u51fa\u74f6\u9888\u7684\u539f\u56e0\u3002 \u5173\u4e8e\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u8be6\u7ec6\u793a\u4f8b\u53ef\u4ee5\u5728Clinic.js Flame \u6587\u6863\u4e2d\u627e\u5230\u3002</p>"},{"location":"documentation/doctor/05-fixing-event-loop-problem/#_5","title":"\u4e0b\u4e00\u4e2a","text":"<p>\u4fee\u590d I/O \u95ee\u9898</p>"},{"location":"documentation/doctor/06-fixing-io-problem/","title":"\u4fee\u590d I/O \u95ee\u9898","text":"<p>\u5728\u9605\u8bfb\u4e2a\u4eba\u8d44\u6599\u4e2d\uff0c\u6211\u4eec\u770b\u5230 CPU \u4f7f\u7528\u56fe\u53ef\u4ee5\u6307\u51fa\u59d4\u6d3e\u7ed9\u5176\u4ed6\u8fdb\u7a0b\u7684 Node.js I/O(\u8f93\u5165/\u8f93\u51fa)\u64cd\u4f5c\u7684\u95ee\u9898\uff0c\u4f8b\u5982\u7f13\u6162\u7684\u6570\u636e\u5e93\u67e5\u8be2\u6216\u7531libuv\u59d4\u6d3e\u7684\u6587\u4ef6\u5199\u3002 \u8ba9\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u66f4\u8be6\u7ec6\u5730\u7814\u7a76\u4e00\u4e0b\u3002</p>"},{"location":"documentation/doctor/06-fixing-io-problem/#_1","title":"\u54a8\u8be2\u533b\u751f","text":"<p>\u5728<code>node-clinic-doctor-examples</code>\u4e2d\u6709\u4e00\u4e2a\u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u793a\u4f8b\u670d\u52a1\u5668\uff0c\u79f0\u4e3a<code>slow-io</code>\u3002 \u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u6309\u7167\u51c6\u5907\u548c\u5206\u6790\u4e2d\u6240\u63cf\u8ff0\u7684\u8bbe\u7f6e\u4e86\u4e00\u5207\uff0c\u8ba9\u6211\u4eec\u4ece\u8be5\u670d\u52a1\u5668\u521b\u5efa\u4e00\u4e2a<code>Clinic.js</code>\u533b\u751f\u6570\u636e\u56fe\u8868:</p> <pre><code>clinic doctor --on-port 'autocannon localhost:$PORT' -- node slow-io\n</code></pre> <p>\u8f93\u51fa\u5e94\u8be5\u770b\u8d77\u6765\u50cf\u8fd9\u6837:</p> <p></p> <p>CPU \u4f7f\u7528\u7387\u56fe\u4ee5\u7ea2\u8272\u7a81\u51fa\u663e\u793a\u3002 \u5b83\u663e\u793a\u4e86\u51e0\u4e2a\u5cf0\u503c\uff0c\u4f46\u5927\u591a\u6570\u90fd\u5f88\u4f4e\u3002 \u5728\u7e41\u5fd9\u7684\u670d\u52a1\u5668\u4e0a\uff0cCPU \u6d3b\u52a8\u6bd4\u6211\u4eec\u671f\u671b\u7684\u8981\u5c11\u3002 \u5efa\u8bae\u9762\u677f\u89e3\u91ca\u8bf4\uff0c\u8fd9\u53ef\u80fd\u662f\u7531\u7f13\u6162\u7684\u5f02\u6b65\u64cd\u4f5c\u5f15\u8d77\u7684:\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u6b63\u5728\u7b49\u5f85\u5916\u90e8 I/O \u6765\u89e3\u51b3\u627f\u8bfa\u6216\u89e6\u53d1\u56de\u8c03\u3002</p> <p>\u8fd9\u4e0e\u6211\u4eec\u5728\u4fee\u590d\u4e8b\u4ef6\u5faa\u73af\u95ee\u9898\u4e2d\u770b\u5230\u7684\u95ee\u9898\u975e\u5e38\u4e0d\u540c\u3002 \u5efa\u8bae\u5c0f\u7ec4\u5efa\u8bae\u6211\u4eec\u4f7f\u7528\u53e6\u4e00\u4e2a <code>Clinic.js</code> \u5de5\u5177<code>clinic bubbleprof</code>\u3002</p>"},{"location":"documentation/doctor/06-fixing-io-problem/#_2","title":"\u6309\u7167\u5904\u65b9","text":"<p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0e Doctor \u76f8\u540c\u7684\u547d\u4ee4\u521b\u5efa\u4e00\u4e2a Bubbleprof \u6570\u636e\u56fe\u8868\uff0c\u4f46\u5c06<code>doctor</code>\u66ff\u6362\u4e3a<code>bubbleprof</code>:</p> <pre><code>clinic bubbleprof --on-port 'autocannon localhost:$PORT' -- node slow-io\n</code></pre> <p>\u6211\u4eec\u7684\u8f93\u51fa\u770b\u8d77\u6765\u50cf\u8fd9\u6837:</p> <p></p> <p><code>node-clinic-doctor-examples</code> \u4f7f\u7528\u4e86\u975e\u5e38\u7b80\u5355\u7684\u793a\u4f8b\u670d\u52a1\u5668\uff0c\u6240\u4ee5\u73b0\u5728\u6211\u4eec\u53ea\u9700\u8981\u67e5\u770b\u4e3b\u56fe\uff0c\u800c\u4e0d\u9700\u8981\u67e5\u770bClinic.js Bubbleprof \u6587\u6863\u6307\u5357\u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u7684\u66f4\u9ad8\u7ea7\u7684\u7279\u6027\u3002</p> <p>\u4e3b\u56fe\u663e\u793a\u4e86\u4e00\u4e2a\u7e41\u5fd9\u7684<code>http.connection</code>\uff0c\u8c03\u7528<code>timeout</code>\uff0c\u7136\u540e\u5e76\u884c\u8c03\u7528\u66f4\u591a\u7684<code>timeout</code>\u3002 \u7b2c\u4e00\u4e2a<code>timeout</code>\u770b\u8d77\u6765\u5f88\u5173\u952e\u2014\u2014\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4f59\u90e8\u5206\u5c06\u4ece\u5b83\u5206\u652f\u51fa\u6765\u3002</p> <p>\u8fd9\u53ef\u80fd\u662f\u6211\u4eec\u7684\u74f6\u9888\u3002</p> <p>\u5355\u51fb\u5b83\u5c06\u6253\u5f00\u5b83\uff0c\u663e\u793a\u4e24\u4e2a\u90e8\u5206\u3002 \u70b9\u51fb\u8f83\u957f\u7684\u90e8\u5206\u6307\u5411\u4e00\u4e9b\u4ee3\u7801:\u4e00\u4e2a\u51fd\u6570 <code>asyn.cseries</code>\uff0c\u5728\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u6587\u4ef6<code>./index.js</code>\uff0c\u7b2c 9 \u884c\uff0c\u7b2c 16 \u5217:</p> <p></p> <p>\u5982\u679c\u6211\u4eec\u6253\u5f00<code>node-clinic-doctor-examples/slow-io/index.js</code>\u5e76\u627e\u5230\u8fd9\u4e00\u884c\uff0c\u6211\u4eec\u4f1a\u770b\u5230:</p> <pre><code>function awaitData(callback) {\nasync.series(\n[\n(done1) =&gt; setTimeout(done1, Math.random() * 1000),\n(done1) =&gt;\nasync.parallel(\n[\n(done2) =&gt; setTimeout(done2, Math.random() * 1000),\n(done2) =&gt; setTimeout(done2, Math.random() * 1000),\n(done2) =&gt; setTimeout(done2, Math.random() * 1000),\n(done2) =&gt; setTimeout(done2, Math.random() * 1000),\n(done2) =&gt; setTimeout(done2, Math.random() * 1000),\n],\ndone1\n),\n],\ncallback\n);\n}\n</code></pre> <p>\u8fd9\u5c31\u662f Node.js \u6b63\u5728\u7b49\u5f85\u7684-\u94fe\u5f0f\u8d85\u65f6\u3002</p> <p>\u5982\u679c\u5ef6\u8fdf\u662f\u4e00\u4e2a\u5916\u90e8\u8fc7\u7a0b\uff0c\u6bd4\u5982\u7f13\u6162\u7684\u6570\u636e\u5e93\u67e5\u8be2\uff0c\u90a3\u4e48\u6211\u4eec\u5728 Node.js \u4e2d\u770b\u5230\u7684\u7ebf\u7d22\u5c06\u662f\u76f8\u540c\u7684\u3002 \u6211\u4eec\u65e0\u6cd5\u770b\u5230\u5916\u90e8\u64cd\u4f5c\u4e2d\u7a76\u7adf\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u8bc6\u522b\u51fa Node.js \u6b63\u5728\u7b49\u5f85\u7684\u662f\u54ea\u4e2a\u5f02\u6b65\u64cd\u4f5c\u3002</p>"},{"location":"documentation/doctor/06-fixing-io-problem/#_3","title":"\u6cbb\u7597\u75be\u75c5","text":"<p>\u8ba9\u6211\u4eec\u51cf\u5c11\u8d85\u65f6\u7684\u6301\u7eed\u65f6\u95f4\uff0c\u5c06\u4f20\u9012\u7ed9<code>setTimeout</code>\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4ece<code>1000</code>\u6539\u4e3a<code>1</code>\u3002 \u8fd9\u6a21\u62df\u4e86\u663e\u8457\u52a0\u901f\u5916\u90e8 I/O:</p> <pre><code>function awaitData(callback) {\nasync.series(\n[\n(done1) =&gt; setTimeout(done1, 1),\n(done1) =&gt;\nasync.parallel(\n[\n(done2) =&gt; setTimeout(done2, 1),\n(done2) =&gt; setTimeout(done2, 1),\n(done2) =&gt; setTimeout(done2, 1),\n(done2) =&gt; setTimeout(done2, 1),\n(done2) =&gt; setTimeout(done2, 1),\n],\ndone1\n),\n],\ncallback\n);\n}\n</code></pre> <p>\u7136\u540e\u4fdd\u5b58\u5e76\u91cd\u65b0\u521b\u5efa\u6570\u636e\u56fe\u8868:</p> <pre><code>clinic doctor --on-port 'autocannon localhost:$PORT' -- node slow-io\n</code></pre> <p>\u6570\u636e\u56fe\u8868\u73b0\u5728\u6ca1\u6709\u68c0\u6d4b\u5230\u4efb\u4f55\u95ee\u9898\u3002\u4e00\u5207\u90fd\u662f\u84dd\u8272\u7684\uff0c\u56fe\u5f62\u770b\u8d77\u6765\u5f88\u5065\u5eb7\uff0cCPU \u662f\u6d3b\u8dc3\u7684\uff0c\u533b\u751f\u7684\u5efa\u8bae\u9762\u677f\u5174\u9ad8\u91c7\u70c8\u5730\u544a\u8bc9\u6211\u4eec\"Everything looks good!\"</p> <p></p> <p>\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u793a\u4f8b\u670d\u52a1\u5668\u3002 \u5728\u66f4\u590d\u6742\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u9700\u8981\u66f4\u6df1\u5165\u5730\u7814\u7a76 Clinic.js Bubbleprof \u6570\u636e\u56fe\u8868\uff0c\u4ee5\u6df1\u5165\u4e86\u89e3\u74f6\u9888\u7684\u539f\u56e0\u3002 \u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u8be6\u7ec6\u793a\u4f8b\u53ef\u4ee5\u5728Clinic.js Bubbleprof \u6587\u6863\u4e2d\u627e\u5230\u3002</p>"},{"location":"documentation/doctor/06-fixing-io-problem/#_4","title":"\u4e0b\u4e00\u4e2a","text":"<p>\u6211\u4eec\u73b0\u5728\u719f\u6089\u4e86\u5982\u4f55\u4f7f\u7528 Doctor \u6765\u8bc6\u522b\u95ee\u9898\u7684\u7c7b\u578b\u3002 \u4e0b\u4e00\u6b65\u662f\u5b66\u4e60\u66f4\u591a\u5173\u4e8e\u8fd9\u4e9b\u5de5\u5177\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u5de5\u5177\u6765\u78e8\u7ec3\u7279\u5b9a\u7684\u4ee3\u7801\u3002</p> <p>\u73b0\u5728\uff0c\u6211\u4eec\u51c6\u5907\u597d\u8fdb\u5165\u4ee5\u4e0b\u5185\u5bb9\u7684\u6f14\u7ec3\u6587\u6863:</p> <ul> <li>Clinic.js Flame, \u7528\u4e8e\u8bc6\u522b\u6162\u540c\u6b65\u4ee3\u7801</li> <li>Clinic.js Bubbleprof, \u67e5\u627e\u5f02\u6b65\u4ee3\u7801\u4e2d\u7684\u95ee\u9898</li> </ul>"},{"location":"documentation/flame/","title":"\u706b\u7130\u56fe","text":"<p>\u5982\u679c\u4f60\u60f3\u5feb\u901f\u5f00\u59cb\u7406\u89e3\u706b\u7130\u56fe\u5e76\u5b66\u4e60\u5982\u4f55\u4f18\u5316 Node.js \u4ee3\u7801\uff0c\u90a3\u4e48\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5f00\u59cb\u3002</p> <ol> <li>\u8bbe\u7f6e</li> <li>\u51c6\u5907</li> <li>\u9996\u5148\u5206\u6790</li> <li>\u706b\u7130\u56fe</li> <li>\u63a7\u5236</li> <li>\u4f18\u5316\u70ed\u51fd\u6570</li> <li>\u51cf\u5c0f\u56fe\u7684\u5927\u5c0f</li> <li>\u5148\u8fdb\u7684\u5206\u6790</li> <li>\u5148\u8fdb\u7684\u63a7\u5236</li> </ol>"},{"location":"documentation/flame/01-setup/","title":"\u8bbe\u7f6e","text":"<p>Flame \u662f Clinic.js \u5de5\u5177\u5957\u88c5\u7684\u4e00\u90e8\u5206\u3002\u8981\u5b89\u88c5 Flame\uff0c\u53ea\u9700\u50cf\u8fd9\u6837\u5b89\u88c5 Clinic.js:</p> <pre><code>npm install -g clinic\n</code></pre> <p>\u5b89\u88c5\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd0\u884c\u5e26\u6709 <code>--help</code> \u6807\u5fd7\u7684 <code>clinic flame</code> \u547d\u4ee4\u6765\u68c0\u67e5 Flame \u662f\u5426\u5df2\u7ecf\u5b89\u88c5\u3002</p> <pre><code>clinic flame --help\n</code></pre> <p>\u5b83\u5e94\u8be5\u8f93\u51fa\u7c7b\u4f3c\u4e0b\u9762\u7684\u5185\u5bb9:</p> <pre><code>Clinic.js Flame - v3.6.0 (0x v4.7.2)\n\nclinic flame helps you find synchronous bottlenecks\nby creating a flamegraph visualization that assists in identifying\nfunction calls that may be blocking the event loop.\n\nFor more information see the 0x readme, https://github.com/davidmarkclements/0x\n\nTo run clinic flame\n\n  clinic flame -- node server.js\n\nIf profiling on a server, it can be useful to only do data collection:\n\n  clinic flame --collect-only -- node server.js\n\nYou can then transfer the data and visualize it locally:\n\n  clinic flame --visualize-only PID.clinic.flame\n\nFlags\n-h | --help                Display Help\n-v | --version             Display Version\n--collect-only             Do not process data on termination\n--visualize-only datapath  Build or rebuild visualization from data\n</code></pre>"},{"location":"documentation/flame/01-setup/#_2","title":"\u4e0b\u4e00\u4e2a","text":"<p>\u51c6\u5907</p>"},{"location":"documentation/flame/02-getting-ready/","title":"\u51c6\u5907","text":"<p>\u4e00\u65e6\u6211\u4eec\u5b89\u88c5\u4e86<code>clinic</code>\uff0c\u5e76\u9a8c\u8bc1\u4e86<code>clinic flame</code>\u7684\u529f\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u6790\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u3002</p> <p>\u4e3a\u4e86\u8fdb\u884c\u8bd5\u9a8c\uff0c\u8ba9\u6211\u4eec\u514b\u9686\u5e76\u51c6\u5907\u5b98\u65b9\u7684 Clinic.js Flame \u6f14\u793a:</p> <pre><code>git clone https://github.com/clinicjs/node-clinic-flame-demo.git\ncd node-clinic-flame-demo\nnpm install\n</code></pre> <p>\u5f53 npm \u4e0b\u8f7d\u8fd9\u4e9b\u4f9d\u8d56\u65f6\uff0c\u8bf7\u67e5\u770bReadme\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u5206\u6790\u4e86!</p>"},{"location":"documentation/flame/02-getting-ready/#_2","title":"\u4e0b\u4e00\u4e2a","text":"<p>\u9996\u5148\u5206\u6790</p>"},{"location":"documentation/flame/03-first-analysis/","title":"\u5206\u6790","text":"<p>\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u597d\u5206\u6790\u5e94\u7528\u7a0b\u5e8f\u4e86\u3002</p> <p>\u8ba9\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528 repo \u4e2d\u7684\u7b2c\u4e00\u4e2a\u670d\u52a1\u5668, <code>1-server-with-slow-function.js</code>\u3002</p> <p>\u5b83\u5305\u542b\u4e00\u4e2a HTTP \u670d\u52a1\u5668\uff0c\u4f7f\u7528 Express \u6784\u5efa\u5e26\u6709\u6839\u8def\u7531(<code>/</code>)\u7684\u670d\u52a1\u5668\uff0c\u8be5\u670d\u52a1\u5668\u5728\u5448\u73b0\u767b\u9646\u9875\u9762\u4e4b\u524d\u6267\u884c\u4e00\u4e9b\u5de5\u4f5c\u3002</p> <p>\u670d\u52a1\u5668\u53ef\u4ee5\u901a\u8fc7<code>node 1-server-with-slow-function.js</code>\u542f\u52a8\uff0c\u7136\u540e\u901a\u8fc7 http://localhost:3000/\u5728\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee\u3002 \u5982\u679c\u767b\u9646\u9875\u9762\u663e\u793a\"Hello World\"\uff0c\u90a3\u4e48\u4e00\u5207\u6b63\u5e38!</p> <p>\u8ba9\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528 Flame \u5bf9\u670d\u52a1\u5668\u8fdb\u884c\u5206\u6790\uff0c\u770b\u770b\u662f\u5426\u53ef\u4ee5\u627e\u5230\u4efb\u4f55\u74f6\u9888\u3002</p> <p>\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5de5\u5177\uff0c\u53ef\u4ee5\u6a21\u62df\u8db3\u591f\u5f3a\u70c8\u7684 HTTP \u8d1f\u8f7d\u3002</p> <p>\u6211\u4eec\u5efa\u8bae\u4f7f\u7528<code>autocannon</code> \uff0c\u5b83\u652f\u6301 Windows\u3001Mac \u548c Linux\uff0c\u800c\u4e14\u4f7f\u7528\u8d77\u6765\u5f88\u7b80\u5355\u3002</p> <p>\u8ba9\u6211\u4eec\u4ece npm \u5b89\u88c5\u5b83:</p> <pre><code>npm install -g autocannon\n</code></pre> <p>\u4e3a\u4e86\u8fd0\u884c\u5206\u6790\uff0c\u6211\u4eec\u60f3\u7528 Flame \u8fd0\u884c\u670d\u52a1\u5668\uff0c\u5f53\u670d\u52a1\u5668\u51c6\u5907\u597d\u4e86 - \u6bd4\u5982\u5f00\u59cb\u76d1\u542c\u7aef\u53e3 - \u6211\u4eec\u60f3\u7528\u201cautocannon\u201d\u5411\u5b83\u53d1\u9001\u5927\u91cf\u7684\u8bf7\u6c42\u3002</p> <p>\u6240\u6709\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u7528\u4e00\u4e2a\u547d\u4ee4\u6267\u884c\uff0c\u53ef\u4ee5\u539f\u6837\u590d\u5236\u548c\u7c98\u8d34:</p> <pre><code>clinic flame --on-port 'autocannon localhost:$PORT' -- node 1-server-with-slow-function.js\n</code></pre> <p>\u8ba9\u6211\u4eec\u5206\u89e3\u8fd9\u4e2a\u547d\u4ee4:</p> <ul> <li><code>clinic flame</code>\u90e8\u5206\u8c03\u7528<code>flame</code>\u547d\u4ee4\u5de5\u5177\u3002</li> <li><code>\u2014\u2014on-port</code>\u6807\u5fd7\u5c06\u5728\u670d\u52a1\u5668\u5f00\u59cb\u4fa6\u542c\u7aef\u53e3\u65f6\u7acb\u5373\u6267\u884c\u63d0\u4f9b\u7684\u811a\u672c\u3002</li> <li>\u8be5\u811a\u672c\u4e2d\u7684<code>$PORT</code>\u53d8\u91cf\u88ab\u8bbe\u7f6e\u4e3a\u670d\u52a1\u5668\u5f00\u59cb\u4fa6\u542c\u7684\u7b2c\u4e00\u4e2a\u7aef\u53e3\u3002</li> <li>\u53cc\u7834\u6298\u53f7(<code>\u2014\u2014</code>)\u4e4b\u540e\u7684\u6240\u6709\u5185\u5bb9\u90fd\u662f\u542f\u52a8\u6211\u4eec\u60f3\u8981\u5206\u6790\u7684\u670d\u52a1\u5668\u7684\u547d\u4ee4\uff0c\u5728\u672c\u4f8b\u4e2d\u662f<code>node 1-server-with-slow-function.js</code>\u3002</li> </ul> <p>\u8fd9\u4e2a\u547d\u4ee4\u8fd0\u884c\u4e09\u4e2a\u53ef\u6267\u884c\u6587\u4ef6:<code>clinic flame</code>\u7236\u53ef\u6267\u884c\u6587\u4ef6\uff0c<code>autocannon</code>\u5728<code>--on-port</code>\u4e2d\u7684\u53ef\u6267\u884c\u6587\u4ef6\u548c<code>node</code>\u53ef\u6267\u884c\u6587\u4ef6\u3002</p> <p>\u8fd0\u884c\u8be5\u547d\u4ee4\u540e\uff0c\u5c06\u5bf9\u8fdb\u7a0b\u8fdb\u884c 10 \u79d2\u7684\u52a0\u8f7d\u6d4b\u8bd5(\u6309\u7167<code>autocannon</code>\u7684\u9ed8\u8ba4\u6301\u7eed\u65f6\u95f4)\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u7f16\u8bd1\u6210\u4e00\u4e2a HTML \u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u5e94\u81ea\u52a8\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u3002</p> <p>\u751f\u6210\u7684 HTML \u5e94\u8be5\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u5185\u5bb9:</p> <p></p> <p>\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u706b\u7130\u56fe\u3002</p>"},{"location":"documentation/flame/03-first-analysis/#_2","title":"\u4e0b\u4e00\u4e2a","text":"<p>Flamegraphs</p>"},{"location":"documentation/flame/04-flamegraphs/","title":"\u706b\u7130\u56fe","text":"<p>\u8ba9\u6211\u4eec\u518d\u770b\u4e00\u4e0b\u5728\u524d\u9762\u9996\u5148\u5206\u6790\u6b65\u9aa4\u4e2d\u751f\u6210\u7684\u706b\u7130\u56fe.</p> <p></p> <p>\u6682\u65f6\u5ffd\u7565\u5468\u56f4\u7684\u63a7\u4ef6\uff0c\u8ba9\u6211\u4eec\u4e13\u6ce8\u4e8e\u7406\u89e3\u53ef\u89c6\u5316\u3002</p> <p>\u5728\u751f\u6210\u706b\u7130\u56fe\u65f6\uff0c\u6211\u4eec\u8981\u95ee\u4e09\u4e2a\u5173\u952e\u95ee\u9898:</p> <ul> <li>\u5728\u62bd\u6837\u671f\u95f4\uff0c\u54ea\u4e9b\u51fd\u6570\u76f8\u4e92\u8c03\u7528?</li> <li>\u6bcf\u4e2a\u51fd\u6570\u5728 cpu \u4e0a\u8fd0\u884c\u7684\u65f6\u95f4\u662f\u591a\u5c11?</li> <li>\u6bcf\u4e2a\u51fd\u6570\u5728\u6808\u9876\u88ab\u89c2\u5bdf\u7684\u65f6\u95f4\u662f\u591a\u5c11?</li> </ul> <p>\u8fd9\u4e09\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u663e\u800c\u6613\u89c1\u3002</p>"},{"location":"documentation/flame/04-flamegraphs/#_2","title":"\u54ea\u4e9b\u51fd\u6570\u76f8\u4e92\u8c03\u7528(\u5806\u6808)","text":"<p>\u6bcf\u4e2a\u5757\u4ee3\u8868\u4e00\u4e2a\u51fd\u6570\u7684\u8c03\u7528\uff0c\u7531\u5bfc\u81f4\u8be5\u51fd\u6570\u7684\u8c03\u7528\u5806\u6808\u805a\u5408\u3002\u5f53\u4e00\u4e2a\u5757\u4f4d\u4e8e\u53e6\u4e00\u4e2a\u5757\u7684\u9876\u90e8\u65f6\uff0c\u5b83\u88ab\u5b83\u4e0b\u9762\u7684\u5757\u8c03\u7528\uff0c\u5b83\u88ab\u5b83\u4e0b\u9762\u7684\u5757\u8c03\u7528\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002</p> <p></p> <p>\u5728 Clinic.js Flame \u4e2d\uff0c\u6bcf\u4e2a\u5757\u7684\u6587\u672c\u548c\u8f6e\u5ed3\u989c\u8272\u53ef\u4ee5\u5e2e\u52a9\u4f60\u5bfc\u822a\u3002 \u767d\u8272\u4ee3\u8868\u88ab\u5206\u6790\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u4ee3\u7801(\u5373\u5728\u60a8\u76f4\u63a5\u63a7\u5236\u4e0b\u7684\u4ee3\u7801)\u3002 \u84dd\u8272\u4ee3\u8868\u4f60\u5728 node_modules \u4e2d\u7684\u4f9d\u8d56\uff0c\u800c\u7070\u8272\u4ee3\u8868 Node.js \u6838\u5fc3\u672c\u8eab\u7684\u4ee3\u7801\u3002</p>"},{"location":"documentation/flame/04-flamegraphs/#cpu","title":"\u4e00\u4e2a\u51fd\u6570\u5728 cpu \u4e0a\u7684\u603b\u957f\u5ea6(\u5757\u5bbd\u5ea6)","text":"<p>\u5757\u7684\u5bbd\u5ea6\u8868\u793a\u5728\u6982\u8981\u6587\u4ef6\u8fd0\u884c\u7684\u6301\u7eed\u65f6\u95f4\u4e4b\u5916\uff0c\u5b83\u5728 CPU \u4e0a\u7684\u65f6\u95f4\u91cf\u3002 \u8fd9\u5e76\u4e0d\u4e00\u5b9a\u610f\u5473\u7740\u51fd\u6570\u5728\u6267\u884c\u5b83\u81ea\u5df1\u7684\u4ee3\u7801:\u5728\u5b83\u4e0a\u9762\u6709\u5757\u7684\u5730\u65b9\uff0c\u5b83\u5df2\u7ecf\u8c03\u7528\u4e86\u90a3\u4e2a\u51fd\u6570\uff0c\u6b63\u5728\u7b49\u5f85\u5b83\u5b8c\u6210\u3002</p> <p>Flame \u5bf9\u6bcf\u4e2a\u51fd\u6570\u8c03\u7528\u7684\u51fd\u6570\u8fdb\u884c\u6392\u5e8f\uff0c\u4ee5\u4fbf\u6700\u5bbd\u7684\u5757(\u5728 CPU \u4e0a\u82b1\u8d39\u65f6\u95f4\u6700\u957f\u7684\u51fd\u6570)\u9996\u5148\u663e\u793a\u5728\u5de6\u4fa7\u3002</p> <p></p>"},{"location":"documentation/flame/04-flamegraphs/#heat","title":"\u51fd\u6570\u5728\u6808\u9876(\u201cheat\u201d)\u51fa\u73b0\u7684\u9891\u7387\u662f\u591a\u5c11?","text":"<p>\u8fd9\u53ef\u4ee5\u6539\u5199\u4e3a:\u201c\u4e00\u4e2a\u51fd\u6570\u963b\u585e\u4e86 Node.js \u4e8b\u4ef6\u5faa\u73af\u591a\u957f\u65f6\u95f4\u201d\u3002 \u5982\u679c\u4e00\u4e2a\u51fd\u6570\u7ecf\u5e38\u5728\u5806\u6808\u7684\u9876\u90e8\u88ab\u89c2\u5bdf\u5230\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u82b1\u8d39\u66f4\u591a\u7684\u65f6\u95f4\u6765\u6267\u884c\u81ea\u5df1\u7684\u4ee3\u7801\uff0c\u800c\u4e0d\u662f\u8c03\u7528\u5176\u4ed6\u51fd\u6570\u6216\u5141\u8bb8\u51fd\u6570\u56de\u8c03\u89e6\u53d1\u3002</p> <p>\u5728 Node.js \u4e2d\uff0c\u6bcf\u6b21\u53ea\u80fd\u6267\u884c\u4e00\u4e2a\u51fd\u6570(\u5ffd\u7565 Worker \u7ebf\u7a0b\u4e4b\u7c7b\u7684\u53ef\u80fd\u6027)\u3002 \u5982\u679c\u4e00\u4e2a\u51fd\u6570\u9700\u8981\u5f88\u957f\u65f6\u95f4\u624d\u80fd\u6267\u884c\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u53d1\u751f\u5176\u4ed6\u4efb\u4f55\u4e8b\u60c5\uff0c\u5305\u62ec\u89e6\u53d1 I/O \u56de\u8c03\u3002 \u8fd9\u5c31\u662f\u201c\u963b\u585e\u4e8b\u4ef6\u5faa\u73af\u201d\u7684\u672c\u8d28\u3002</p> <p>\u6cbf\u7740\u66b4\u9732\u7684\u5757\u9876\u90e8\u7684\u6761\u7684\u4eae\u5ea6\u8868\u793a\u5728\u5806\u6808\u9876\u90e8\u89c2\u5bdf\u51fd\u6570\u7684\u65f6\u95f4\u767e\u5206\u6bd4\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u4e00\u4e2a\u5757\u8d8a\u70ed(\u6216\u8d8a\u4eae)\uff0c\u5b83\u6267\u884c\u81ea\u5df1\u7684\u4ee3\u7801\u6240\u82b1\u8d39\u7684\u5b9e\u9645\u65f6\u95f4\u5c31\u8d8a\u591a\uff0c\u4ece\u800c\u963b\u6b62\u4efb\u4f55\u5176\u4ed6\u4ee3\u7801\u7684\u6267\u884c\u3002</p> <p></p> <p>\u5f53\u4e00\u4e2a\u51fd\u6570\u963b\u585e\u4e8b\u4ef6\u5faa\u73af\u7684\u6bd4\u4f8b\u9ad8\u4e8e\u5176\u4ed6\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u201c\u70ed\u201d\u51fd\u6570\u3002 \u5bfb\u627e\u8fd9\u4e9b\u201c\u70ed\u95e8\u201d\u51fd\u6570\u662f\u5f00\u59cb\u5bfb\u627e\u4f18\u5316\u4ee3\u7801\u7684\u597d\u5730\u65b9\u3002 Flame \u9ed8\u8ba4\u9009\u62e9\u201c\u6700\u70ed\u201d\u7684\u5e27\uff0c\u5e76\u63a7\u5236\u4e0b\u4e00\u4e2a\u6700\u70ed\u5e27\u7684\u5faa\u73af\u3002</p>"},{"location":"documentation/flame/04-flamegraphs/#_3","title":"\u4e0b\u4e00\u4e2a","text":"<p>\u63a7\u5236\u5668</p>"},{"location":"documentation/flame/05-controls/","title":"\u63a7\u5236\u5668","text":"<p>' Clinic.js ' Flame UI \u63a7\u4ef6\u6709\u4e09\u4e2a\u4e3b\u8981\u90e8\u5206:</p> <ul> <li>Flamegraph controls: \u4e0e\u706b\u7130\u672c\u8eab\u76f8\u4e92\u4f5c\u7528</li> <li>Info Panel: \u6cbf\u7740\u9876\u90e8\uff0c\u5305\u542b\u5f53\u524d\u7a81\u51fa\u663e\u793a\u7684\u5757\u7684\u4fe1\u606f</li> <li>Options Menu: \u66f4\u9ad8\u7ea7\u7684\u63a7\u4ef6\u53ef\u4ece\u4fe1\u606f\u9762\u677f\u5c55\u5f00</li> </ul>"},{"location":"documentation/flame/05-controls/#_2","title":"\u706b\u7130\u56fe\u63a7\u4ef6","text":""},{"location":"documentation/flame/05-controls/#_3","title":"\u4e0e\u706b\u7130\u5757\u4ea4\u4e92","text":"<p>Hovering \u9f20\u6807\u505c\u7559\u5728\u4e00\u4e2a\u5757\u4e0a\uff0c\u5c06\u5728\u5c4f\u5e55\u9876\u90e8\u7684\u4fe1\u606f\u9762\u677f\u4e2d\u6682\u65f6\u663e\u793a\u6709\u5173\u8be5\u5757\u7684\u4fe1\u606f\u3002</p> <p>Clicking \u5c06\u9009\u62e9\u5757\uff0c\u4f7f\u4fe1\u606f\u9762\u677f\u6062\u590d\u5230\u8be5\u5757\uff0c\u5f53\u4f60\u4e0d\u518d\u60ac\u505c\u5728\u4efb\u4f55\u4e1c\u897f\u3002</p> <p>\u5982\u679c\u4f60\u53d1\u73b0\u4e86\u4e00\u4e2a\u770b\u8d77\u6765\u5f88\u6709\u8da3\u7684\u65b9\u5757\uff0c\u70b9\u51fb\u5b83\u662f\u5f88\u6709\u7528\u7684\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u5728\u5b83\u5468\u56f4\u5f98\u5f8a\uff0c\u63a2\u7d22\u5b83\u7684\u90bb\u5c45\uff0c\u800c\u4e0d\u4f1a\u5931\u53bb\u5b83\u3002</p>"},{"location":"documentation/flame/05-controls/#_4","title":"\u5de5\u5177\u63d0\u793a\u6309\u94ae","text":"<p>\u5728\u4e00\u4e2a\u5757\u4e0a\u70b9\u51fb\u4e00\u6b21\uff0c\u6216\u8005\u5728\u5b83\u4e0a\u9762\u60ac\u505c\u4e00\u4f1a\u513f\uff0c\u4e00\u4e2a\u5de5\u5177\u63d0\u793a\u51fa\u73b0\uff0c\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u6309\u94ae:</p> <ul> <li>Expand. \u5173\u4e8e\u6269\u5c55\u7279\u5b9a\u5757\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7[\u53c2\u89c1\u4e0b\u9762]((#expanding)\u7684\u3002</li> <li>Contract. \u5982\u679c\u8fd9\u662f\u60a8\u5df2\u7ecf\u5c55\u5f00\u7684\u5757\uff0c\u5b83\u5c06\u663e\u793a\u201cContract\u201d\u800c\u4e0d\u662f\u201cExpand\u201d\uff0c\u8fd9\u5c06\u5e26\u60a8\u56de\u5230\u4e3b\u89c6\u56fe\u3002</li> <li>Copy path. \u5c06\u5305\u542b\u6b64\u5757\u8868\u793a\u7684\u4ee3\u7801\u7684\u6587\u4ef6\u7684\u76f8\u5bf9\u6587\u4ef6\u8def\u5f84\u590d\u5236\u5230\u526a\u8d34\u677f\u3002   \u8fd9\u53ea\u51fa\u73b0\u5728\u88ab\u5206\u6790\u7684\u5e94\u7528\u7a0b\u5e8f(\u767d\u8272)\u6216\u5b83\u7684\u4f9d\u8d56\u9879(\u84dd\u8272)\u4e2d\u7684\u5757\u4e0a\u3002</li> <li>Open in browser. \u4ec5\u9002\u7528\u4e8e Node.js \u6838\u5fc3\u5757(\u7070\u8272)\u3002   \u5728\u4e00\u4e2a\u65b0\u7684\u6d4f\u89c8\u5668\u9009\u9879\u5361\u4e2d\uff0c\u6253\u5f00 GitHub \u9875\u9762\uff0c\u5176\u4e2d\u663e\u793a\u4e86\u8be5\u5757\u6240\u8868\u793a\u7684 Node.js \u51fd\u6570\u7684\u6e90\u4ee3\u7801\u3002   \u63a2\u7d22\u8fd9\u4e9b\u53ef\u80fd\u662f\u4e86\u89e3\u66f4\u591a Node.js\u201c\u5e95\u5c42\u201d\u5de5\u4f5c\u7684\u597d\u65b9\u6cd5\u3002</li> </ul>"},{"location":"documentation/flame/05-controls/#_5","title":"\u6269\u5927","text":"<p>\u5f53\u4e00\u4e2a\u5757\u88ab\u53cc\u51fb\uff0c\u6216\u8005\u5b83\u7684\u5de5\u5177\u63d0\u793a\u201c\u6269\u5c55\u201d\u6309\u94ae\u88ab\u4f7f\u7528\u65f6\uff0c\u5b83\u5c06\u6269\u5c55\u4ee5\u586b\u5145\u706b\u7130\u56fe\u7684\u6574\u4e2a\u5bbd\u5ea6\u3002 \u4e0b\u9762\u7684\u5757\u4e5f\u5c06\u6269\u5c55\u5e76\u586b\u5145\u6574\u4e2a\u5bbd\u5ea6\uff0c\u800c\u70b9\u51fb\u5757\u4e0a\u65b9\u7684\u5757\u5c06\u589e\u52a0\u5176\u6240\u5728\u5757\u7684\u6bd4\u4f8b\u3002 \u6269\u5c55\u4e00\u4e2a\u5757\u5b9e\u9645\u4e0a\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u706b\u7130\u56fe\uff0c\u5b83\u4ee3\u8868\u4e3b\u706b\u7130\u56fe\u7684\u4e00\u4e2a\u7279\u5b9a\u5206\u533a\u3002</p> <p>\u5df2\u6269\u5c55\u7684\u5757\u5728\u4e0b\u9762\u7528\u9634\u5f71\u6807\u8bb0\u3002 \u8fd9\u4e2a\u201c\u9634\u5f71\u201d\u4e0b\u9762\u7684\u6bcf\u4e2a\u5757\u53ef\u80fd\u6bd4\u5df2\u7ecf\u6269\u5c55\u5230\u6574\u4e2a\u5c4f\u5e55\u7684\u5757\u66f4\u5bbd(\u5728 CPU \u4e0a\u66f4\u957f)\u3002</p> <p>\u8981\u56de\u5230\u672a\u5c55\u5f00\u7684\u4e3b\u89c6\u56fe\uff0c\u4f60\u53ef\u4ee5\u70b9\u51fb\u80cc\u666f\uff0c\u70b9\u51fb\u5c4f\u5e55\u5e95\u90e8\u7684\u201c\u8fd4\u56de\u4e3b\u89c6\u56fe\u201d\uff0c \u53cc\u51fb\u5c55\u5f00\u7684\u6846\u67b6\uff0c\u6216\u8005\u70b9\u51fb\u5b83\u7684\u201c\u5951\u7ea6\u201d\u5de5\u5177\u63d0\u793a\u6309\u94ae\u3002</p>"},{"location":"documentation/flame/05-controls/#_6","title":"\u4fe1\u606f\u9762\u677f","text":"<p>\u5728\u4fe1\u606f\u9762\u677f\u4e2d\u6709\u4e94\u4e2a\u4e3b\u8981\u529f\u80fd:</p> <ul> <li>Stack bar: \u4e00\u4e2a\u7ec6\u6761\uff0c\u6309\u987a\u5e8f\u663e\u793a\u201c\u6700\u70ed\u201d\u7684\u5757</li> <li>Selection controls: \u8f7b\u5f39\u5230\u4e0b\u4e00\u4e2a\u6700\u70ed\u7684\uff0c\u4ee5\u524d\u7684\uff0c\u7b49\u7b49</li> <li>Code info: \u5f53\u524d\u9ad8\u4eae\u663e\u793a\u7684\u5757\u80cc\u540e\u7684\u529f\u80fd\u6765\u81ea\u54ea\u91cc</li> <li>Search box: \u7528\u4e8e\u901a\u8fc7\u540d\u79f0\u6216\u8def\u5f84\u67e5\u627e\u51fd\u6570</li> <li>Options Menu: \u66f4\u9ad8\u7ea7\u7684\u529f\u80fd\u3002\u8fd9\u4e2a\u9009\u9879\u83dc\u5355\u5728\u4e0b\u9762\u6709\u81ea\u5df1\u7684\u90e8\u5206</li> </ul>"},{"location":"documentation/flame/05-controls/#_7","title":"\u5806\u6808\u5427","text":"<p>\u6211\u4eec\u4e4b\u524d\u5728\u706b\u7130\u56fe\u9875\u9762\u4e2d\u89e3\u91ca\u8fc7\uff0c \u8003\u8651\u4e00\u4e2a\u51fd\u6570\u5728\u6808\u9876\u7684\u65f6\u95f4\u662f\u591a\u4e48\u6709\u7528\uff0c \u8fd9\u610f\u5473\u7740\u5f53 CPU \u5728\u8be5\u51fd\u6570\u4e2d\u6267\u884c\u4ee3\u7801\u65f6\uff0cNode.js \u4e8b\u4ef6\u5faa\u73af\u88ab\u963b\u585e; \u4ee5\u53ca\u8fd9\u662f\u5982\u4f55\u901a\u8fc7\u4e00\u4e2a\u5757\u7684\u66b4\u9732\u90e8\u5206\u7684\u989c\u8272\u7684\u4eae\u5ea6\u6216\u201c\u70ed\u201d\u6765\u8868\u793a\u7684\u3002</p> <p>\u8fd9\u4e2a\u67f1\u72b6\u56fe\u663e\u793a\u4e86\u6bcf\u4e2a\u5757\u7684\u5806\u6808\u9876\u90e8\u7684\u70ed\u91cf\uff0c\u6309\u7167\u70ed\u91cf\u7684\u987a\u5e8f\uff0c\u5373\u6309\u7167\u5757\u7684\u51fd\u6570\u963b\u585e\u4e8b\u4ef6\u5faa\u73af\u7684\u65f6\u95f4\u7684\u987a\u5e8f\u3002</p> <p>\u60a8\u53ef\u4ee5\u6cbf\u7740\u6b64\u6761\u4ece\u5de6\u5230\u53f3\u8fd0\u884c\u5149\u6807\uff0c\u4ee5\u67e5\u770b\u8fd9\u4e9b\u201c\u70ed\u201d\u529f\u80fd\u5728\u4e3b\u706b\u7130\u56fe\u4e0a\u7684\u4f4d\u7f6e\uff0c\u4e0e\u4e0a\u9762\u76f8\u540c\u7684\u4ea4\u4e92:\u60ac\u505c\u67e5\u770b\u4fe1\u606f\uff0c\u5355\u51fb\u9009\u62e9\u5e76\u663e\u793a\u5de5\u5177\u63d0\u793a\uff0c\u53cc\u51fb\u5c55\u5f00\u3002</p> <p>\u5f53\u7b2c\u4e00\u6b21\u6253\u5f00 Clinic.js Flame \u914d\u7f6e\u6587\u4ef6\u65f6\uff0c\u9ed8\u8ba4\u9009\u62e9\u6700\u5de6\u8fb9(\u6700\u70ed)\u7684\u5757\u3002</p>"},{"location":"documentation/flame/05-controls/#_8","title":"\u9009\u62e9\u63a7\u5236","text":"<p>\u8fd9\u4e9b\u6309\u94ae\u5141\u8bb8\u60a8\u8f7b\u677e\u5730\u4ece\u5f53\u524d\u9009\u62e9\u7684\u5757\u8df3\u8f6c\u5230\u5806\u6808\u680f\u663e\u793a\u7684\u70ed\u5ea6\u6392\u540d\u4e2d\u5b83\u7684\u5de6\u8fb9\u6216\u53f3\u8fb9\u7684\u5757\u3002</p> <p>\u4ece Clinic.js Flame \u706b\u7130\u56fe\u5f00\u59cb\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5730\u65b9\uff0c \u662f\u5faa\u73af\u4f7f\u7528\u201c\u4e0b\u4e00\u4e2a\u6700\u70ed\u201d\u6309\u94ae\uff0c\u5bf9\u4e8e\u5b83\u9009\u62e9\u7684\u6bcf\u4e2a\u5757\uff0c \u60f3\u60f3\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u51fd\u6570\u4f1a\u82b1\u8fd9\u4e48\u591a\u65f6\u95f4\u6d3b\u52a8\u3002 \u4f8b\u5982\uff0c\u5b83\u53ef\u80fd\u662f\u4e00\u4e2a\u9700\u8981\u4f18\u5316\u7684\u6162\u51fd\u6570\uff0c \u6216\u8005\u5b83\u53ef\u80fd\u662f\u4e00\u4e2a\u4f60\u77e5\u9053\u5f88\u5feb\u7684\u51fd\u6570\uff0c \u4f46\u662f\uff0c\u5f53\u60a8\u67e5\u770b\u706b\u7130\u56fe\u4e2d\u5b83\u4e0b\u9762\u7684\u5185\u5bb9\u65f6\uff0c\u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\u5b83\u88ab\u8c03\u7528\u4e86\u592a\u591a\u6b21(\u4f8b\u5982\uff0c\u5b83\u53ef\u80fd\u5728\u5d4c\u5957\u5faa\u73af\u4e2d)\u3002</p>"},{"location":"documentation/flame/05-controls/#_9","title":"\u4ee3\u7801\u4fe1\u606f","text":"<p>\u8fd9\u5c06\u4e3a\u60a8\u63d0\u4f9b\u6709\u5173\u5f53\u524d\u7a81\u51fa\u663e\u793a\u7684\u5757\u80cc\u540e\u4ee3\u7801\u7684\u66f4\u5b8c\u6574\u4fe1\u606f\u3002</p> <ul> <li>\u51fd\u6570\u540d(\u6216\u7b49\u4ef7\u7684)\u5728\u5de6\u8fb9\u3002\u533f\u540d\u51fd\u6570\u88ab\u6807\u8bb0\u4e3a' (Anonymous) '\u3002</li> <li>\u4e2d\u95f4\u7684\u6587\u4ef6\u8def\u5f84(\u6216\u540c\u7b49\u5185\u5bb9)\uff0c\u5305\u62ec\u884c\u53f7\u548c\u5217\u53f7(\u5982\u679c\u9002\u7528)\u3002</li> <li>Context. \u5b83\u544a\u8bc9\u4f60\u8fd9\u4e2a\u5757\u662f\u4ec0\u4e48\u7c7b\u522b(\u4f8b\u5982\uff0c\u4f9d\u8d56)\uff0c\u5982\u679c\u4f7f\u7528\u4e86\u67d0\u4e9b\u9ad8\u7ea7\u63a7\u4ef6\uff0c\u5b83\u53ef\u80fd\u5305\u62ec\u989d\u5916\u7684\u4fe1\u606f\u3002</li> </ul> <p></p>"},{"location":"documentation/flame/05-controls/#_10","title":"\u641c\u7d22\u6846","text":"<p>\u5982\u679c\u4f60\u60f3\u627e\u5230\u4e00\u4e9b\u7279\u5b9a\u7684\u6587\u4ef6\u6216\u51fd\u6570\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u8f93\u5165\u51fd\u6570\u540d\u3001\u6587\u4ef6\u8def\u5f84\u6216\u540c\u7b49\u5185\u5bb9\u7684\u4e00\u90e8\u5206\uff0c\u4efb\u4f55\u5339\u914d\u7684\u90fd\u5c06\u88ab\u9ad8\u4eae\u663e\u793a\uff0c\u4f7f\u7528\u4e0e\u6587\u672c\u548c\u8f6e\u5ed3\u76f8\u540c\u7684\u989c\u8272(\u767d\u8272\u6765\u81ea\u88ab\u5206\u6790\u5e94\u7528\u7a0b\u5e8f\u7684\u4ee3\u7801\uff0c\u84dd\u8272\u6765\u81ea\u4f9d\u8d56\u9879\uff0c\u7070\u8272\u6765\u81ea Node.js \u672c\u8eab)\u3002</p> <p>\u5982\u679c\u4f60\u5df2\u7ecf\u505a\u4e86\u5f88\u597d\u7684\u4f18\u5316\u64cd\u4f5c\uff0c\u4f60\u5c31\u4e0d\u80fd\u518d\u5728\u706b\u7130\u56fe\u4e0a\u627e\u5230\u5b83\u4e86\uff0c\u8fd9\u662f\u5f88\u6709\u7528\u7684!</p> <p></p> <p>\u5982\u679c\u4f60\u77e5\u9053\u5b58\u5728\u7684\u51fd\u6570\u5728\u4efb\u4f55\u5730\u65b9\u90fd\u627e\u4e0d\u5230\uff0c\u5373\u4f7f\u4f7f\u7528\u641c\u7d22\uff0c\u5b83\u53ef\u80fd\u5df2\u7ecf\u88ab V8 \u5185\u8054\u4e86:\u5728\u5173\u95ed\"Merge\u201d in the Options Menu\u540e\u518d\u8bd5\u7740\u641c\u7d22\u3002 \u6709\u5173\u5408\u5e76\u548c\u5185\u8054\u5757\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u9ad8\u7ea7\u63a7\u4ef6\u4e2d\u7684\u201c\u5408\u5e76\u548c\u53d6\u6d88\u5408\u5e76\u201d\u4e00\u8282\u3002</p> <p>\u5982\u679c\u5b83\u662f\u53ef\u80fd\u7684\u529f\u80fd\u662f\u5982\u6b64\u4e4b\u5feb\uff0c\u6216\u5728 CPU \u4e0a\u7684\u65f6\u95f4\u5982\u6b64\u4e4b\u5c11\uff0c\u5b83\u4ece\u6765\u6ca1\u6709\u5728 CPU \u4e0a\uff0c\u800c\u4e00\u4e2a\u6837\u672c\u6b63\u5728\u91c7\u53d6\uff0c\u5b83\u53ef\u80fd\u4f1a\u51fa\u73b0\uff0c\u5982\u679c\u4f60\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u914d\u7f6e\u6587\u4ef6\u66f4\u957f\u65f6\u95f4\u548c/\u6216\u66f4\u591a\u7684\u8fde\u63a5\u5728 Autocannon\u3002</p>"},{"location":"documentation/flame/05-controls/#_11","title":"\u9009\u9879\u83dc\u5355","text":"<p>\u70b9\u51fb\u4fe1\u606f\u9762\u677f\u53f3\u4fa7\u7684\u201c\u9009\u9879\u201d\u5c06\u6253\u5f00\u4e00\u4e2a\u5305\u542b\u66f4\u591a\u9ad8\u7ea7\u9009\u9879\u7684\u83dc\u5355\u3002</p>"},{"location":"documentation/flame/05-controls/#_12","title":"\u6309\u4ee3\u7801\u533a\u57df\u5212\u5206\u7684\u53ef\u89c1\u6027","text":"<p>\u8fd9\u4e9b\u5207\u6362\u6309\u94ae\u6839\u636e\u4ee3\u7801\u5728\u5e94\u7528\u7a0b\u5e8f\u6216 Node.js \u6846\u67b6\u4e2d\u7684\u4f4d\u7f6e\u663e\u793a(\u6253\u52fe)\u6216\u9690\u85cf(\u4e0d\u6253\u52fe)\u5757\u3002</p> <ul> <li>[Application name]: \u88ab\u5206\u6790\u7684\u4e3b\u5305\u5185\u7684\u4ee3\u7801\u3002\u9ed8\u8ba4\u662f\u53ef\u89c1\u7684\u3002</li> <li>Dependencies: ' node_modules '\u76ee\u5f55\u4e0b\u4f9d\u8d56\u9879\u4e2d\u7684\u4ee3\u7801\u3002\u9ed8\u8ba4\u662f\u53ef\u89c1\u7684\u3002</li> <li>Node JS: \u4ee3\u7801\u5728 Node.js \u6838\u5fc3\u3002\u9ed8\u8ba4\u662f\u53ef\u89c1\u7684\u3002</li> <li>V8:V8 JavaScript \u5f15\u64ce\u5185\u90e8\u7684\u51fd\u6570\u3002\u9ed8\u8ba4\u9690\u85cf\uff0c\u5efa\u8bae\u9ad8\u7ea7\u7528\u6237\u4f7f\u7528\u3002 More info</li> </ul>"},{"location":"documentation/flame/05-controls/#_13","title":"\u5148\u8fdb\u7684","text":"<ul> <li>Init: \u5141\u8bb8\u521d\u59cb\u5316\u51fd\u6570\u663e\u793a\uff0cFlame \u9ed8\u8ba4\u9690\u85cf\u3002 More info</li> <li>Merge: \u5141\u8bb8\u4e3a V8 \u4f18\u5316\u7684\u51fd\u6570\u663e\u793a\u4e0d\u540c\u7684\u5806\u6808\u3002 More info.</li> </ul>"},{"location":"documentation/flame/05-controls/#_14","title":"\u9996\u9009\u9879","text":"<ul> <li>Presentation mode: \u589e\u52a0\u6587\u672c\u5927\u5c0f\u548c\u989c\u8272\u5bf9\u6bd4\uff0c\u8fd9\u53ef\u80fd\u662f\u6709\u7528\u7684\uff0c\u5982\u679c Clinic.js \u706b\u7130\u662f\u5728\u6b21\u4f18\u6761\u4ef6\u4e0b\u5448\u73b0(\u4f8b\u5982\u5728\u4e00\u4e2a\u660e\u4eae\u7684\u623f\u95f4\u91cc\u7684\u6295\u5f71\u4eea\u4e0a)\u3002</li> </ul> <p>\u901a\u8fc7\u5c06\u201cPRESENTATION_MODE\u201d\u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\u4e3a\u201cTRUE\u201d\uff0c\u53ef\u4ee5\u5c06\u914d\u7f6e\u6587\u4ef6\u8bbe\u7f6e\u4e3a\u9ed8\u8ba4\u4ee5\u5448\u73b0\u6a21\u5f0f\u663e\u793a\u3002</p>"},{"location":"documentation/flame/05-controls/#_15","title":"\u4e0b\u4e00\u4e2a","text":"<p>\u4f18\u5316\u70ed\u51fd\u6570</p>"},{"location":"documentation/flame/06-optimizing-a-hot-function/","title":"\u4f18\u5316\u70ed\u51fd\u6570","text":"<p>\u201cClinic.js\u201d\u7684 Flame UI \u4e3a\u6211\u4eec\u6307\u660e\u4e86\u201c\u6700\u70ed\u95e8\u201d\u7684\u51fd\u6570\u3002 \u5176\u4e2d\u4e00\u4e2a\u975e\u5e38\u7a81\u51fa:' 1-server-with-slow-function.js '\u4e2d\u7684' payload '\u51fd\u6570\uff0c\u7b2c 15 \u884c\u3002</p> <p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u4e2a\u70ed\u95e8\u7684\u201c\u8d1f\u8f7d\u201d\u51fd\u6570\u662f\u7531\u7b2c 8 \u884c\u7b2c 14 \u5217\u7684\u201capp.get\u201d\u8c03\u7528\u7684\u3002</p> <p></p> <p>\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u4ece\u7b2c 8 \u884c\u5f00\u59cb\u7684\u51fd\u6570:</p> <pre><code>app.get(\"/\", (req, res) =&gt; {\nres.send(payload());\n});\n</code></pre> <p>\u8fd9\u4e2a\u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u80d6\u7bad\u5934\u51fd\u6570\uff0c\u5b83\u662f\u533f\u540d\u7684\u3002 \u5728\u6ca1\u6709\u540d\u79f0\u7684\u60c5\u51b5\u4e0b\uff0cFlame \u91c7\u6837\u5668\u5c06\u6b64\u51fd\u6570\u547d\u540d\u4e3a\u201capp.get\u201d\uff0c\u56e0\u4e3a\u5b83\u88ab\u4f20\u9012\u7ed9\u4e86\u201capp.get\u201d\u3002 \u5217\u53f7(14)\u6e05\u695a\u5730\u8868\u660e\uff0c\u6240\u8ba8\u8bba\u7684\u51fd\u6570\u662f\u80d6\u7bad\u5934\u51fd\u6570\u3002</p> <p>\u8fd9\u662f' / '\u7684\u8def\u7531\u5904\u7406\u7a0b\u5e8f\uff0c\u5b83\u5728\u6bcf\u6b21\u53d1\u51fa\u8bf7\u6c42\u65f6\u88ab\u8c03\u7528\u3002 \u5b83\u8c03\u7528' payload '\u51fd\u6570(\u6211\u4eec\u7684\u74f6\u9888)\uff0c\u7136\u540e\u5c06\u5176\u4f20\u9012\u7ed9' res.send '\u3002</p> <p>\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u7b2c 16 \u884c:</p> <pre><code>return function payload() {};\n</code></pre> <p>\u56e0\u4e3a\u6709\u4e00\u4e2a' return '\u8bed\u53e5\uff0c\u6240\u4ee5\u5fc5\u987b\u6709\u4e00\u4e2a\u5916\u90e8\u51fd\u6570\u3002\u8ba9\u6211\u4eec\u6765\u770b\u770b\u6574\u4e2a\u4e1c\u897f\uff0c\u5305\u62ec\u521b\u5efa' payload '\u51fd\u6570\u7684\u5916\u90e8\u51fd\u6570:</p> <pre><code>function initPayload(idSize = 20) {\nreturn function payload() {\nlet chars = \"\";\nlet n = idSize;\nconst date = Date.now();\nconst radix = 36;\nn *= n * idSize;\nwhile (n--) {\nconst num = date + n;\nchars += num.toString(radix).toUpperCase();\n}\nconst id = chars.slice(-idSize);\nreturn { date, id };\n};\n}\n</code></pre> <p>\u5728 initPayload \u8303\u56f4\u4e2d\u6709\u4e00\u4e2a\u53c2\u6570 idSize \u9ed8\u8ba4\u503c\u662f 20\u3002</p> <p>' payload '\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5e26\u6709' date '\u5b57\u6bb5\u548c' id '\u5b57\u6bb5\u7684\u5bf9\u8c61\u3002 \u65e5\u671f\u662f\u7528' date .now() '\u521b\u5efa\u7684\uff0c\u56e0\u6b64\u770b\u8d77\u6765\u6211\u4eec\u65e0\u6cd5\u5728\u90a3\u91cc\u8fdb\u884c\u592a\u591a\u4f18\u5316\u3002 \u8ba9\u6211\u4eec\u5173\u6ce8\u201cid\u201d\u662f\u5982\u4f55\u521b\u5efa\u7684\u3002</p> <p>\u53d8\u91cf' n '\u88ab\u8bbe\u7f6e\u4e3a' idSize '\uff0c\u4f46\u968f\u540e\u5c06\u5176\u81ea\u8eab\u4e58\u4ee5' idSize '\uff0c\u672c\u8d28\u4e0a\u662f n\u00b3\u3002 \u7136\u540e\uff0c' n '\u53d8\u91cf\u5728' while '\u5faa\u73af\u7684\u6bcf\u6b21\u8fed\u4ee3\u4e2d\u51cf\u5c11 1\u3002 ' while '\u5faa\u73af\u7684\u4e3b\u4f53\u662f\u5c06' date '\u65f6\u95f4\u6233\u548c' n '\u52a0\u5728\u4e00\u8d77\uff0c\u7136\u540e\u8c03\u7528' toString(36) ' (' radix '\u5e38\u91cf\u662f' 36 ')\uff0c\u8fd9\u5c06\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u6bcd\u6570\u5b57\u5b57\u7b26\u4e32(base36)\u3002 \u7136\u540e\u5c06 base36 \u5b57\u7b26\u4e32\u5927\u5199\u5e76\u6dfb\u52a0\u5230' chars '\u5b57\u7b26\u4e32\u4e2d\u3002 \u6700\u540e\uff0c\u4ece' chars '\u5b57\u7b26\u4e32\u4e2d\u53d6\u51fa\u957f\u5ea6\u4e0e' idSize '\u76f8\u5bf9\u5e94\u7684 a \u7247\u4ee5\u5f62\u6210' id '\u3002</p> <p>\u8fd9\u662f\u591a\u4e48\u5947\u602a\u548c\u8fc7\u5ea6\u8bbe\u8ba1\u7684\u521b\u5efa ID \u7684\u65b9\u5f0f\u554a\u3002\u80af\u5b9a\u6ca1\u6709\u4eba\u771f\u7684\u4f1a\u5199\u90a3\u6837\u7684\u4ee3\u7801\u5427? (\u65c1\u767d:\u201c\u662f\u7684\u3002\u201d)</p> <p>\u8ba9\u6211\u4eec\u6539\u8fdb\u7b97\u6cd5\uff0c\u4f46\u4fdd\u6301 id \u7684\u57fa\u672c\u7279\u6027:</p> <ul> <li>\u5fc5\u987b\u662f\u5b57\u6bcd\u6570\u5b57\u5b57\u7b26\u4e32</li> <li>\u5b83\u5fc5\u987b\u901a\u8fc7' idSize '\u8fdb\u884c\u914d\u7f6e</li> <li>\u5b83\u7684\u957f\u5ea6\u4e0d\u4f1a\u5c11\u4e8e 6 \u4e2a\u5b57\u7b26</li> </ul> <p>' initPayload '\u51fd\u6570\u7684\u4e00\u4e2a\u66f4\u4f18\u7248\u672c\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684:</p> <pre><code>function initPayload(idSize = 20) {\nif (idSize &lt; 6) throw Error(\"idSize must be greater than 5\");\nconst max = 2147483647;\nvar count = 0;\nreturn function payload() {\ncount = (count + 1) % max;\nconst date = Date.now();\nconst chars = count.toString(36).toUpperCase();\nconst id = \"0\".repeat(idSize - chars.length) + chars;\nreturn { date, id };\n};\n}\n</code></pre> <p>The <code>max</code> number is the largest 32bit integer (2\u00b3\u00b9 - 1) we use this to cycle count back round to 0 when it reaches 2\u00b3\u00b9. This isn't strictly necessary for speed in our case, but Node's JavaScript engine (V8) is optimized for the numbers in 32bit range (since most numbers in practice tend to be). Additionally, when converted to base36 is (2\u00b3\u00b9 - 1) 6 characters, which means we don't have use a minimum length offset to enforce <code>idSize</code>.</p> <p>Each time the <code>payload</code> function is called, <code>count</code> is increase by one. We turn <code>count</code> into a base36 string, and upper case it. Then we pad the beginning of the string with the necessary amount of zeros (which is valid base36) to create an <code>id</code> with a length corresponding to <code>idSize</code>.</p>"},{"location":"documentation/flame/06-optimizing-a-hot-function/#_2","title":"\u6d4b\u8bd5\u4f18\u5316\u540e\u7684\u51fd\u6570","text":"<p>The optimal <code>payload</code> function is in <code>2-server-with-optimized-function.js</code>. Let's profile this server with Flame to assess the result:</p> <pre><code>clinic flame --on-port 'autocannon localhost:$PORT' -- node 2-server-with-optimized-function.js\n</code></pre> <p>This should generate something like the following:</p> <p></p> <p>This immediately looks healthier - it's no longer dominated by just one function, and as a result we have a range of shades of yellow and orange.</p> <p>Notice the <code>payload</code> function is nowhere to be seen. This is because the function was inlined into its parent: the anonymous lamda function labelled as <code>app.get</code>. There is more information on inlining and merging on the Advanced Controls page.</p> <p>Using <code>autocannon</code> we can show that our optimization has lead to our server being over 50 times faster (220 req/s vs 11640 req/s).</p> <p></p>"},{"location":"documentation/flame/06-optimizing-a-hot-function/#_3","title":"\u4e0b\u4e00\u4e2a","text":"<p>Reducing the graph size</p>"},{"location":"documentation/flame/07-reducing-the-graph-size/","title":"\u51cf\u5c0f\u56fe\u7684\u5927\u5c0f","text":"<p>\u867d\u7136\u706b\u7130\u56fe\u4e3b\u8981\u901a\u8fc7\u53ef\u89c6\u5316\u6808\u9876\u5ea6\u91cf\u6765\u7a81\u51fa\u74f6\u9888\uff0c\u4f46\u5b83\u4eec\u4e5f\u53ef\u4ee5\u7528\u4e8e\u4e86\u89e3\u5e94\u7528\u7a0b\u5e8f\u7684\u590d\u6742\u6027\u3002</p> <p>\u5982\u679c\u4e00\u4e2a\u706b\u7130\u56fe\u6709\u5f88\u591a\u9ad8\u4e0a\u5347\u5806\u6808\uff0c\u8fd9\u4e5f\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u74f6\u9888\u3002 \u5982\u679c\u6211\u4eec\u80fd\u627e\u5230\u51cf\u5c11\u56fe\u5927\u5c0f\u7684\u65b9\u6cd5\uff0c\u4e5f\u8bb8\u662f\u901a\u8fc7\u5220\u9664\u4e0d\u5fc5\u8981\u7684\u5c42\uff0c\u8fd9\u4e5f\u53ef\u4ee5\u63d0\u9ad8\u5e94\u7528\u7a0b\u5e8f\u7684\u6027\u80fd\u3002</p> <p>\u4e00\u4e2a\u53ef\u80fd\u5bb9\u6613\u5b9e\u73b0\u7684\u76ee\u6807\u662f\u7528\u66f4\u7b80\u5355\u6216\u66f4\u667a\u80fd\u7684\u66ff\u4ee3\u65b9\u6848\u66ff\u6362\u5e93\uff0c\u8fd9\u4e9b\u66ff\u4ee3\u65b9\u6848\u53ef\u4ee5\u5728\u6700\u70ed\u95e8\u7684\u8def\u5f84\u4e0a\u521b\u5efa\u548c\u8c03\u7528\u66f4\u5c11\u7684\u51fd\u6570\u3002</p> <p>\u8ba9\u6211\u4eec\u6765\u770b\u770b\u6211\u4eec\u5df2\u7ecf\u4e3a' 2-server-with-optimized-function.js '\u751f\u6210\u7684\u706b\u7130\u56fe:</p> <p></p> <p>\u5728' 3-server with-reduced-call-graph.js '\u4e2d\uff0c\u6211\u4eec\u5c06 web \u6846\u67b6\u4ece Express \u6539\u4e3afasttify\u3002</p> <p>\u8ba9\u6211\u4eec\u4e3a' 3-server-with-reduced-call-graph.js '\u751f\u6210\u4e00\u4e2a\u706b\u7130\u56fe:</p> <pre><code>clinic flame --on-port 'autocannon localhost:$PORT' -- node 3-server-with-reduced-call-graph.js\n</code></pre> <p>\u8ba9\u6211\u4eec\u6765\u770b\u770b\u6700\u7ec8\u7684\u706b\u7130\u56fe:</p> <p></p> <p>\u8fd9\u663e\u7136\u66f4\u7b80\u5355\uff0c\u84dd\u8272\u66f4\u5c11\u610f\u5473\u7740\u4f9d\u8d56\u9879\u4e2d\u7684\u6d3b\u52a8\u66f4\u5c11\u3002 \u53f3\u8fb9\u6709\u4e00\u4e2a\u84dd\u8272\u7684\u9ad8\u67f1\uff0c\u4f46\u5b83\u5f88\u7ec6\uff0c\u56e0\u6b64\u8fd9\u91cc\u5f88\u590d\u6742\uff0c\u4f46\u901f\u5ea6\u5f88\u5feb\u3002 \u7136\u800c\uff0c\u5728' handlerrequest '\u4e0b\u6709\u4e00\u4e9b\u70ed\u5e27\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u80fd\u8fd8\u53ef\u4ee5\u505a\u66f4\u591a\u7684\u4e8b\u60c5\u3002</p> <p>\u7136\u800c\uff0c\u9996\u5148\uff0c\u6211\u4eec\u5fc5\u987b\u786e\u8ba4\u4e1a\u7ee9\u786e\u5b9e\u6709\u6240\u6539\u5584\u3002 \u51cf\u5c11\u51fd\u6570\u8c03\u7528\u548c\u590d\u6742\u6027\u5e76\u4e0d\u603b\u80fd\u5e26\u6765\u66f4\u5feb\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 autocannon \u6765\u6d4b\u91cf' 2-server-with-optimized-function.js '\u548c' 3-server-with-reduced-call-graph.js '\u4e4b\u95f4\u7684\u5dee\u5f02:</p> <p></p> <p>\u8fd9\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u8fdb\u6b65\u3002 \u901a\u8fc7\u5207\u6362\u5230\u4e00\u4e2a\u4e13\u6ce8\u4e8e\u964d\u4f4e\u51fd\u6570\u56fe\u590d\u6742\u6027\u7684\u6846\u67b6\uff0c\u6027\u80fd\u5f97\u5230\u4e86\u663e\u8457\u63d0\u9ad8\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u5904\u7406\u7684\u8bf7\u6c42\u6570\u91cf\u51e0\u4e4e\u662f\u539f\u6765\u7684\u4e24\u500d\u3002</p>"},{"location":"documentation/flame/07-reducing-the-graph-size/#_2","title":"\u4e0b\u4e00\u4e2a","text":"<p>Advanced analysis</p>"},{"location":"documentation/flame/08-advanced-analysis/","title":"\u5148\u8fdb\u7684\u5206\u6790","text":"<p>\u5728\u6211\u4eec\u6700\u65b0\u7684\u706b\u7130\u56fe\u4e2d\uff0c\u6211\u4eec\u4ecd\u7136\u6709\u4e00\u4e9b\u70ed\u5757:</p> <p></p> <p>\u6700\u70ed\u95e8\u7684\u5757\u90fd\u6ca1\u6709\u5f15\u7528\u6211\u4eec\u7684\u4efb\u4f55\u4ee3\u7801\uff0c\u4f46\u662f\u8ba9\u6211\u4eec\u82b1\u4e00\u5206\u949f\u601d\u8003\u4e00\u4e0b\u53d1\u751f\u4e86\u4ec0\u4e48\u3002</p> <p>\u6700\u70ed\u7684\u662f<code>_stream_writable.js</code>\u4e2d\u7684' clearBuffer '\u3002 \u8fd9\u662f Node \u6838\u5fc3\u7684\u4e00\u90e8\u5206\u3002 \u7531\u4e8e\u8fd9\u91cc\u7684\u76ee\u6807\u4e0d\u662f\u5f00\u59cb\u4f18\u5316 Node \u6838\u5fc3\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u4e0b\u4e00\u4e2a\u6700\u70ed\u95e8\u7684\u5757:' handleRequest '\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u5c06' handleRequest '\u5757\u5c55\u5f00\u5982\u4e0b\u6240\u793a:</p> <p></p> <p>\u770b\u770b\u8fd9\u4e2a\u5b50\u89c6\u56fe\u4e2d\u6700\u70ed\u95e8\u7684\u4e09\u4e2a\u51fd\u6570:</p> <ol> <li>Node.js \u7684' clearBuffer '\u662f\u7b2c\u4e00\u4e2a\uff0c\u5360\u4e86' onSendEnd '\u5185\u90e8\u82b1\u8d39\u7684\u5927\u90e8\u5206\u65f6\u95f4\u3002\u5982\u524d\u6240\u8ff0\uff0c\u5bf9\u5176\u8fdb\u884c\u4f18\u5316\u53ef\u80fd\u5f88\u56f0\u96be\u3002</li> <li>\u7b2c\u4e8c\u70ed\u95e8\u7684\u662f fasttify \u51fd\u6570' handleRequest '\uff0c\u5b83\u6709\u8bb8\u591a\u5b50\u51fd\u6570\uff0c\u56e0\u6b64\u663e\u7136\u975e\u5e38\u590d\u6742\u3002</li> <li>\u7b2c\u4e09\u4e2a\u662f\u6211\u4eec\u81ea\u5df1\u7684\u201c\u6709\u6548\u8f7d\u8377\u201d\u529f\u80fd\uff0c\u4f46\u6211\u4eec\u5df2\u7ecf\u5bf9\u5176\u8fdb\u884c\u4e86\u4f18\u5316\u3002</li> </ol> <p>\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u5728 handleRequest \u91cc\u9762\u82b1\u5f88\u957f\u65f6\u95f4? \u5982\u679c\u6211\u4eec\u5355\u51fb copy path \u67e5\u770b Fastify \u4ee3\u7801\uff0c\u6ca1\u6709\u4ec0\u4e48\u660e\u663e\u7684\u9519\u8bef\uff0c\u800c\u4e14\u6211\u4eec\u77e5\u9053 Fastify \u5728\u6027\u80fd\u65b9\u9762\u8fdb\u884c\u4e86\u5f88\u597d\u7684\u4f18\u5316\u3002</p> <p>\u4e5f\u8bb8\u662f\u5c11\u4e86\u4ec0\u4e48?\u8ba9\u6211\u4eec\u6253\u5f00 Options \u83dc\u5355\u5e76\u52fe\u9009\u672a\u52fe\u9009\u7684\u201cV8\u201d\u6309\u94ae\uff0c\u663e\u793a V8 JavaScript \u5f15\u64ce\u5185\u90e8\u901a\u5e38\u9690\u85cf\u7684\u64cd\u4f5c:</p> <p></p> <p>\u95f4\u9699\u51e0\u4e4e\u5b8c\u5168\u6d88\u5931\uff0c\u51fa\u73b0\u4e00\u4e2a\u65b0\u7684\u5757(\u5728\u4e0a\u9762\u7684\u622a\u56fe\u4e2d\u9009\u62e9)\uff0c\u5f00\u59cb' T v8::internal::Builtin_JsonStringify '\u3002 \u8fd9\u610f\u5473\u7740\u5b83\u6307\u7684\u662f V8 \u5185\u90e8\u7684\u4e00\u4e2a c++\u51fd\u6570\uff0c\u540d\u4e3a\u201cBuiltin_JsonStringify\u201d\u3002\u663e\u7136\uff0c\u8fd9\u4e0e' JSON.stringify() '\u6709\u5173\u3002</p> <p>\u503c\u5f97\u77e5\u9053\u7684\u662f\uff0c\u6211\u4eec\u719f\u6089\u7684 JavaScript \u5305\u88c5\u5668' JSON.stringify() '\u548c' JSON.parse() '\u5e76\u6ca1\u6709\u88ab V8 \u76f4\u63a5\u91c7\u6837\uff0c\u800c\u662f\u76f4\u63a5\u8df3\u8fc7\u5e95\u5c42\u7684 c++\u5b9e\u73b0\u3002</p> <p>\u5c55\u5f00\u5b83\uff0c\u6211\u4eec\u770b\u5230 V8 \u5728\u5c1d\u8bd5\u5b57\u7b26\u4e32\u5316 JSON \u65f6\u9700\u8981\u505a\u5f88\u591a\u5f88\u591a\u7684\u6b65\u9aa4\u3002</p> <p></p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u5173\u6ce8\u8c03\u7528\u8bb8\u591a\u5fae\u4efb\u52a1\u7684\u4f4e\u6548\u7236\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u5173\u6ce8\u4e00\u4e2a\u201c\u70ed\u95e8\u201d\u51fd\u6570\u3002 \u6bcf\u4e00\u4e2a\u770b\u8d77\u6765\u90fd\u5f88\u5feb\u2014\u2014\u95ee\u9898\u662f\uff0c\u5b83\u4eec\u52a0\u8d77\u6765\u8981\u82b1\u5f88\u591a\u65f6\u95f4\u3002</p> <p>\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u4f1a\u51fa\u73b0 JSON \u5b57\u7b26\u4e32\u5316?\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u53d1\u9001\u4e00\u4e2a\u5bf9\u8c61\uff0cExpress \u548c fasttify \u90fd\u4f1a\u81ea\u52a8\u5e8f\u5217\u5316\u4f20\u9012\u7ed9\u5b83\u4eec\u7684 send \u65b9\u6cd5\u7684\u5bf9\u8c61\u3002</p> <p>\u5f53\u6211\u4eec\u5173\u95ed\u5185\u8054\u65f6\uff0c\u8fd9\u4e2a\u74f6\u9888\u53d8\u5f97\u66f4\u52a0\u6e05\u6670\u3002</p> <p>\u8ba9\u6211\u4eec\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4:</p> <pre><code> clinic flame --on-port 'autocannon localhost:$PORT' -- node --no-turbo-inlining 3-server-with-reduced-call-graph.js\n</code></pre> <p>\u8fd9\u5c06\u4ea7\u751f\u7c7b\u4f3c\u4ee5\u4e0b\u7684\u706b\u7130\u56fe:</p> <p></p> <p>\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u65b0\u7684\u7b2c\u4e8c\u70ed\u95e8\u7684\u51fd\u6570(\u4ec5\u6b21\u4e8e Node \u7684\u6838\u5fc3\u51fd\u6570)\u2014\u2014\u201cserialize\u201d\u3002 \u7531\u4e8e\u88ab V8 \u5185\u8054\uff0c\u8fd9\u5728\u4e4b\u524d\u662f\u9690\u85cf\u7684\u3002</p> <p>\u7531\u4e8e\u8fd9\u4e9b\u51fd\u6570\u90fd\u6ca1\u6709\u5185\u8054\uff0c\u56e0\u6b64\u201c\u5e8f\u5217\u5316\u201d\u51fd\u6570\u6210\u4e3a\u74f6\u9888\u7684\u60c5\u51b5\u53d8\u5f97\u66f4\u52a0\u660e\u663e\u3002 \u7136\u800c\uff0c\u5185\u8054\u70ed\u5757\u66f4\u591a\u5730\u51fa\u73b0\u5728\u5806\u6808\u7684\u9876\u90e8\uff0c\u56e0\u4e3a\u5b83\u4eec\u4ee3\u8868\u4e86\u5176\u4ed6\u51e0\u4e2a\u4e5f\u88ab\u5185\u8054\u5230\u5b83\u4eec\u4e2d\u7684\u51fd\u6570\u3002</p> <p>' 4-server-with-manual- serialize .js '\u5c06' payload '\u51fd\u6570\u4e2d\u7684\u7b2c 23 \u884c\u4ece' return {date, id} '\u66f4\u6539\u4e3a:</p> <pre><code>return `{\"date\": ${date}, \"id\": \"${id}\"}`;\n</code></pre> <p>\u8fd9\u91cc\u5e94\u8be5\u6307\u51fa\uff0c\u8fd9\u79cd\u6280\u672f\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\u53ef\u80fd\u662f\u4e0d\u5408\u9002\u7684\uff0c\u4f8b\u5982\uff0c\u5728\u8f6c\u4e49\u8f93\u5165\u5bf9\u5b89\u5168\u6027\u81f3\u5173\u91cd\u8981\u7684\u60c5\u51b5\u4e0b\u3002 \u624b\u52a8\u5e8f\u5217\u5316\u7684\u53e6\u4e00\u79cd\u9009\u62e9\u4ecd\u7136\u6bd4\u4f7f\u7528' JSON.stringify '\u66f4\u5feb\uff0c\u90a3\u5c31\u662f\u4f7f\u7528fast-json-stringify\u8fdb\u884c\u57fa\u4e8e\u6a21\u5f0f\u7684\u5e8f\u5217\u5316\u3002 Fastify web \u6846\u67b6\u4e5f\u9ed8\u8ba4\u652f\u6301\u57fa\u4e8e\u6a21\u5f0f\u7684\u5e8f\u5217\u5316\uff0c\u53c2\u89c1Fastify \u7684\u5e8f\u5217\u5316\u6587\u6863\u3002</p> <p>\u8ba9\u6211\u4eec\u8fd0\u884c Clinic.js Flame \u4e3a' 4-server-with-manual-serialization.js '\u521b\u5efa\u4e00\u4e2a\u706b\u7130\u56fe:</p> <pre><code>clinic flame --on-port 'autocannon localhost:$PORT' -- node 4-server-with-manual-serialization.js\n</code></pre> <p>\u8fd9\u5e94\u8be5\u7ed9\u51fa\u5982\u4e0b\u7ed3\u679c:</p> <p></p> <p>\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6700\u70ed\u7684\u5757\u662f\u4e00\u4e2a Node \u6838\u5fc3\u51fd\u6570\uff0c' Socket._writeGeneric '\uff0c\u5b83\u88ab' clearBuffer '\u8c03\u7528\u3002 \u8fd9\u548c\u4ee5\u524d\u4e00\u6837\u662f Node \u6838\u5fc3\u74f6\u9888\uff0c\u53ea\u662f\u5728\u8fd9\u4e2a\u91c7\u6837\u671f\u95f4 V8 \u5f15\u64ce\u6ca1\u6709\u5185\u8054 Socket\u3002_writeGeneric '\u8f6c\u6362\u4e3a' clearBuffer '\u3002</p> <p>\u8ba9\u6211\u4eec\u4f7f\u7528\u201cautocannon\u201d\u6765\u786e\u5b9a\u8fd9\u5bf9\u670d\u52a1\u5668\u6027\u80fd\u7684\u5f71\u54cd:</p> <p></p> <p>\u6211\u4eec\u53c8\u5b9e\u73b0\u4e86\u5927\u7ea6 10%\u7684\u6539\u8fdb\u3002</p> <p>\u6b64\u65f6\uff0c\u5e94\u7528\u7a0b\u5e8f\u7684\u8fdb\u4e00\u6b65\u4f18\u5316\u53d8\u5f97\u8d8a\u6765\u8d8a\u5177\u6709\u6311\u6218\u6027\uff0c\u56e0\u4e3a Node \u6838\u5fc3\u4e2d\u7684\u529f\u80fd\u5df2\u7ecf\u6210\u4e3a\u4e3b\u8981\u74f6\u9888\u3002 \u5982\u679c\u6211\u4eec\u613f\u610f\u6539\u53d8\u201cid\u201d\u5b57\u6bb5\u7684\u7ea6\u675f\u6761\u4ef6\uff0c\u90a3\u4e48\u8fd8\u53ef\u4ee5\u5728\u8fd9\u91cc\u6216\u90a3\u91cc\u6324\u51fa\u66f4\u591a\u7684\u767e\u5206\u6bd4\u3002</p> <p>\u4e0d\u8fc7\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u7684\u5927\u90e8\u5206\u5de5\u4f5c\u5df2\u7ecf\u5b8c\u6210\u4e86\u3002</p>"},{"location":"documentation/flame/08-advanced-analysis/#_2","title":"\u4e0b\u4e00\u4e2a","text":"<p>\u6f14\u7ec3\u5df2\u7ecf\u5b8c\u6210\u3002 \u606d\u559c\u4f60!\u73b0\u5728\u4f60\u5e94\u8be5\u53ef\u4ee5\u4f7f\u7528 Clinic.js Flame \u6765\u89e3\u51b3\u5e38\u89c1\u7684\u6027\u80fd\u95ee\u9898\u4e86\u3002</p> <p>\u60a8\u4e5f\u53ef\u4ee5\u9009\u62e9\u7ee7\u7eed\u9605\u8bfb\u6709\u5173 Flame \u7684\u66f4\u591a\u9ad8\u7ea7\u63a7\u5236.</p>"},{"location":"documentation/flame/09-advanced-controls/","title":"\u5148\u8fdb\u7684\u63a7\u5236","text":"<p>This section provides further reference information on some of Clinic.js Flame's advanced features.</p>"},{"location":"documentation/flame/09-advanced-controls/#init","title":"Init","text":"<p>Clinic.js Flame by default hides various initializaton functions. Filtering out these frames reduces generally redundant initialization noise.</p> <p>They include:</p> <ul> <li>Internal module system functions which are repeated frequently as the dependency tree   is loaded (such as <code>require()</code>)</li> <li>Functions relating to Clinic.js Flame's own data capture</li> <li>Other initialization functions</li> </ul> <p>An option in the \"Advanced\" section of the Options Menu allows these to be shown.</p> <p>When shown, Init blocks are presented like all other blocks, and will be shown or hidden according to the options selected in \"Visibility by code area\". The only differences is that when shown in the Info Panel, the context section on the right states \"In initialization process\".</p>"},{"location":"documentation/flame/09-advanced-controls/#merging-and-unmerging","title":"Merging and unmerging","text":"<p>V8 may apply automatic optimizations to some frequently-run code, creating optimized versions of those functions. At an internal JavaScript engine level, optimized and unoptimized functions are separate entities.</p>"},{"location":"documentation/flame/09-advanced-controls/#optimized-and-unoptimized-code","title":"Optimized and unoptimized code","text":"<p>By default, Clinic.js Flame merges all Optimized and Unoptimized functions, and represents them as single blocks. It also merges all inlinable functions in to the calling functions that they are later inlined into. This creates a simplified graph where stacks only diverge based code logic.</p> <p>Unticking \"Merge\" in the \"Advanced\" section of the Options Menu separates Optimized and Unoptimized functions, showing them as seperate blocks and seperate stacks.</p> <p>This is the unmerged view of the flamegraph we created for Optimizing A Hot Function. Note how <code>app.get</code> (among others) forks into two stacks. One is the original unoptimized function, the other is the optimized version.</p> <p></p> <p>The Info Panel shows the highlighted block's optimization status, in the context section on the right. For all JavaScript blocks, this will say either \"Unoptimized\" or \"Optimized\". If the block is inlined by V8, it will also say \"Inlinable\".</p> <p></p>"},{"location":"documentation/flame/09-advanced-controls/#show-optimization-status","title":"Show optimization status","text":"<p>With \"Merge\" unticked, there is another way to see which blocks are Optimized or Unoptimized. Another option, \"Show optimization status\", becomes available when \"Merge\" is unticked. If this is ticked, the text and outline colours of blocks are changed, along with the key at the bottom right of the flamegraph, to show:</p> <ul> <li>Unoptimized blocks in white</li> <li>Optimized blocks in grey</li> <li>Blocks where optimization is not relevant because they don't represent JavaScript in blue</li> </ul> <p>Inlinable functions can be found by typing \"inlinable\" into the search box while \"Merge\" is unticked.</p> <p></p> <p>For example, in the above flamegraph (the one we generated while Optimizing A Hot Function), we can see more easily that <code>app.get</code> forks into an optimized and unoptimized branch, and in the optimized branch, <code>payload</code> (selected) is flagged as \"Inlinable\".</p> <p>This is why, when we looked at that flamegraph in the default merged view, it was absent. It was inlined into its parent function, the optimized version of <code>app.get</code>.</p>"},{"location":"documentation/flame/09-advanced-controls/#v8","title":"V8","text":"<p>In addition to showing functions from the Node.js framework, Clinic.js Flame can be set to show functions from within the V8 JavaScript engine, by ticking the \"V8\" checkbox in the \"Visibility by code area\" section of the Options Menu.</p> <p>This often adds a significant amount of complexity to the flamegraph, much of which may not be wanted. Flame therefore allows users to expand the V8 options and filter specific types of V8 function:</p>"},{"location":"documentation/flame/09-advanced-controls/#v8-native","title":"V8 Native","text":"<p>These are native JavaScript functions that are compiled into V8.</p> <p>This would include any native prototype methods (<code>Array.prototype.join</code> for instance), and any functions that aren't publicly exposed but are used internally by V8 (<code>InnerArrayJoin</code> for instance).</p> <p>In addition, evaluated functions (either code run with <code>eval</code> or created with <code>Function</code>) will also appear as native frames, with the file path shown as <code>[eval]</code>.</p>"},{"location":"documentation/flame/09-advanced-controls/#v8-runtime","title":"V8 Runtime","text":"<p>These are C++ frames pertaining to the runtime operations of V8's implementation of JavaScript. Examples include (depending on V8 version) <code>StringEqual</code> and <code>ObjectSetPrototypeOf</code>.</p> <p>Tags can include <code>[CODE:LoadGlobalIC]</code>, <code>[CODE:Handler]</code>, <code>[CODE:CallIC]</code>, <code>[CODE:LoadIC]</code>, <code>[CODE:StoreIC]</code>, <code>[CODE:Builtin]</code> , <code>[CODE:BytecodeHandler]</code>, <code>[CODE:Builtin]</code> , <code>[CODE:Stub]</code>.</p>"},{"location":"documentation/flame/09-advanced-controls/#v8-c","title":"V8 C++","text":"<p>These are C++ frames that are called by the V8 layer, not including C++ frames that may be called in Node, Libuv or third party modules.</p> <p>These frames can include the tags <code>[CPP]</code> and <code>[SHARED_LIB]</code>.</p>"},{"location":"documentation/flame/09-advanced-controls/#regexp","title":"RegExp","text":"<p>RegExp stands for Regular Expressions. These are also captured as \"frames\". In this case the regular expression notation fills in as the \"function name\" portion of the block label. This can be useful in identifying slow regular expressions (in particular exponential time regular expressions).</p> <p>These will have the tag <code>[CODE:RegExp]</code>.</p>"},{"location":"documentation/heapprofiler/","title":"\u5806\u5206\u6790\u5668","text":"<p>\u5982\u679c\u4f60\u6b63\u5728\u5bfb\u627e\u5feb\u901f\u5f00\u59cb\u7406\u89e3\u5185\u5b58\u5206\u6790\u548c\u5b66\u4e60\u5982\u4f55\u4f18\u5316 Node.js \u4ee3\u7801\uff0c\u90a3\u4e48\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5f00\u59cb\u3002</p> <ol> <li>\u914d\u7f6e</li> <li>\u51c6\u5907</li> <li>\u9996\u5148\u5206\u6790</li> <li>\u706b\u7130\u56fe</li> <li>\u63a7\u5236\u5668</li> </ol>"},{"location":"documentation/heapprofiler/01-setup/","title":"\u8bbe\u7f6e","text":"<p>\u5806\u5206\u6790\u5668\u662f Clinic.js \u5de5\u5177\u5957\u88c5\u7684\u4e00\u90e8\u5206\u3002 \u8981\u5b89\u88c5\u5806\u5206\u6790\u5668\uff0c\u53ea\u9700\u50cf\u8fd9\u6837\u5b89\u88c5 Clinic.js:</p> <pre><code>npm install -g clinic\n</code></pre> <p>\u5728\u5b89\u88c5\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd0\u884c\u5e26\u6709\u201c\u2014\u2014help\u201d\u6807\u5fd7\u7684\u201cclinic HeapProfiler\u201d\u547d\u4ee4\u6765\u68c0\u67e5 HeapProfiler \u662f\u5426\u5df2\u7ecf\u5b89\u88c5\u3002</p> <pre><code>clinic heapprofiler --help\n</code></pre> <p>\u5b83\u5e94\u8be5\u8f93\u51fa\u7c7b\u4f3c\u4e0b\u9762\u7684\u5185\u5bb9:</p> <pre><code>Clinic.js Heap Profiler - v3.0.0\n\nclinic heapprofiler helps you find memory leaks\nby creating a flamegraph visualization that assists in identifying\nfunction calls that may be leaking memory.\n\nTo run clinic heapprofiler\n\n  clinic heapprofiler -- node server.js\n\nOnce you exit (Ctrl-C) the process, your report will open in a browser window. You can disable this behavior:\n\n  clinic heapprofiler --open=false -- node server.js\n\nIf profiling on a server, it can be useful to only do data collection:\n\n  clinic heapprofiler --collect-only -- node server.js\n\nYou can then transfer the data and visualize it locally:\n\n  clinic heapprofiler --visualize-only PID.clinic.heapprofile\n\nYou can use the --autocannon flag to simulate load on your server.\n--autocannon accepts configuration for autocannon using \"subarg\" syntax:\n\n  clinic heapprofiler --autocannon [ -m POST /api/example ] -- node server.js\n\nWhen configuring --autocannon, the $PORT environment variable contains the\nport your server is listening on:\n\n  clinic heapprofiler --autocannon [ -m POST 'http://localhost:$PORT/?\\$page=1' ] -- node server.js\n\nNote that dollar signs ($) appearing in the URL must be escaped, else they\nwill be treated as environment variables as well.\n\nFlags\n-h | --help                Display Help\n-v | --version             Display Version\n--collect-only             Do not process data on termination\n--visualize-only datapath  Build or rebuild visualization from data\n--on-port                  Run a script when the server starts listening on a port.\n--autocannon               Run the autocannon benchmarking tool when the server starts listening on a port.\n--open                     Boolean to enable or disable your report opening in your web browser.\n--dest                     Destination for the collected data (default .clinic/).\n</code></pre>"},{"location":"documentation/heapprofiler/01-setup/#_2","title":"\u4e0b\u4e00\u4e2a","text":"<p>\u51c6\u5907</p>"},{"location":"documentation/heapprofiler/02-getting-ready/","title":"\u51c6\u5907","text":"<p>\u4e00\u65e6\u6211\u4eec\u5b89\u88c5\u4e86\u201cclinic\u201d\u5e76\u9a8c\u8bc1\u4e86\u201cclinic heapprofiler\u201d\u7684\u529f\u80fd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5206\u6790\u5e94\u7528\u7a0b\u5e8f\u4e86\u3002</p> <p>\u4e3a\u4e86\u8fdb\u884c\u6d4b\u8bd5\uff0c\u8ba9\u6211\u4eec\u514b\u9686\u5e76\u51c6\u5907\u5b98\u65b9\u7684 Clinic.js \u5806\u5206\u6790\u5668\u6f14\u793a:</p> <pre><code>git clone https://github.com/clinicjs/node-clinic-heap-profiler-demo.git\ncd node-clinic-heap-profiler-demo\nnpm install\n</code></pre> <p>\u5f53 npm \u4e0b\u8f7d\u8fd9\u4e9b\u4f9d\u8d56\u65f6\uff0c\u8bf7\u67e5\u770bReadme\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u5206\u6790\u4e86!</p>"},{"location":"documentation/heapprofiler/02-getting-ready/#_2","title":"\u4e0b\u4e00\u4e2a","text":"<p>\u9996\u5148\u5206\u6790</p>"},{"location":"documentation/heapprofiler/03-first-analysis/","title":"\u9996\u5148\u5206\u6790","text":"<p>\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u597d\u5206\u6790\u5e94\u7528\u7a0b\u5e8f\u4e86\u3002</p> <p>\u8ba9\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528\u5b58\u50a8\u5e93\u4e2d\u7684\u7b2c\u4e00\u4e2a\u670d\u52a1\u5668\uff0c' 1-server-with-many-allocations.js '\u3002</p> <p>\u5b83\u5305\u542b\u4e00\u4e2a HTTP \u670d\u52a1\u5668\uff0c\u4f7f\u7528 fasttify \u6784\u5efa\uff0c\u5e26\u6709\u6839\u8def\u7531(' / ')\uff0c\u5728\u6536\u5230\u7684\u6bcf\u4e2a\u8bf7\u6c42\u4e2d\u5411\u5168\u5c40\u6570\u7ec4\u6dfb\u52a0\u4e00\u4e2a\u6574\u6570\u3002</p> <p>\u670d\u52a1\u5668\u53ef\u4ee5\u901a\u8fc7' node 1-server-with-many-allocations.js '\u542f\u52a8\uff0c\u7136\u540e\u5728\u6d4f\u89c8\u5668\u4e2d\u901a\u8fc7 http://localhost:3000/\u8bbf\u95ee\u3002\u5982\u679c\u767b\u9646\u9875\u9762\u663e\u793a\u201cHello World\u201d\uff0c\u90a3\u4e48\u4e00\u5207\u6b63\u5e38!</p> <p>\u8ba9\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528 Flame \u5bf9\u670d\u52a1\u5668\u8fdb\u884c\u5206\u6790\uff0c\u770b\u770b\u662f\u5426\u53ef\u4ee5\u627e\u5230\u4efb\u4f55\u74f6\u9888\u3002</p> <p>\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5de5\u5177\uff0c\u53ef\u4ee5\u6a21\u62df\u8db3\u591f\u5f3a\u70c8\u7684 HTTP \u8d1f\u8f7d\u3002</p> <p>\u6211\u4eec\u5efa\u8bae\u4f7f\u7528\u201cautocannon\u201d\uff0c\u5b83\u652f\u6301 Windows\u3001Mac \u548c Linux\uff0c\u800c\u4e14\u4f7f\u7528\u8d77\u6765\u5f88\u7b80\u5355\u3002</p> <p>\u8ba9\u6211\u4eec\u4ece npm \u5b89\u88c5\u5b83:</p> <pre><code>npm install -g autocannon\n</code></pre> <p>\u4e3a\u4e86\u8fd0\u884c\u5206\u6790\uff0c\u6211\u4eec\u5e0c\u671b\u4f7f\u7528 HeapProfiler \u8fd0\u884c\u670d\u52a1\u5668\uff0c\u5f53\u670d\u52a1\u5668\u51c6\u5907\u597d\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u4f7f\u7528\u201cautocannon\u201d\u5411\u5b83\u53d1\u9001\u5927\u91cf\u8bf7\u6c42\u3002</p> <p>\u6240\u6709\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u7528\u4e00\u4e2a\u547d\u4ee4\u6267\u884c\uff0c\u53ef\u4ee5\u539f\u6837\u590d\u5236\u548c\u7c98\u8d34:</p> <pre><code>clinic heapprofiler --autocannon [ / --method GET -d 120 ] -- node 1-server-with-many-allocations.js\n</code></pre> <p>Let's break this command down:</p> <ul> <li>The <code>clinic heapprofiler</code> portion invokes the <code>heapprofiler</code>   command tool.</li> <li>The <code>--autocannon</code> flag will execute the tool as soon as the server starts listening on a port sending tons of requests.</li> <li>Everything after the double-dash (<code>--</code>) is the command which starts the server that we want to profile, in this case <code>node 1-server-with-many-allocations.js</code>.</li> </ul> <p>\u8fd9\u4e2a\u547d\u4ee4\u8fd0\u884c\u4e09\u4e2a\u53ef\u6267\u884c\u6587\u4ef6:' clinic heapprofiler '\u7236\u53ef\u6267\u884c\u6587\u4ef6\uff0c' autocannon '\u53ef\u6267\u884c\u6587\u4ef6\u548c' node '\u53ef\u6267\u884c\u6587\u4ef6\u3002</p> <p>\u8fd0\u884c\u8be5\u547d\u4ee4\u540e\uff0c\u5c06\u5bf9\u8fdb\u7a0b\u8fdb\u884c 120 \u79d2\u7684\u8d1f\u8f7d\u6d4b\u8bd5(\u6839\u636e' -d 120 '\u53c2\u6570)\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u7f16\u8bd1\u6210\u4e00\u4e2a HTML \u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u5e94\u8be5\u5728\u6d4f\u89c8\u5668\u4e2d\u81ea\u52a8\u6253\u5f00\u3002</p> <p>\u751f\u6210\u7684 HTML \u5e94\u8be5\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u5185\u5bb9:</p> <p></p> <p>\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u706b\u7130\u56fe\u3002</p>"},{"location":"documentation/heapprofiler/03-first-analysis/#_2","title":"\u4e0b\u4e00\u4e2a","text":"<p>Flamegraphs</p>"},{"location":"documentation/heapprofiler/04-flamegraphs/","title":"Flamegraphs","text":"<p>Let's take a look again at the flamegraph generated in the prior \u9996\u5148\u5206\u6790 step.</p> <p></p> <p>Ignoring the surrounding controls for the moment, let's focus in on understanding the visualization.</p> <p>When generating a flamegraph we are asking three key questions:</p> <ul> <li>During the sampling period, which functions called each other?</li> <li>How much memory was allocated by each function observed?</li> <li>What are the functions that allocate more memory on the heap?</li> </ul> <p>These three questions are answered visually.</p>"},{"location":"documentation/heapprofiler/04-flamegraphs/#which-functions-called-each-other-the-stack","title":"Which functions called each other (the stack)","text":"<p>Each block represents the invocations of one function, aggregated by the call stack that led to it. When one block sits on top of another, it was called by the block below it, which was called by the block below it, and so on down the stack.</p> <p></p>"},{"location":"documentation/heapprofiler/04-flamegraphs/#how-much-memory-was-allocated-by-each-function-observed","title":"How much memory was allocated by each function observed?","text":"<p>The width of a block represents the amount of memory that the function allocated. In the box at top-right contain the allocation info of the selected function.</p> <p></p>"},{"location":"documentation/heapprofiler/04-flamegraphs/#what-are-the-functions-that-allocate-more-memory-on-the-heap","title":"What are the functions that allocate more memory on the heap?","text":"<p>The \"hottest\" function in the profile is selected by default.</p> <p>Here, we can see the function name and file location (or equivalent), so we can inspect the underlying code and decide if this function is something we can and should optimize.</p> <p></p> <p>The example above shows an Node.js function as the most hottest, you can click in \"Next biggest\" until reach an application function.</p> <p></p> <p>In the next chapter, we will see how to manage the UI to visualize only the meaningful data to the provided demo.</p>"},{"location":"documentation/heapprofiler/04-flamegraphs/#_1","title":"\u4e0b\u4e00\u4e2a","text":"<p>Controls</p>"},{"location":"documentation/heapprofiler/05-controls/","title":"Controls","text":"<p>The Clinic.js HeapProfiler UI controls have three main sections:</p> <ul> <li>Flamegraph controls: Interacting with the flamegraph itself</li> <li>Allocation Info: Along the top, containing info about the block currently highlighted</li> <li>Options Menu: More advanced controls expandable from the info panel</li> </ul>"},{"location":"documentation/heapprofiler/05-controls/#flamegraph-controls","title":"Flamegraph controls","text":""},{"location":"documentation/heapprofiler/05-controls/#interacting-with-a-flamegraph-block","title":"Interacting with a flamegraph block","text":"<p>Hovering the mouse over a block will temporarily show info about that block in the info panel at the top of the screen.</p> <p>Clicking will select the block, so that the info panel reverts to that block when you are no longer hovering over anything.</p> <p>If you find an interesting-looking block, it can be useful to click on it so you can hover around exploring its neighbours without losing it.</p>"},{"location":"documentation/heapprofiler/05-controls/#tooltip-buttons","title":"Tooltip buttons","text":"<p>After single-clicking on a block, or hovering over it for a moment, a tooltip appears, with one or more buttons:</p> <ul> <li>Expand. See below for more about expanding a particular block.</li> <li>Contract. If this is the block that you have already expanded, it will show   \"Contract\" instead of \"Expand\", which will take you back to the main view.</li> </ul>"},{"location":"documentation/heapprofiler/05-controls/#expanding","title":"Expanding","text":"<p>When a block is double-clicked, or its tooltip \"Expand\" button is used, it will expand to fill the full width of the flamegraph. Blocks below will also expand and fill the full width, while blocks above the clicked block will increase in ratio to the block they sit on. Expanding a block essentially creates a new flamegraph which represents a particular partition of the main flamegraph.</p> <p>The block that has been expanded is marked with a shadow underneath. Every block below this 'shadow' is probably wider (more memory allocated on the heap) than the block that has expanded to fill the screen.</p> <p>To get back to the main, non-expanded view, you can either click on the background, click \"Return to main view\" at the bottom of the screen, double-click on the expanded frame, or click on its \"Contract\" tooltip button.</p>"},{"location":"documentation/heapprofiler/05-controls/#allocation-info","title":"Allocation Info","text":"<p>There are five main features in the Allocation Info panel:</p> <ul> <li>Stack bar: A thin bar showing the \"hottest\" blocks in order</li> <li>Selection controls: Flick to the next hottest, previous, etc</li> <li>Code info: Where the function behind the currently highlighted block comes from</li> <li>Search box: For finding functions by name or path</li> <li>Options Menu: More advanced features. This Options Menu has its own section below</li> </ul>"},{"location":"documentation/heapprofiler/05-controls/#stack-bar","title":"Stack Bar","text":"<p>We previously explained, in the Flamegraphs page, how it is useful to consider how much memory a function allocated at the top of the stack, meaning the V8 allocated memory in the heap from that function; and how this is represented by the brightness or \"heat\" of the colour of the exposed part of a block.</p> <p>This bar shows you the heat of those exposed stack tops, of every block in the flamegraph, in order of heat i.e. in order of how long that block's function was blocking the event loop.</p> <p>You can run the cursor along this bar from left to right to see where these \"hot\" functions are on the main flamegraph, with the same interaction as above: hover to see info, click to select and show tooltip, double click to expand.</p> <p>The left-most (hottest) block is selected by default when a Clinic.js Heap profile is first opened.</p>"},{"location":"documentation/heapprofiler/05-controls/#selection-controls","title":"Selection Controls","text":"<p>These buttons allow you to easily jump from the currently selected block, to the block that is one to the left or right of it in the hottness-ranking shown by the Stack Bar.</p> <p>A good place to start with a Clinic.js Heap flamegraph, is to cycle through using the \"Next hottest\" button, and for each block it selects, think why that function are allocating too much memory. For example, it might be a function wasting unnecessary resources, or it might be a function you know that is expensive, but when you look at what is below it in the flamegraph, you might discover that it is being called too many times (for example, it might be in a nested loop).</p>"},{"location":"documentation/heapprofiler/05-controls/#code-info","title":"Code info","text":"<p>This gives you more complete information about the code behind the block that is currently highlighted.</p> <ul> <li>Function name (or equivalent) on the left. Anonymous functions are labelled   <code>(anonymous)</code>.</li> <li>File path (or equivalent) in the middle, including line and column number (if   applicable).</li> <li>Context. This tells you what category this block is (for example, dependency), and   may include additional information if certain   function labels are used.</li> </ul>"},{"location":"documentation/heapprofiler/05-controls/#search-box","title":"Search box","text":"<p>If there is some particular file or function(s) you want to locate, you can type part of the function name, file path or equivalent here, and any matches will be highlighted, in the same colour used for text and outlines.</p> <p>This can be useful if you've done such a good job optimizing an operation, you can no longer find it on the flamegraph!</p> <p></p> <p>If it is possible the function do not allocated too much memory in a given time, it might appear if you create a new profile with a longer duration and/or more connections in Autocannon.</p>"},{"location":"documentation/heapprofiler/05-controls/#options-menu","title":"Options Menu","text":"<p>Clicking \"Options\" on the right side of the Info Panel opens a menu with more advanced options.</p>"},{"location":"documentation/heapprofiler/05-controls/#visibility-by-code-area","title":"Visibility by code area","text":"<p>These toggle buttons show (tick) or hide (untick) blocks based on where the code is in the application or Node.js framework.</p> <ul> <li>[Application name]: Code inside the main package being profiled. Visible by default.</li> <li>Dependencies: Code in a dependency in a <code>node_modules</code> directory. Visible by default.</li> <li>Node JS: Code inside Node.js core. Visible by default.</li> <li>V8: Functions inside the V8 JavaScript engine. Hidden by default.</li> </ul>"},{"location":"documentation/heapprofiler/05-controls/#preferences","title":"Preferences","text":"<ul> <li>Presentation mode: Increases text sizes and colour contrasts, which can be useful   if Clinic.js Heap is being presented under suboptimal conditions (e.g. on a projector in   a brightly lit room).</li> </ul> <p>Profiles can be set to show in Presentation Mode by default by setting the <code>PRESENTATION_MODE</code> environment variable to <code>TRUE</code>.</p>"},{"location":"flame/","title":"Clinic.js Flame","text":"<p>\u5f15\u7528\u5176\u53d1\u660e\u8005Brendan Gregg\u7684\u8bdd\uff0c\u706b\u7130\u56fe\u662f\u4e00\u79cd\u5206\u6790\u8f6f\u4ef6\u7684\u53ef\u89c6\u5316\uff0c\u5141\u8bb8\u5feb\u901f\u51c6\u786e\u5730\u8bc6\u522b\u6700\u5e38\u89c1\u7684\u4ee3\u7801\u8def\u5f84\u3002 Flame\u662f\u4e13\u95e8\u4e3aNode.js\u8bbe\u8ba1\u7684\uff0c\u88ab\u5185\u7f6e\u4e8eClinic.js\u4e2d\u3002 \u5b83\u6536\u96c6CPU\u91c7\u6837\u4f7f\u7528\u7684\u6307\u6807\uff0c\u7136\u540e\u8ddf\u8e2a\u5806\u6808\u9876\u90e8\u7684\u9891\u7387\u5e76\u521b\u5efa\u706b\u7130\u56fe\u3002</p> <p>\u706b\u7130\u56fe\u662f\u968f\u65f6\u95f4\u91c7\u6837\u7684\u5806\u6808\u7684\u805a\u5408\u53ef\u89c6\u5316\u3002 \u5b83\u4e3b\u8981\u53ef\u89c6\u5316\u4e24\u4e2a\u6307\u6807\u3002 \u4e00\u4e2a\u51fd\u6570\u5728CPU\u4e0a\u7684\u65f6\u95f4\uff0c\u4ee5\u53ca\u4e00\u4e2a\u51fd\u6570\u5728\u6808\u9876\u7684\u65f6\u95f4\u3002 \u6700\u540e\u88ab\u8c03\u7528\u7684\u51fd\u6570\u88ab\u79f0\u4e3a\u4f4d\u4e8e\u5806\u6808\u9876\u90e8\u7684\u51fd\u6570\u3002 \u5982\u679c\u89c2\u5bdf\u5230\u4e00\u4e2a\u51fd\u6570\u5728\u5806\u6808\u9876\u90e8\u7684\u6b21\u6570\u6bd4\u5176\u4ed6\u51fd\u6570\u591a\uff0c\u5219\u8be5\u51fd\u6570\u53ef\u80fd\u963b\u585e\u4e86\u4e8b\u4ef6\u5faa\u73af\u3002 \u5982\u679c\u89c2\u5bdf\u5230\u4e00\u4e2a\u51fd\u6570\u4ee5\u8f83\u9ad8\u7684\u6bd4\u7387\u4f4d\u4e8e\u5806\u6808\u7684\u9876\u90e8\uff0c\u5219\u5c06\u5176\u79f0\u4e3a\"hot\"\u3002</p>"},{"location":"flame/#_1","title":"\u6f14\u793a","text":"<p>\u4ea4\u4e92\u4f8b\u5b50</p>"},{"location":"flame/#_2","title":"\u8bbe\u7f6e","text":"<pre><code>npm install clinic -g\nclinic flame --help\n</code></pre>"},{"location":"heapprofiler/","title":"Clinic.js HeapProfiler","text":"<p>\u706b\u7130\u56fe\u662f\u968f\u65f6\u95f4\u5206\u914d\u7684\u5185\u5b58\u7684\u805a\u5408\u53ef\u89c6\u5316\u3002 \u6bcf\u4e2a\u5757\u8868\u793a\u4e00\u4e2a\u51fd\u6570\u5206\u914d\u7684\u5185\u5b58\u91cf\u3002 \u5757\u8d8a\u5bbd\uff0c\u5206\u914d\u7684\u5185\u5b58\u5c31\u8d8a\u591a\u3002</p>"},{"location":"heapprofiler/#_1","title":"\u6f14\u793a","text":"<p>\u4e92\u52a8\u7684\u4f8b\u5b50</p>"},{"location":"heapprofiler/#_2","title":"\u914d\u7f6e","text":"<pre><code>npm install -g clinic\nclinic heapprofiler --help\n</code></pre>"},{"location":"reviews/review1/","title":"Review 1","text":"<code>#fun</code> <code>#python</code> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>","tags":["fun","python"]},{"location":"terms/","title":"Clinic.js Terms &amp; Conditions","text":""}]}